
MyGPIOtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000475c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  08004814  08004814  00005814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f4c  08004f4c  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004f4c  08004f4c  00006068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004f4c  08004f4c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f4c  08004f4c  00005f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f50  08004f50  00005f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004f54  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000068  08004fbc  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08004fbc  00006324  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a52  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000267b  00000000  00000000  00016ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00019160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad7  00000000  00000000  00019f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f60  00000000  00000000  0001aa1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d83  00000000  00000000  0003497f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f4ad  00000000  00000000  00047702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6baf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003900  00000000  00000000  000e6bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000ea4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000068 	.word	0x20000068
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080047fc 	.word	0x080047fc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000006c 	.word	0x2000006c
 80000fc:	080047fc 	.word	0x080047fc

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <IO_Init>:
uint16_t VolumeHex = 0x8FF6;
/**
 * @brief  初始化与AX5689和电源级相关的GPIO引脚.
 * @note   根据PDF Step 2: Initialize I/O.
 */
void IO_Init(void) {
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
    // 根据 IO_Init示例，初始化Mute引脚为低电平
    HAL_GPIO_WritePin(AX_Mute_N_GPIO_Port, AX_Mute_N_Pin, GPIO_PIN_RESET);
 8000404:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <IO_Init+0x44>)
 8000406:	2200      	movs	r2, #0
 8000408:	2101      	movs	r1, #1
 800040a:	0018      	movs	r0, r3
 800040c:	f001 f800 	bl	8001410 <HAL_GPIO_WritePin>
    // 禁用PSTART (MCU_Pstart_Pin -> PA9)
    HAL_GPIO_WritePin(MCU_Pstart_GPIO_Port, MCU_Pstart_Pin, GPIO_PIN_RESET);
 8000410:	2380      	movs	r3, #128	@ 0x80
 8000412:	0059      	lsls	r1, r3, #1
 8000414:	23a0      	movs	r3, #160	@ 0xa0
 8000416:	05db      	lsls	r3, r3, #23
 8000418:	2200      	movs	r2, #0
 800041a:	0018      	movs	r0, r3
 800041c:	f000 fff8 	bl	8001410 <HAL_GPIO_WritePin>

    HAL_Delay(20); // 等待信号稳定
 8000420:	2014      	movs	r0, #20
 8000422:	f000 fd9b 	bl	8000f5c <HAL_Delay>

    // 禁用Axign控制器 (AX_Reset_N_Pin -> PA8)
    HAL_GPIO_WritePin(AX_Reset_N_GPIO_Port, AX_Reset_N_Pin, GPIO_PIN_RESET);
 8000426:	23a0      	movs	r3, #160	@ 0xa0
 8000428:	05db      	lsls	r3, r3, #23
 800042a:	2200      	movs	r2, #0
 800042c:	2101      	movs	r1, #1
 800042e:	0018      	movs	r0, r3
 8000430:	f000 ffee 	bl	8001410 <HAL_GPIO_WritePin>
    printf("IO Initialized.\r\n");
 8000434:	4b04      	ldr	r3, [pc, #16]	@ (8000448 <IO_Init+0x48>)
 8000436:	0018      	movs	r0, r3
 8000438:	f003 fb4a 	bl	8003ad0 <puts>
}
 800043c:	46c0      	nop			@ (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)
 8000444:	50000800 	.word	0x50000800
 8000448:	08004814 	.word	0x08004814

0800044c <AX5689_Write>:
 * @brief  向AX5689寄存器写入16位数据.
 * @param  regAddr: 寄存器地址.
 * @param  regVal: 要写入的16位数据.
 * @retval HAL status.
 */
HAL_StatusTypeDef AX5689_Write(uint16_t regAddr, uint16_t regVal) {
 800044c:	b5b0      	push	{r4, r5, r7, lr}
 800044e:	b086      	sub	sp, #24
 8000450:	af02      	add	r7, sp, #8
 8000452:	0002      	movs	r2, r0
 8000454:	1dbb      	adds	r3, r7, #6
 8000456:	801a      	strh	r2, [r3, #0]
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	1c0a      	adds	r2, r1, #0
 800045c:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef status;
    uint8_t data[4];

    // 格式化数据: [RegAddr_MSB, RegAddr_LSB, Data_MSB, Data_LSB]
    data[0] = (regAddr >> 8) & 0xFF;
 800045e:	1dbb      	adds	r3, r7, #6
 8000460:	881b      	ldrh	r3, [r3, #0]
 8000462:	0a1b      	lsrs	r3, r3, #8
 8000464:	b29b      	uxth	r3, r3
 8000466:	b2da      	uxtb	r2, r3
 8000468:	2108      	movs	r1, #8
 800046a:	187b      	adds	r3, r7, r1
 800046c:	701a      	strb	r2, [r3, #0]
    data[1] = regAddr & 0xFF;
 800046e:	1dbb      	adds	r3, r7, #6
 8000470:	881b      	ldrh	r3, [r3, #0]
 8000472:	b2da      	uxtb	r2, r3
 8000474:	187b      	adds	r3, r7, r1
 8000476:	705a      	strb	r2, [r3, #1]
    data[2] = (regVal >> 8) & 0xFF;
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	881b      	ldrh	r3, [r3, #0]
 800047c:	0a1b      	lsrs	r3, r3, #8
 800047e:	b29b      	uxth	r3, r3
 8000480:	b2da      	uxtb	r2, r3
 8000482:	187b      	adds	r3, r7, r1
 8000484:	709a      	strb	r2, [r3, #2]
    data[3] = regVal & 0xFF;
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	881b      	ldrh	r3, [r3, #0]
 800048a:	b2da      	uxtb	r2, r3
 800048c:	187b      	adds	r3, r7, r1
 800048e:	70da      	strb	r2, [r3, #3]

    status = HAL_I2C_Master_Transmit(&hi2c2, AX5689_I2C_ADDR, data, 4, HAL_MAX_DELAY);
 8000490:	250f      	movs	r5, #15
 8000492:	197c      	adds	r4, r7, r5
 8000494:	187a      	adds	r2, r7, r1
 8000496:	4808      	ldr	r0, [pc, #32]	@ (80004b8 <AX5689_Write+0x6c>)
 8000498:	2301      	movs	r3, #1
 800049a:	425b      	negs	r3, r3
 800049c:	9300      	str	r3, [sp, #0]
 800049e:	2304      	movs	r3, #4
 80004a0:	2172      	movs	r1, #114	@ 0x72
 80004a2:	f001 f879 	bl	8001598 <HAL_I2C_Master_Transmit>
 80004a6:	0003      	movs	r3, r0
 80004a8:	7023      	strb	r3, [r4, #0]
    return status;
 80004aa:	197b      	adds	r3, r7, r5
 80004ac:	781b      	ldrb	r3, [r3, #0]
}
 80004ae:	0018      	movs	r0, r3
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b004      	add	sp, #16
 80004b4:	bdb0      	pop	{r4, r5, r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	20000084 	.word	0x20000084

080004bc <AX5689_WriteRegisterSet>:

/**
 * @brief  将寄存器配置数组写入AX5689.
 * @param  ptrConfigArray: 指向配置数组的指针.
 */
void AX5689_WriteRegisterSet(const uint16_t *ptrConfigArray) {
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
    // 循环直到遇到数组结束命令0xFFFF
    while (*ptrConfigArray != 0xFFFF) {
 80004c4:	e01f      	b.n	8000506 <AX5689_WriteRegisterSet+0x4a>
        uint16_t regAddr = ptrConfigArray[0];
 80004c6:	210e      	movs	r1, #14
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	8812      	ldrh	r2, [r2, #0]
 80004ce:	801a      	strh	r2, [r3, #0]
        uint16_t regVal = ptrConfigArray[1];
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	1c9a      	adds	r2, r3, #2
 80004d4:	200c      	movs	r0, #12
 80004d6:	183b      	adds	r3, r7, r0
 80004d8:	8812      	ldrh	r2, [r2, #0]
 80004da:	801a      	strh	r2, [r3, #0]
        if (AX5689_Write(regAddr, regVal) != HAL_OK) {
 80004dc:	183b      	adds	r3, r7, r0
 80004de:	881a      	ldrh	r2, [r3, #0]
 80004e0:	000c      	movs	r4, r1
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	0011      	movs	r1, r2
 80004e8:	0018      	movs	r0, r3
 80004ea:	f7ff ffaf 	bl	800044c <AX5689_Write>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d006      	beq.n	8000500 <AX5689_WriteRegisterSet+0x44>
            printf("Error writing register 0x%04X\r\n", regAddr);
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	881a      	ldrh	r2, [r3, #0]
 80004f6:	4b09      	ldr	r3, [pc, #36]	@ (800051c <AX5689_WriteRegisterSet+0x60>)
 80004f8:	0011      	movs	r1, r2
 80004fa:	0018      	movs	r0, r3
 80004fc:	f003 fa82 	bl	8003a04 <iprintf>
            // 可以加入错误处理
        }
        ptrConfigArray += 2; // 移动到数组中的下一个地址/数据对
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	3304      	adds	r3, #4
 8000504:	607b      	str	r3, [r7, #4]
    while (*ptrConfigArray != 0xFFFF) {
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	4a05      	ldr	r2, [pc, #20]	@ (8000520 <AX5689_WriteRegisterSet+0x64>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d1da      	bne.n	80004c6 <AX5689_WriteRegisterSet+0xa>
    }
}
 8000510:	46c0      	nop			@ (mov r8, r8)
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	b005      	add	sp, #20
 8000518:	bd90      	pop	{r4, r7, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)
 800051c:	08004828 	.word	0x08004828
 8000520:	0000ffff 	.word	0x0000ffff

08000524 <AX5689_Setup>:

/**
 * @brief  设置AX5689控制器.
 * @note   根据PDF Step 4: Setup the AX5688/AX5689.
 */
void AX5689_Setup(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
    // 从您的头文件写入寄存器设置
    HAL_GPIO_WritePin(AX_Reset_N_GPIO_Port, AX_Reset_N_Pin, GPIO_PIN_SET);
 8000528:	23a0      	movs	r3, #160	@ 0xa0
 800052a:	05db      	lsls	r3, r3, #23
 800052c:	2201      	movs	r2, #1
 800052e:	2101      	movs	r1, #1
 8000530:	0018      	movs	r0, r3
 8000532:	f000 ff6d 	bl	8001410 <HAL_GPIO_WritePin>
    printf("Writing register settings...\r\n");
 8000536:	4b0a      	ldr	r3, [pc, #40]	@ (8000560 <AX5689_Setup+0x3c>)
 8000538:	0018      	movs	r0, r3
 800053a:	f003 fac9 	bl	8003ad0 <puts>
    AX5689_WriteRegisterSet(&amplifierCommands[0]);
 800053e:	4b09      	ldr	r3, [pc, #36]	@ (8000564 <AX5689_Setup+0x40>)
 8000540:	0018      	movs	r0, r3
 8000542:	f7ff ffbb 	bl	80004bc <AX5689_WriteRegisterSet>
    printf("Register settings written.\r\n");
 8000546:	4b08      	ldr	r3, [pc, #32]	@ (8000568 <AX5689_Setup+0x44>)
 8000548:	0018      	movs	r0, r3
 800054a:	f003 fac1 	bl	8003ad0 <puts>
    HAL_Delay(500);
 800054e:	23fa      	movs	r3, #250	@ 0xfa
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fd02 	bl	8000f5c <HAL_Delay>
    // 系统稳定时间
}
 8000558:	46c0      	nop			@ (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			@ (mov r8, r8)
 8000560:	08004848 	.word	0x08004848
 8000564:	08004990 	.word	0x08004990
 8000568:	08004868 	.word	0x08004868

0800056c <StartControlLoop>:

void StartControlLoop(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
    printf("Starting control loop...\r\n");
 8000570:	4b1f      	ldr	r3, [pc, #124]	@ (80005f0 <StartControlLoop+0x84>)
 8000572:	0018      	movs	r0, r3
 8000574:	f003 faac 	bl	8003ad0 <puts>

    // 禁用所有环路滤波器和PWM调制器
    AX5689_Write(0x0001, REG01_VALUE_DEFAULT);
 8000578:	23ff      	movs	r3, #255	@ 0xff
 800057a:	021b      	lsls	r3, r3, #8
 800057c:	0019      	movs	r1, r3
 800057e:	2001      	movs	r0, #1
 8000580:	f7ff ff64 	bl	800044c <AX5689_Write>
    // 设置音量斜坡时间为快速
    AX5689_Write(0x0007, REG07_VALUE);
 8000584:	2101      	movs	r1, #1
 8000586:	2007      	movs	r0, #7
 8000588:	f7ff ff60 	bl	800044c <AX5689_Write>
    // 设置PSTART为高电平以使能电源级
    AX5689_Write(0x0002, REG02_PSTART_ENABLE);
 800058c:	4b19      	ldr	r3, [pc, #100]	@ (80005f4 <StartControlLoop+0x88>)
 800058e:	0019      	movs	r1, r3
 8000590:	2002      	movs	r0, #2
 8000592:	f7ff ff5b 	bl	800044c <AX5689_Write>
    HAL_GPIO_WritePin(MCU_Pstart_GPIO_Port, MCU_Pstart_Pin, GPIO_PIN_SET);   // 使能所有环路滤波器和PWM调制器
 8000596:	2380      	movs	r3, #128	@ 0x80
 8000598:	0059      	lsls	r1, r3, #1
 800059a:	23a0      	movs	r3, #160	@ 0xa0
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	2201      	movs	r2, #1
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 ff35 	bl	8001410 <HAL_GPIO_WritePin>
    //HAL_Delay(1);
    AX5689_Write(0x0001, REG01_VALUE);
 80005a6:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <StartControlLoop+0x8c>)
 80005a8:	0019      	movs	r1, r3
 80005aa:	2001      	movs	r0, #1
 80005ac:	f7ff ff4e 	bl	800044c <AX5689_Write>
    // 使能外部ADC反馈
    AX5689_Write(0x0003, REG03_VALUE);
 80005b0:	2155      	movs	r1, #85	@ 0x55
 80005b2:	2003      	movs	r0, #3
 80005b4:	f7ff ff4a 	bl	800044c <AX5689_Write>
   
    HAL_Delay(20);
 80005b8:	2014      	movs	r0, #20
 80005ba:	f000 fccf 	bl	8000f5c <HAL_Delay>
    // 取消静音 (AX_Mute_N_Pin -> PC6)
    HAL_GPIO_WritePin(AX_Mute_N_GPIO_Port, AX_Mute_N_Pin, GPIO_PIN_SET);
 80005be:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <StartControlLoop+0x90>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	2101      	movs	r1, #1
 80005c4:	0018      	movs	r0, r3
 80005c6:	f000 ff23 	bl	8001410 <HAL_GPIO_WritePin>
    printf("Amplifier Unmuted.\r\n");
 80005ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <StartControlLoop+0x94>)
 80005cc:	0018      	movs	r0, r3
 80005ce:	f003 fa7f 	bl	8003ad0 <puts>

    // 等待音量斜坡上升
    HAL_Delay(20);
 80005d2:	2014      	movs	r0, #20
 80005d4:	f000 fcc2 	bl	8000f5c <HAL_Delay>

    // 将音量斜坡时间设回默认值
    AX5689_Write(0x0007, REG07_VALUE_DEFAULT);
 80005d8:	2164      	movs	r1, #100	@ 0x64
 80005da:	2007      	movs	r0, #7
 80005dc:	f7ff ff36 	bl	800044c <AX5689_Write>
    // 设置PSTART为高电平以使能电源级

    printf("Control loop started.\r\n");
 80005e0:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <StartControlLoop+0x98>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f003 fa74 	bl	8003ad0 <puts>
}
 80005e8:	46c0      	nop			@ (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	08004884 	.word	0x08004884
 80005f4:	00001fff 	.word	0x00001fff
 80005f8:	0000ffff 	.word	0x0000ffff
 80005fc:	50000800 	.word	0x50000800
 8000600:	080048a0 	.word	0x080048a0
 8000604:	080048b4 	.word	0x080048b4

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fc20 	bl	8000e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f812 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f934 	bl	8000880 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000618:	f000 f866 	bl	80006e8 <MX_I2C2_Init>
  MX_SPI2_Init();
 800061c:	f000 f8a4 	bl	8000768 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000620:	f000 f8e0 	bl	80007e4 <MX_USART1_UART_Init>

  IO_Init();
 8000624:	f7ff feec 	bl	8000400 <IO_Init>

  AX5689_Setup();
 8000628:	f7ff ff7c 	bl	8000524 <AX5689_Setup>

  // 启动控制循环
  StartControlLoop();
 800062c:	f7ff ff9e 	bl	800056c <StartControlLoop>
  while (1)
  {

    //checkStatusRegister();

    HAL_Delay(100); // 轮询间隔
 8000630:	2064      	movs	r0, #100	@ 0x64
 8000632:	f000 fc93 	bl	8000f5c <HAL_Delay>
 8000636:	e7fb      	b.n	8000630 <main+0x28>

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b093      	sub	sp, #76	@ 0x4c
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	2410      	movs	r4, #16
 8000640:	193b      	adds	r3, r7, r4
 8000642:	0018      	movs	r0, r3
 8000644:	2338      	movs	r3, #56	@ 0x38
 8000646:	001a      	movs	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	f003 fb37 	bl	8003cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064e:	003b      	movs	r3, r7
 8000650:	0018      	movs	r0, r3
 8000652:	2310      	movs	r3, #16
 8000654:	001a      	movs	r2, r3
 8000656:	2100      	movs	r1, #0
 8000658:	f003 fb30 	bl	8003cbc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2380      	movs	r3, #128	@ 0x80
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fb91 	bl	8001d88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000666:	193b      	adds	r3, r7, r4
 8000668:	2201      	movs	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	2280      	movs	r2, #128	@ 0x80
 8000670:	0252      	lsls	r2, r2, #9
 8000672:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	0021      	movs	r1, r4
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2202      	movs	r2, #2
 800067a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2203      	movs	r2, #3
 8000680:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2200      	movs	r2, #0
 8000686:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2210      	movs	r2, #16
 800068c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2280      	movs	r2, #128	@ 0x80
 8000692:	0292      	lsls	r2, r2, #10
 8000694:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2280      	movs	r2, #128	@ 0x80
 800069a:	0492      	lsls	r2, r2, #18
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2280      	movs	r2, #128	@ 0x80
 80006a2:	0592      	lsls	r2, r2, #22
 80006a4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	0018      	movs	r0, r3
 80006aa:	f001 fbb9 	bl	8001e20 <HAL_RCC_OscConfig>
 80006ae:	1e03      	subs	r3, r0, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80006b2:	f000 f9ab 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	003b      	movs	r3, r7
 80006b8:	2207      	movs	r2, #7
 80006ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	003b      	movs	r3, r7
 80006be:	2202      	movs	r2, #2
 80006c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	003b      	movs	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c8:	003b      	movs	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ce:	003b      	movs	r3, r7
 80006d0:	2102      	movs	r1, #2
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 febe 	bl	8002454 <HAL_RCC_ClockConfig>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006dc:	f000 f996 	bl	8000a0c <Error_Handler>
  }
}
 80006e0:	46c0      	nop			@ (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b013      	add	sp, #76	@ 0x4c
 80006e6:	bd90      	pop	{r4, r7, pc}

080006e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	@ (800075c <MX_I2C2_Init+0x74>)
 80006ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <MX_I2C2_Init+0x78>)
 80006f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <MX_I2C2_Init+0x74>)
 80006f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000764 <MX_I2C2_Init+0x7c>)
 80006f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006f8:	4b18      	ldr	r3, [pc, #96]	@ (800075c <MX_I2C2_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fe:	4b17      	ldr	r3, [pc, #92]	@ (800075c <MX_I2C2_Init+0x74>)
 8000700:	2201      	movs	r2, #1
 8000702:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000704:	4b15      	ldr	r3, [pc, #84]	@ (800075c <MX_I2C2_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <MX_I2C2_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000710:	4b12      	ldr	r3, [pc, #72]	@ (800075c <MX_I2C2_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_I2C2_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071c:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <MX_I2C2_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_I2C2_Init+0x74>)
 8000724:	0018      	movs	r0, r3
 8000726:	f000 fe91 	bl	800144c <HAL_I2C_Init>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800072e:	f000 f96d 	bl	8000a0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000732:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <MX_I2C2_Init+0x74>)
 8000734:	2100      	movs	r1, #0
 8000736:	0018      	movs	r0, r3
 8000738:	f001 fa8e 	bl	8001c58 <HAL_I2CEx_ConfigAnalogFilter>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000740:	f000 f964 	bl	8000a0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000744:	4b05      	ldr	r3, [pc, #20]	@ (800075c <MX_I2C2_Init+0x74>)
 8000746:	2100      	movs	r1, #0
 8000748:	0018      	movs	r0, r3
 800074a:	f001 fad1 	bl	8001cf0 <HAL_I2CEx_ConfigDigitalFilter>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d001      	beq.n	8000756 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000752:	f000 f95b 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000756:	46c0      	nop			@ (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000084 	.word	0x20000084
 8000760:	40005800 	.word	0x40005800
 8000764:	00503d58 	.word	0x00503d58

08000768 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800076c:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <MX_SPI2_Init+0x74>)
 800076e:	4a1c      	ldr	r2, [pc, #112]	@ (80007e0 <MX_SPI2_Init+0x78>)
 8000770:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000772:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <MX_SPI2_Init+0x74>)
 8000774:	2282      	movs	r2, #130	@ 0x82
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800077a:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <MX_SPI2_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000780:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <MX_SPI2_Init+0x74>)
 8000782:	22c0      	movs	r2, #192	@ 0xc0
 8000784:	0092      	lsls	r2, r2, #2
 8000786:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <MX_SPI2_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800078e:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <MX_SPI2_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_SPI2_Init+0x74>)
 8000796:	2280      	movs	r2, #128	@ 0x80
 8000798:	02d2      	lsls	r2, r2, #11
 800079a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_SPI2_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_SPI2_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_SPI2_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_SPI2_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_SPI2_Init+0x74>)
 80007b6:	2207      	movs	r2, #7
 80007b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <MX_SPI2_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_SPI2_Init+0x74>)
 80007c2:	2208      	movs	r2, #8
 80007c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007c6:	4b05      	ldr	r3, [pc, #20]	@ (80007dc <MX_SPI2_Init+0x74>)
 80007c8:	0018      	movs	r0, r3
 80007ca:	f002 f975 	bl	8002ab8 <HAL_SPI_Init>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80007d2:	f000 f91b 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000d8 	.word	0x200000d8
 80007e0:	40003800 	.word	0x40003800

080007e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e8:	4b23      	ldr	r3, [pc, #140]	@ (8000878 <MX_USART1_UART_Init+0x94>)
 80007ea:	4a24      	ldr	r2, [pc, #144]	@ (800087c <MX_USART1_UART_Init+0x98>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ee:	4b22      	ldr	r3, [pc, #136]	@ (8000878 <MX_USART1_UART_Init+0x94>)
 80007f0:	22e1      	movs	r2, #225	@ 0xe1
 80007f2:	0252      	lsls	r2, r2, #9
 80007f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b20      	ldr	r3, [pc, #128]	@ (8000878 <MX_USART1_UART_Init+0x94>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <MX_USART1_UART_Init+0x94>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000802:	4b1d      	ldr	r3, [pc, #116]	@ (8000878 <MX_USART1_UART_Init+0x94>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <MX_USART1_UART_Init+0x94>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <MX_USART1_UART_Init+0x94>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <MX_USART1_UART_Init+0x94>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <MX_USART1_UART_Init+0x94>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000820:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_USART1_UART_Init+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MX_USART1_UART_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <MX_USART1_UART_Init+0x94>)
 800082e:	0018      	movs	r0, r3
 8000830:	f002 f9fa 	bl	8002c28 <HAL_UART_Init>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000838:	f000 f8e8 	bl	8000a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083c:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <MX_USART1_UART_Init+0x94>)
 800083e:	2100      	movs	r1, #0
 8000840:	0018      	movs	r0, r3
 8000842:	f002 ff3b 	bl	80036bc <HAL_UARTEx_SetTxFifoThreshold>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d001      	beq.n	800084e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800084a:	f000 f8df 	bl	8000a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800084e:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <MX_USART1_UART_Init+0x94>)
 8000850:	2100      	movs	r1, #0
 8000852:	0018      	movs	r0, r3
 8000854:	f002 ff72 	bl	800373c <HAL_UARTEx_SetRxFifoThreshold>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800085c:	f000 f8d6 	bl	8000a0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000860:	4b05      	ldr	r3, [pc, #20]	@ (8000878 <MX_USART1_UART_Init+0x94>)
 8000862:	0018      	movs	r0, r3
 8000864:	f002 fef0 	bl	8003648 <HAL_UARTEx_DisableFifoMode>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800086c:	f000 f8ce 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	2000013c 	.word	0x2000013c
 800087c:	40013800 	.word	0x40013800

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b08b      	sub	sp, #44	@ 0x2c
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	2414      	movs	r4, #20
 8000888:	193b      	adds	r3, r7, r4
 800088a:	0018      	movs	r0, r3
 800088c:	2314      	movs	r3, #20
 800088e:	001a      	movs	r2, r3
 8000890:	2100      	movs	r1, #0
 8000892:	f003 fa13 	bl	8003cbc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	4b51      	ldr	r3, [pc, #324]	@ (80009dc <MX_GPIO_Init+0x15c>)
 8000898:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800089a:	4b50      	ldr	r3, [pc, #320]	@ (80009dc <MX_GPIO_Init+0x15c>)
 800089c:	2104      	movs	r1, #4
 800089e:	430a      	orrs	r2, r1
 80008a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80008a2:	4b4e      	ldr	r3, [pc, #312]	@ (80009dc <MX_GPIO_Init+0x15c>)
 80008a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008a6:	2204      	movs	r2, #4
 80008a8:	4013      	ands	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ae:	4b4b      	ldr	r3, [pc, #300]	@ (80009dc <MX_GPIO_Init+0x15c>)
 80008b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008b2:	4b4a      	ldr	r3, [pc, #296]	@ (80009dc <MX_GPIO_Init+0x15c>)
 80008b4:	2120      	movs	r1, #32
 80008b6:	430a      	orrs	r2, r1
 80008b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80008ba:	4b48      	ldr	r3, [pc, #288]	@ (80009dc <MX_GPIO_Init+0x15c>)
 80008bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008be:	2220      	movs	r2, #32
 80008c0:	4013      	ands	r3, r2
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b45      	ldr	r3, [pc, #276]	@ (80009dc <MX_GPIO_Init+0x15c>)
 80008c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008ca:	4b44      	ldr	r3, [pc, #272]	@ (80009dc <MX_GPIO_Init+0x15c>)
 80008cc:	2101      	movs	r1, #1
 80008ce:	430a      	orrs	r2, r1
 80008d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80008d2:	4b42      	ldr	r3, [pc, #264]	@ (80009dc <MX_GPIO_Init+0x15c>)
 80008d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008d6:	2201      	movs	r2, #1
 80008d8:	4013      	ands	r3, r2
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	4b3f      	ldr	r3, [pc, #252]	@ (80009dc <MX_GPIO_Init+0x15c>)
 80008e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008e2:	4b3e      	ldr	r3, [pc, #248]	@ (80009dc <MX_GPIO_Init+0x15c>)
 80008e4:	2102      	movs	r1, #2
 80008e6:	430a      	orrs	r2, r1
 80008e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80008ea:	4b3c      	ldr	r3, [pc, #240]	@ (80009dc <MX_GPIO_Init+0x15c>)
 80008ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ee:	2202      	movs	r2, #2
 80008f0:	4013      	ands	r3, r2
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D1V2_EN_Pin|AX_3V3_Pin|AX_5V_Pin|D5V2_EN_Pin
 80008f6:	493a      	ldr	r1, [pc, #232]	@ (80009e0 <MX_GPIO_Init+0x160>)
 80008f8:	4b3a      	ldr	r3, [pc, #232]	@ (80009e4 <MX_GPIO_Init+0x164>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 fd87 	bl	8001410 <HAL_GPIO_WritePin>
                          |AX_Mute_N_Pin|LED_ON_OFF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AX_Reset_N_Pin|PVDD_EN_Pin|LED_Display_CS_Pin|LED_Display_Data_Pin
 8000902:	2396      	movs	r3, #150	@ 0x96
 8000904:	33ff      	adds	r3, #255	@ 0xff
 8000906:	0019      	movs	r1, r3
 8000908:	23a0      	movs	r3, #160	@ 0xa0
 800090a:	05db      	lsls	r3, r3, #23
 800090c:	2200      	movs	r2, #0
 800090e:	0018      	movs	r0, r3
 8000910:	f000 fd7e 	bl	8001410 <HAL_GPIO_WritePin>
                          |MCU_Pstart_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : D1V2_EN_Pin AX_3V3_Pin AX_5V_Pin D5V2_EN_Pin
                           AX_Mute_N_Pin LED_ON_OFF_Pin */
  GPIO_InitStruct.Pin = D1V2_EN_Pin|AX_3V3_Pin|AX_5V_Pin|D5V2_EN_Pin
 8000914:	193b      	adds	r3, r7, r4
 8000916:	4a32      	ldr	r2, [pc, #200]	@ (80009e0 <MX_GPIO_Init+0x160>)
 8000918:	601a      	str	r2, [r3, #0]
                          |AX_Mute_N_Pin|LED_ON_OFF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	193b      	adds	r3, r7, r4
 800091c:	2201      	movs	r2, #1
 800091e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	193b      	adds	r3, r7, r4
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	193b      	adds	r3, r7, r4
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092c:	193b      	adds	r3, r7, r4
 800092e:	4a2d      	ldr	r2, [pc, #180]	@ (80009e4 <MX_GPIO_Init+0x164>)
 8000930:	0019      	movs	r1, r3
 8000932:	0010      	movs	r0, r2
 8000934:	f000 fc00 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : AX_Reset_N_Pin */
  GPIO_InitStruct.Pin = AX_Reset_N_Pin;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2201      	movs	r2, #1
 800093c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2211      	movs	r2, #17
 8000942:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(AX_Reset_N_GPIO_Port, &GPIO_InitStruct);
 8000950:	193a      	adds	r2, r7, r4
 8000952:	23a0      	movs	r3, #160	@ 0xa0
 8000954:	05db      	lsls	r3, r3, #23
 8000956:	0011      	movs	r1, r2
 8000958:	0018      	movs	r0, r3
 800095a:	f000 fbed 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pins : AX_Status_Pin LED_Display_CLK_Pin */
  GPIO_InitStruct.Pin = AX_Status_Pin|LED_Display_CLK_Pin;
 800095e:	193b      	adds	r3, r7, r4
 8000960:	2222      	movs	r2, #34	@ 0x22
 8000962:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	193b      	adds	r3, r7, r4
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	193b      	adds	r3, r7, r4
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	193a      	adds	r2, r7, r4
 8000972:	23a0      	movs	r3, #160	@ 0xa0
 8000974:	05db      	lsls	r3, r3, #23
 8000976:	0011      	movs	r1, r2
 8000978:	0018      	movs	r0, r3
 800097a:	f000 fbdd 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PVDD_EN_Pin LED_Display_CS_Pin LED_Display_Data_Pin MCU_Pstart_Pin */
  GPIO_InitStruct.Pin = PVDD_EN_Pin|LED_Display_CS_Pin|LED_Display_Data_Pin|MCU_Pstart_Pin;
 800097e:	0021      	movs	r1, r4
 8000980:	187b      	adds	r3, r7, r1
 8000982:	22ca      	movs	r2, #202	@ 0xca
 8000984:	0052      	lsls	r2, r2, #1
 8000986:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	000c      	movs	r4, r1
 800098a:	193b      	adds	r3, r7, r4
 800098c:	2201      	movs	r2, #1
 800098e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	193b      	adds	r3, r7, r4
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	193b      	adds	r3, r7, r4
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	193a      	adds	r2, r7, r4
 800099e:	23a0      	movs	r3, #160	@ 0xa0
 80009a0:	05db      	lsls	r3, r3, #23
 80009a2:	0011      	movs	r1, r2
 80009a4:	0018      	movs	r0, r3
 80009a6:	f000 fbc7 	bl	8001138 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  GPIO_InitStruct.Pin = GPIO_PIN_8; // 选择要配置的引脚
 80009aa:	0021      	movs	r1, r4
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2280      	movs	r2, #128	@ 0x80
 80009b0:	0052      	lsls	r2, r2, #1
 80009b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // 设置为推挽输出模式
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2201      	movs	r2, #1
 80009b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // 推挽模式下不需要内部上下拉
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // 设置为低速，因为我们只是输出一个静态电平
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); // 应用以上配置到GPIOC端口
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	4a06      	ldr	r2, [pc, #24]	@ (80009e4 <MX_GPIO_Init+0x164>)
 80009ca:	0019      	movs	r1, r3
 80009cc:	0010      	movs	r0, r2
 80009ce:	f000 fbb3 	bl	8001138 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b00b      	add	sp, #44	@ 0x2c
 80009d8:	bd90      	pop	{r4, r7, pc}
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	40021000 	.word	0x40021000
 80009e0:	00007901 	.word	0x00007901
 80009e4:	50000800 	.word	0x50000800

080009e8 <__io_putchar>:
/* USER CODE BEGIN 4 */
/**
  * @brief  Retargets the C library printf function to the USART.
  */
PUTCHAR_PROTOTYPE
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80009f0:	2301      	movs	r3, #1
 80009f2:	425b      	negs	r3, r3
 80009f4:	1d39      	adds	r1, r7, #4
 80009f6:	4804      	ldr	r0, [pc, #16]	@ (8000a08 <__io_putchar+0x20>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	f002 f96b 	bl	8002cd4 <HAL_UART_Transmit>
  return ch;
 80009fe:	687b      	ldr	r3, [r7, #4]
}
 8000a00:	0018      	movs	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b002      	add	sp, #8
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	2000013c 	.word	0x2000013c

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	46c0      	nop			@ (mov r8, r8)
 8000a16:	e7fd      	b.n	8000a14 <Error_Handler+0x8>

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a22:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a24:	2101      	movs	r1, #1
 8000a26:	430a      	orrs	r2, r1
 8000a28:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4013      	ands	r3, r2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a3c:	2180      	movs	r1, #128	@ 0x80
 8000a3e:	0549      	lsls	r1, r1, #21
 8000a40:	430a      	orrs	r2, r1
 8000a42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a44:	4b07      	ldr	r3, [pc, #28]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a48:	2380      	movs	r3, #128	@ 0x80
 8000a4a:	055b      	lsls	r3, r3, #21
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000a52:	23c0      	movs	r3, #192	@ 0xc0
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 faa4 	bl	8000fa4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5c:	46c0      	nop			@ (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b002      	add	sp, #8
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40021000 	.word	0x40021000

08000a68 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b095      	sub	sp, #84	@ 0x54
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	233c      	movs	r3, #60	@ 0x3c
 8000a72:	18fb      	adds	r3, r7, r3
 8000a74:	0018      	movs	r0, r3
 8000a76:	2314      	movs	r3, #20
 8000a78:	001a      	movs	r2, r3
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	f003 f91e 	bl	8003cbc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a80:	2410      	movs	r4, #16
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	0018      	movs	r0, r3
 8000a86:	232c      	movs	r3, #44	@ 0x2c
 8000a88:	001a      	movs	r2, r3
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f003 f916 	bl	8003cbc <memset>
  if(hi2c->Instance==I2C2)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a22      	ldr	r2, [pc, #136]	@ (8000b20 <HAL_I2C_MspInit+0xb8>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d13d      	bne.n	8000b16 <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2240      	movs	r2, #64	@ 0x40
 8000a9e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f001 fe7d 	bl	80027a8 <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	1e03      	subs	r3, r0, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000ab2:	f7ff ffab 	bl	8000a0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b24 <HAL_I2C_MspInit+0xbc>)
 8000ab8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aba:	4b1a      	ldr	r3, [pc, #104]	@ (8000b24 <HAL_I2C_MspInit+0xbc>)
 8000abc:	2102      	movs	r1, #2
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ac2:	4b18      	ldr	r3, [pc, #96]	@ (8000b24 <HAL_I2C_MspInit+0xbc>)
 8000ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB3     ------> I2C2_SCL
    PB4     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000ace:	213c      	movs	r1, #60	@ 0x3c
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2218      	movs	r2, #24
 8000ad4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2212      	movs	r2, #18
 8000ada:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C2;
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	2208      	movs	r2, #8
 8000aec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b28 <HAL_I2C_MspInit+0xc0>)
 8000af2:	0019      	movs	r1, r3
 8000af4:	0010      	movs	r0, r2
 8000af6:	f000 fb1f 	bl	8001138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000afa:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <HAL_I2C_MspInit+0xbc>)
 8000afc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <HAL_I2C_MspInit+0xbc>)
 8000b00:	2180      	movs	r1, #128	@ 0x80
 8000b02:	03c9      	lsls	r1, r1, #15
 8000b04:	430a      	orrs	r2, r1
 8000b06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <HAL_I2C_MspInit+0xbc>)
 8000b0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b0c:	2380      	movs	r3, #128	@ 0x80
 8000b0e:	03db      	lsls	r3, r3, #15
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b015      	add	sp, #84	@ 0x54
 8000b1c:	bd90      	pop	{r4, r7, pc}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	40005800 	.word	0x40005800
 8000b24:	40021000 	.word	0x40021000
 8000b28:	50000400 	.word	0x50000400

08000b2c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b08b      	sub	sp, #44	@ 0x2c
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	2414      	movs	r4, #20
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	0018      	movs	r0, r3
 8000b3a:	2314      	movs	r3, #20
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f003 f8bc 	bl	8003cbc <memset>
  if(hspi->Instance==SPI2)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb8 <HAL_SPI_MspInit+0x8c>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d130      	bne.n	8000bb0 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bbc <HAL_SPI_MspInit+0x90>)
 8000b50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b52:	4b1a      	ldr	r3, [pc, #104]	@ (8000bbc <HAL_SPI_MspInit+0x90>)
 8000b54:	2180      	movs	r1, #128	@ 0x80
 8000b56:	01c9      	lsls	r1, r1, #7
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b5c:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <HAL_SPI_MspInit+0x90>)
 8000b5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b60:	2380      	movs	r3, #128	@ 0x80
 8000b62:	01db      	lsls	r3, r3, #7
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <HAL_SPI_MspInit+0x90>)
 8000b6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b6e:	4b13      	ldr	r3, [pc, #76]	@ (8000bbc <HAL_SPI_MspInit+0x90>)
 8000b70:	2102      	movs	r1, #2
 8000b72:	430a      	orrs	r2, r1
 8000b74:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b76:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <HAL_SPI_MspInit+0x90>)
 8000b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	22f0      	movs	r2, #240	@ 0xf0
 8000b86:	0212      	lsls	r2, r2, #8
 8000b88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	0021      	movs	r1, r4
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2202      	movs	r2, #2
 8000b90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	4a06      	ldr	r2, [pc, #24]	@ (8000bc0 <HAL_SPI_MspInit+0x94>)
 8000ba8:	0019      	movs	r1, r3
 8000baa:	0010      	movs	r0, r2
 8000bac:	f000 fac4 	bl	8001138 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000bb0:	46c0      	nop			@ (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b00b      	add	sp, #44	@ 0x2c
 8000bb6:	bd90      	pop	{r4, r7, pc}
 8000bb8:	40003800 	.word	0x40003800
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	50000400 	.word	0x50000400

08000bc4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b095      	sub	sp, #84	@ 0x54
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	233c      	movs	r3, #60	@ 0x3c
 8000bce:	18fb      	adds	r3, r7, r3
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	2314      	movs	r3, #20
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f003 f870 	bl	8003cbc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bdc:	2410      	movs	r4, #16
 8000bde:	193b      	adds	r3, r7, r4
 8000be0:	0018      	movs	r0, r3
 8000be2:	232c      	movs	r3, #44	@ 0x2c
 8000be4:	001a      	movs	r2, r3
 8000be6:	2100      	movs	r1, #0
 8000be8:	f003 f868 	bl	8003cbc <memset>
  if(huart->Instance==USART1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a23      	ldr	r2, [pc, #140]	@ (8000c80 <HAL_UART_MspInit+0xbc>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d13f      	bne.n	8000c76 <HAL_UART_MspInit+0xb2>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000bfc:	193b      	adds	r3, r7, r4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c02:	193b      	adds	r3, r7, r4
 8000c04:	0018      	movs	r0, r3
 8000c06:	f001 fdcf 	bl	80027a8 <HAL_RCCEx_PeriphCLKConfig>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c0e:	f7ff fefd 	bl	8000a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c12:	4b1c      	ldr	r3, [pc, #112]	@ (8000c84 <HAL_UART_MspInit+0xc0>)
 8000c14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c16:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <HAL_UART_MspInit+0xc0>)
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	01c9      	lsls	r1, r1, #7
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c20:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <HAL_UART_MspInit+0xc0>)
 8000c22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c24:	2380      	movs	r3, #128	@ 0x80
 8000c26:	01db      	lsls	r3, r3, #7
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <HAL_UART_MspInit+0xc0>)
 8000c30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c32:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <HAL_UART_MspInit+0xc0>)
 8000c34:	2101      	movs	r1, #1
 8000c36:	430a      	orrs	r2, r1
 8000c38:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c3a:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <HAL_UART_MspInit+0xc0>)
 8000c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c46:	213c      	movs	r1, #60	@ 0x3c
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	22c0      	movs	r2, #192	@ 0xc0
 8000c4c:	00d2      	lsls	r2, r2, #3
 8000c4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2202      	movs	r2, #2
 8000c54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2201      	movs	r2, #1
 8000c66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	187a      	adds	r2, r7, r1
 8000c6a:	23a0      	movs	r3, #160	@ 0xa0
 8000c6c:	05db      	lsls	r3, r3, #23
 8000c6e:	0011      	movs	r1, r2
 8000c70:	0018      	movs	r0, r3
 8000c72:	f000 fa61 	bl	8001138 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000c76:	46c0      	nop			@ (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b015      	add	sp, #84	@ 0x54
 8000c7c:	bd90      	pop	{r4, r7, pc}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	40013800 	.word	0x40013800
 8000c84:	40021000 	.word	0x40021000

08000c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c8c:	46c0      	nop			@ (mov r8, r8)
 8000c8e:	e7fd      	b.n	8000c8c <NMI_Handler+0x4>

08000c90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c94:	46c0      	nop			@ (mov r8, r8)
 8000c96:	e7fd      	b.n	8000c94 <HardFault_Handler+0x4>

08000c98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c9c:	46c0      	nop			@ (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb0:	f000 f938 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb4:	46c0      	nop			@ (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	60f8      	str	r0, [r7, #12]
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	e00a      	b.n	8000ce2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ccc:	e000      	b.n	8000cd0 <_read+0x16>
 8000cce:	bf00      	nop
 8000cd0:	0001      	movs	r1, r0
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	1c5a      	adds	r2, r3, #1
 8000cd6:	60ba      	str	r2, [r7, #8]
 8000cd8:	b2ca      	uxtb	r2, r1
 8000cda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	dbf0      	blt.n	8000ccc <_read+0x12>
  }

  return len;
 8000cea:	687b      	ldr	r3, [r7, #4]
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b006      	add	sp, #24
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	e009      	b.n	8000d1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	60ba      	str	r2, [r7, #8]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f7ff fe6a 	bl	80009e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	3301      	adds	r3, #1
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	dbf1      	blt.n	8000d06 <_write+0x12>
  }
  return len;
 8000d22:	687b      	ldr	r3, [r7, #4]
}
 8000d24:	0018      	movs	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b006      	add	sp, #24
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <_close>:

int _close(int file)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d34:	2301      	movs	r3, #1
 8000d36:	425b      	negs	r3, r3
}
 8000d38:	0018      	movs	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b002      	add	sp, #8
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	0192      	lsls	r2, r2, #6
 8000d50:	605a      	str	r2, [r3, #4]
  return 0;
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	0018      	movs	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b002      	add	sp, #8
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_isatty>:

int _isatty(int file)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d64:	2301      	movs	r3, #1
}
 8000d66:	0018      	movs	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b002      	add	sp, #8
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b084      	sub	sp, #16
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b004      	add	sp, #16
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d8c:	4a14      	ldr	r2, [pc, #80]	@ (8000de0 <_sbrk+0x5c>)
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <_sbrk+0x60>)
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d98:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d102      	bne.n	8000da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da0:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <_sbrk+0x64>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	@ (8000dec <_sbrk+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da6:	4b10      	ldr	r3, [pc, #64]	@ (8000de8 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	18d3      	adds	r3, r2, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d207      	bcs.n	8000dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db4:	f002 ffd8 	bl	8003d68 <__errno>
 8000db8:	0003      	movs	r3, r0
 8000dba:	220c      	movs	r2, #12
 8000dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	425b      	negs	r3, r3
 8000dc2:	e009      	b.n	8000dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dca:	4b07      	ldr	r3, [pc, #28]	@ (8000de8 <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	18d2      	adds	r2, r2, r3
 8000dd2:	4b05      	ldr	r3, [pc, #20]	@ (8000de8 <_sbrk+0x64>)
 8000dd4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	0018      	movs	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b006      	add	sp, #24
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20024000 	.word	0x20024000
 8000de4:	00000400 	.word	0x00000400
 8000de8:	200001d0 	.word	0x200001d0
 8000dec:	20000328 	.word	0x20000328

08000df0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	46c0      	nop			@ (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dfc:	480d      	ldr	r0, [pc, #52]	@ (8000e34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dfe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e00:	f7ff fff6 	bl	8000df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e04:	480c      	ldr	r0, [pc, #48]	@ (8000e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e06:	490d      	ldr	r1, [pc, #52]	@ (8000e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e08:	4a0d      	ldr	r2, [pc, #52]	@ (8000e40 <LoopForever+0xe>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e48 <LoopForever+0x16>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e2a:	f002 ffa3 	bl	8003d74 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e2e:	f7ff fbeb 	bl	8000608 <main>

08000e32 <LoopForever>:

LoopForever:
  b LoopForever
 8000e32:	e7fe      	b.n	8000e32 <LoopForever>
  ldr   r0, =_estack
 8000e34:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e40:	08004f54 	.word	0x08004f54
  ldr r2, =_sbss
 8000e44:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e48:	20000324 	.word	0x20000324

08000e4c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC1_IRQHandler>
	...

08000e50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <HAL_Init+0x3c>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <HAL_Init+0x3c>)
 8000e62:	2180      	movs	r1, #128	@ 0x80
 8000e64:	0049      	lsls	r1, r1, #1
 8000e66:	430a      	orrs	r2, r1
 8000e68:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	f000 f810 	bl	8000e90 <HAL_InitTick>
 8000e70:	1e03      	subs	r3, r0, #0
 8000e72:	d003      	beq.n	8000e7c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e74:	1dfb      	adds	r3, r7, #7
 8000e76:	2201      	movs	r2, #1
 8000e78:	701a      	strb	r2, [r3, #0]
 8000e7a:	e001      	b.n	8000e80 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e7c:	f7ff fdcc 	bl	8000a18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	781b      	ldrb	r3, [r3, #0]
}
 8000e84:	0018      	movs	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	b002      	add	sp, #8
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40022000 	.word	0x40022000

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e98:	230f      	movs	r3, #15
 8000e9a:	18fb      	adds	r3, r7, r3
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <HAL_InitTick+0x88>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d02b      	beq.n	8000f00 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <HAL_InitTick+0x8c>)
 8000eaa:	681c      	ldr	r4, [r3, #0]
 8000eac:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <HAL_InitTick+0x88>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	0019      	movs	r1, r3
 8000eb2:	23fa      	movs	r3, #250	@ 0xfa
 8000eb4:	0098      	lsls	r0, r3, #2
 8000eb6:	f7ff f92d 	bl	8000114 <__udivsi3>
 8000eba:	0003      	movs	r3, r0
 8000ebc:	0019      	movs	r1, r3
 8000ebe:	0020      	movs	r0, r4
 8000ec0:	f7ff f928 	bl	8000114 <__udivsi3>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f000 f929 	bl	800111e <HAL_SYSTICK_Config>
 8000ecc:	1e03      	subs	r3, r0, #0
 8000ece:	d112      	bne.n	8000ef6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d80a      	bhi.n	8000eec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	425b      	negs	r3, r3
 8000edc:	2200      	movs	r2, #0
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f000 f908 	bl	80010f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <HAL_InitTick+0x90>)
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	e00d      	b.n	8000f08 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000eec:	230f      	movs	r3, #15
 8000eee:	18fb      	adds	r3, r7, r3
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]
 8000ef4:	e008      	b.n	8000f08 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ef6:	230f      	movs	r3, #15
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
 8000efe:	e003      	b.n	8000f08 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f00:	230f      	movs	r3, #15
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	2201      	movs	r2, #1
 8000f06:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f08:	230f      	movs	r3, #15
 8000f0a:	18fb      	adds	r3, r7, r3
 8000f0c:	781b      	ldrb	r3, [r3, #0]
}
 8000f0e:	0018      	movs	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b005      	add	sp, #20
 8000f14:	bd90      	pop	{r4, r7, pc}
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <HAL_IncTick+0x1c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <HAL_IncTick+0x20>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	18d2      	adds	r2, r2, r3
 8000f34:	4b03      	ldr	r3, [pc, #12]	@ (8000f44 <HAL_IncTick+0x20>)
 8000f36:	601a      	str	r2, [r3, #0]
}
 8000f38:	46c0      	nop			@ (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			@ (mov r8, r8)
 8000f40:	20000008 	.word	0x20000008
 8000f44:	200001d4 	.word	0x200001d4

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b02      	ldr	r3, [pc, #8]	@ (8000f58 <HAL_GetTick+0x10>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	0018      	movs	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			@ (mov r8, r8)
 8000f58:	200001d4 	.word	0x200001d4

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff fff0 	bl	8000f48 <HAL_GetTick>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	3301      	adds	r3, #1
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	001a      	movs	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	189b      	adds	r3, r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f82:	46c0      	nop			@ (mov r8, r8)
 8000f84:	f7ff ffe0 	bl	8000f48 <HAL_GetTick>
 8000f88:	0002      	movs	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	46c0      	nop			@ (mov r8, r8)
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b004      	add	sp, #16
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			@ (mov r8, r8)
 8000fa0:	20000008 	.word	0x20000008

08000fa4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a06      	ldr	r2, [pc, #24]	@ (8000fcc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	0019      	movs	r1, r3
 8000fb6:	4b04      	ldr	r3, [pc, #16]	@ (8000fc8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]
}
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b002      	add	sp, #8
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	40010000 	.word	0x40010000
 8000fcc:	fffff9ff 	.word	0xfffff9ff

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fe4:	d828      	bhi.n	8001038 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe6:	4a2f      	ldr	r2, [pc, #188]	@ (80010a4 <__NVIC_SetPriority+0xd4>)
 8000fe8:	1dfb      	adds	r3, r7, #7
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	33c0      	adds	r3, #192	@ 0xc0
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	589b      	ldr	r3, [r3, r2]
 8000ff6:	1dfa      	adds	r2, r7, #7
 8000ff8:	7812      	ldrb	r2, [r2, #0]
 8000ffa:	0011      	movs	r1, r2
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	400a      	ands	r2, r1
 8001000:	00d2      	lsls	r2, r2, #3
 8001002:	21ff      	movs	r1, #255	@ 0xff
 8001004:	4091      	lsls	r1, r2
 8001006:	000a      	movs	r2, r1
 8001008:	43d2      	mvns	r2, r2
 800100a:	401a      	ands	r2, r3
 800100c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	019b      	lsls	r3, r3, #6
 8001012:	22ff      	movs	r2, #255	@ 0xff
 8001014:	401a      	ands	r2, r3
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	0018      	movs	r0, r3
 800101c:	2303      	movs	r3, #3
 800101e:	4003      	ands	r3, r0
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001024:	481f      	ldr	r0, [pc, #124]	@ (80010a4 <__NVIC_SetPriority+0xd4>)
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b25b      	sxtb	r3, r3
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	430a      	orrs	r2, r1
 8001030:	33c0      	adds	r3, #192	@ 0xc0
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001036:	e031      	b.n	800109c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001038:	4a1b      	ldr	r2, [pc, #108]	@ (80010a8 <__NVIC_SetPriority+0xd8>)
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	0019      	movs	r1, r3
 8001040:	230f      	movs	r3, #15
 8001042:	400b      	ands	r3, r1
 8001044:	3b08      	subs	r3, #8
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	3306      	adds	r3, #6
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	18d3      	adds	r3, r2, r3
 800104e:	3304      	adds	r3, #4
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	1dfa      	adds	r2, r7, #7
 8001054:	7812      	ldrb	r2, [r2, #0]
 8001056:	0011      	movs	r1, r2
 8001058:	2203      	movs	r2, #3
 800105a:	400a      	ands	r2, r1
 800105c:	00d2      	lsls	r2, r2, #3
 800105e:	21ff      	movs	r1, #255	@ 0xff
 8001060:	4091      	lsls	r1, r2
 8001062:	000a      	movs	r2, r1
 8001064:	43d2      	mvns	r2, r2
 8001066:	401a      	ands	r2, r3
 8001068:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	019b      	lsls	r3, r3, #6
 800106e:	22ff      	movs	r2, #255	@ 0xff
 8001070:	401a      	ands	r2, r3
 8001072:	1dfb      	adds	r3, r7, #7
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	0018      	movs	r0, r3
 8001078:	2303      	movs	r3, #3
 800107a:	4003      	ands	r3, r0
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001080:	4809      	ldr	r0, [pc, #36]	@ (80010a8 <__NVIC_SetPriority+0xd8>)
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	001c      	movs	r4, r3
 8001088:	230f      	movs	r3, #15
 800108a:	4023      	ands	r3, r4
 800108c:	3b08      	subs	r3, #8
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	430a      	orrs	r2, r1
 8001092:	3306      	adds	r3, #6
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	18c3      	adds	r3, r0, r3
 8001098:	3304      	adds	r3, #4
 800109a:	601a      	str	r2, [r3, #0]
}
 800109c:	46c0      	nop			@ (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	b003      	add	sp, #12
 80010a2:	bd90      	pop	{r4, r7, pc}
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	1e5a      	subs	r2, r3, #1
 80010b8:	2380      	movs	r3, #128	@ 0x80
 80010ba:	045b      	lsls	r3, r3, #17
 80010bc:	429a      	cmp	r2, r3
 80010be:	d301      	bcc.n	80010c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c0:	2301      	movs	r3, #1
 80010c2:	e010      	b.n	80010e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c4:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <SysTick_Config+0x44>)
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	3a01      	subs	r2, #1
 80010ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010cc:	2301      	movs	r3, #1
 80010ce:	425b      	negs	r3, r3
 80010d0:	2103      	movs	r1, #3
 80010d2:	0018      	movs	r0, r3
 80010d4:	f7ff ff7c 	bl	8000fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d8:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <SysTick_Config+0x44>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010de:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <SysTick_Config+0x44>)
 80010e0:	2207      	movs	r2, #7
 80010e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	0018      	movs	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b002      	add	sp, #8
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	46c0      	nop			@ (mov r8, r8)
 80010f0:	e000e010 	.word	0xe000e010

080010f4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	210f      	movs	r1, #15
 8001100:	187b      	adds	r3, r7, r1
 8001102:	1c02      	adds	r2, r0, #0
 8001104:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	187b      	adds	r3, r7, r1
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b25b      	sxtb	r3, r3
 800110e:	0011      	movs	r1, r2
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff ff5d 	bl	8000fd0 <__NVIC_SetPriority>
}
 8001116:	46c0      	nop			@ (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	b004      	add	sp, #16
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff ffbf 	bl	80010ac <SysTick_Config>
 800112e:	0003      	movs	r3, r0
}
 8001130:	0018      	movs	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	b002      	add	sp, #8
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001146:	e14d      	b.n	80013e4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2101      	movs	r1, #1
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4091      	lsls	r1, r2
 8001152:	000a      	movs	r2, r1
 8001154:	4013      	ands	r3, r2
 8001156:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d100      	bne.n	8001160 <HAL_GPIO_Init+0x28>
 800115e:	e13e      	b.n	80013de <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2203      	movs	r2, #3
 8001166:	4013      	ands	r3, r2
 8001168:	2b01      	cmp	r3, #1
 800116a:	d005      	beq.n	8001178 <HAL_GPIO_Init+0x40>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2203      	movs	r2, #3
 8001172:	4013      	ands	r3, r2
 8001174:	2b02      	cmp	r3, #2
 8001176:	d130      	bne.n	80011da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	409a      	lsls	r2, r3
 8001186:	0013      	movs	r3, r2
 8001188:	43da      	mvns	r2, r3
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	409a      	lsls	r2, r3
 800119a:	0013      	movs	r3, r2
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ae:	2201      	movs	r2, #1
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
 80011b4:	0013      	movs	r3, r2
 80011b6:	43da      	mvns	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	091b      	lsrs	r3, r3, #4
 80011c4:	2201      	movs	r2, #1
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2203      	movs	r2, #3
 80011e0:	4013      	ands	r3, r2
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	d017      	beq.n	8001216 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	409a      	lsls	r2, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	43da      	mvns	r2, r3
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	409a      	lsls	r2, r3
 8001208:	0013      	movs	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2203      	movs	r2, #3
 800121c:	4013      	ands	r3, r2
 800121e:	2b02      	cmp	r3, #2
 8001220:	d123      	bne.n	800126a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	08da      	lsrs	r2, r3, #3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3208      	adds	r2, #8
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	58d3      	ldr	r3, [r2, r3]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	2207      	movs	r2, #7
 8001234:	4013      	ands	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	220f      	movs	r2, #15
 800123a:	409a      	lsls	r2, r3
 800123c:	0013      	movs	r3, r2
 800123e:	43da      	mvns	r2, r3
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	691a      	ldr	r2, [r3, #16]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	2107      	movs	r1, #7
 800124e:	400b      	ands	r3, r1
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	409a      	lsls	r2, r3
 8001254:	0013      	movs	r3, r2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	08da      	lsrs	r2, r3, #3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3208      	adds	r2, #8
 8001264:	0092      	lsls	r2, r2, #2
 8001266:	6939      	ldr	r1, [r7, #16]
 8001268:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	409a      	lsls	r2, r3
 8001278:	0013      	movs	r3, r2
 800127a:	43da      	mvns	r2, r3
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2203      	movs	r2, #3
 8001288:	401a      	ands	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	409a      	lsls	r2, r3
 8001290:	0013      	movs	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	23c0      	movs	r3, #192	@ 0xc0
 80012a4:	029b      	lsls	r3, r3, #10
 80012a6:	4013      	ands	r3, r2
 80012a8:	d100      	bne.n	80012ac <HAL_GPIO_Init+0x174>
 80012aa:	e098      	b.n	80013de <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80012ac:	4a53      	ldr	r2, [pc, #332]	@ (80013fc <HAL_GPIO_Init+0x2c4>)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3318      	adds	r3, #24
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	589b      	ldr	r3, [r3, r2]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	2203      	movs	r2, #3
 80012be:	4013      	ands	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	220f      	movs	r2, #15
 80012c4:	409a      	lsls	r2, r3
 80012c6:	0013      	movs	r3, r2
 80012c8:	43da      	mvns	r2, r3
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	23a0      	movs	r3, #160	@ 0xa0
 80012d4:	05db      	lsls	r3, r3, #23
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d019      	beq.n	800130e <HAL_GPIO_Init+0x1d6>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a48      	ldr	r2, [pc, #288]	@ (8001400 <HAL_GPIO_Init+0x2c8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d013      	beq.n	800130a <HAL_GPIO_Init+0x1d2>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a47      	ldr	r2, [pc, #284]	@ (8001404 <HAL_GPIO_Init+0x2cc>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d00d      	beq.n	8001306 <HAL_GPIO_Init+0x1ce>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a46      	ldr	r2, [pc, #280]	@ (8001408 <HAL_GPIO_Init+0x2d0>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d007      	beq.n	8001302 <HAL_GPIO_Init+0x1ca>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a45      	ldr	r2, [pc, #276]	@ (800140c <HAL_GPIO_Init+0x2d4>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_GPIO_Init+0x1c6>
 80012fa:	2304      	movs	r3, #4
 80012fc:	e008      	b.n	8001310 <HAL_GPIO_Init+0x1d8>
 80012fe:	2305      	movs	r3, #5
 8001300:	e006      	b.n	8001310 <HAL_GPIO_Init+0x1d8>
 8001302:	2303      	movs	r3, #3
 8001304:	e004      	b.n	8001310 <HAL_GPIO_Init+0x1d8>
 8001306:	2302      	movs	r3, #2
 8001308:	e002      	b.n	8001310 <HAL_GPIO_Init+0x1d8>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <HAL_GPIO_Init+0x1d8>
 800130e:	2300      	movs	r3, #0
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	2103      	movs	r1, #3
 8001314:	400a      	ands	r2, r1
 8001316:	00d2      	lsls	r2, r2, #3
 8001318:	4093      	lsls	r3, r2
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001320:	4936      	ldr	r1, [pc, #216]	@ (80013fc <HAL_GPIO_Init+0x2c4>)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	089b      	lsrs	r3, r3, #2
 8001326:	3318      	adds	r3, #24
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800132e:	4b33      	ldr	r3, [pc, #204]	@ (80013fc <HAL_GPIO_Init+0x2c4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43da      	mvns	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	2380      	movs	r3, #128	@ 0x80
 8001344:	035b      	lsls	r3, r3, #13
 8001346:	4013      	ands	r3, r2
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001352:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <HAL_GPIO_Init+0x2c4>)
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001358:	4b28      	ldr	r3, [pc, #160]	@ (80013fc <HAL_GPIO_Init+0x2c4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43da      	mvns	r2, r3
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	2380      	movs	r3, #128	@ 0x80
 800136e:	039b      	lsls	r3, r3, #14
 8001370:	4013      	ands	r3, r2
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800137c:	4b1f      	ldr	r3, [pc, #124]	@ (80013fc <HAL_GPIO_Init+0x2c4>)
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001382:	4a1e      	ldr	r2, [pc, #120]	@ (80013fc <HAL_GPIO_Init+0x2c4>)
 8001384:	2384      	movs	r3, #132	@ 0x84
 8001386:	58d3      	ldr	r3, [r2, r3]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	43da      	mvns	r2, r3
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	2380      	movs	r3, #128	@ 0x80
 800139a:	029b      	lsls	r3, r3, #10
 800139c:	4013      	ands	r3, r2
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013a8:	4914      	ldr	r1, [pc, #80]	@ (80013fc <HAL_GPIO_Init+0x2c4>)
 80013aa:	2284      	movs	r2, #132	@ 0x84
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80013b0:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <HAL_GPIO_Init+0x2c4>)
 80013b2:	2380      	movs	r3, #128	@ 0x80
 80013b4:	58d3      	ldr	r3, [r2, r3]
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	43da      	mvns	r2, r3
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	2380      	movs	r3, #128	@ 0x80
 80013c8:	025b      	lsls	r3, r3, #9
 80013ca:	4013      	ands	r3, r2
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013d6:	4909      	ldr	r1, [pc, #36]	@ (80013fc <HAL_GPIO_Init+0x2c4>)
 80013d8:	2280      	movs	r2, #128	@ 0x80
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	3301      	adds	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	40da      	lsrs	r2, r3
 80013ec:	1e13      	subs	r3, r2, #0
 80013ee:	d000      	beq.n	80013f2 <HAL_GPIO_Init+0x2ba>
 80013f0:	e6aa      	b.n	8001148 <HAL_GPIO_Init+0x10>
  }
}
 80013f2:	46c0      	nop			@ (mov r8, r8)
 80013f4:	46c0      	nop			@ (mov r8, r8)
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b006      	add	sp, #24
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40021800 	.word	0x40021800
 8001400:	50000400 	.word	0x50000400
 8001404:	50000800 	.word	0x50000800
 8001408:	50000c00 	.word	0x50000c00
 800140c:	50001000 	.word	0x50001000

08001410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	0008      	movs	r0, r1
 800141a:	0011      	movs	r1, r2
 800141c:	1cbb      	adds	r3, r7, #2
 800141e:	1c02      	adds	r2, r0, #0
 8001420:	801a      	strh	r2, [r3, #0]
 8001422:	1c7b      	adds	r3, r7, #1
 8001424:	1c0a      	adds	r2, r1, #0
 8001426:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001428:	1c7b      	adds	r3, r7, #1
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d004      	beq.n	800143a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001430:	1cbb      	adds	r3, r7, #2
 8001432:	881a      	ldrh	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001438:	e003      	b.n	8001442 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800143a:	1cbb      	adds	r3, r7, #2
 800143c:	881a      	ldrh	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	46bd      	mov	sp, r7
 8001446:	b002      	add	sp, #8
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e08f      	b.n	800157e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2241      	movs	r2, #65	@ 0x41
 8001462:	5c9b      	ldrb	r3, [r3, r2]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d107      	bne.n	800147a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2240      	movs	r2, #64	@ 0x40
 800146e:	2100      	movs	r1, #0
 8001470:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff faf7 	bl	8000a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2241      	movs	r2, #65	@ 0x41
 800147e:	2124      	movs	r1, #36	@ 0x24
 8001480:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2101      	movs	r1, #1
 800148e:	438a      	bics	r2, r1
 8001490:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	493b      	ldr	r1, [pc, #236]	@ (8001588 <HAL_I2C_Init+0x13c>)
 800149c:	400a      	ands	r2, r1
 800149e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4938      	ldr	r1, [pc, #224]	@ (800158c <HAL_I2C_Init+0x140>)
 80014ac:	400a      	ands	r2, r1
 80014ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d108      	bne.n	80014ca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2180      	movs	r1, #128	@ 0x80
 80014c2:	0209      	lsls	r1, r1, #8
 80014c4:	430a      	orrs	r2, r1
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	e007      	b.n	80014da <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2184      	movs	r1, #132	@ 0x84
 80014d4:	0209      	lsls	r1, r1, #8
 80014d6:	430a      	orrs	r2, r1
 80014d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d109      	bne.n	80014f6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2180      	movs	r1, #128	@ 0x80
 80014ee:	0109      	lsls	r1, r1, #4
 80014f0:	430a      	orrs	r2, r1
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	e007      	b.n	8001506 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4923      	ldr	r1, [pc, #140]	@ (8001590 <HAL_I2C_Init+0x144>)
 8001502:	400a      	ands	r2, r1
 8001504:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4920      	ldr	r1, [pc, #128]	@ (8001594 <HAL_I2C_Init+0x148>)
 8001512:	430a      	orrs	r2, r1
 8001514:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	491a      	ldr	r1, [pc, #104]	@ (800158c <HAL_I2C_Init+0x140>)
 8001522:	400a      	ands	r2, r1
 8001524:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691a      	ldr	r2, [r3, #16]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	431a      	orrs	r2, r3
 8001530:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69d9      	ldr	r1, [r3, #28]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a1a      	ldr	r2, [r3, #32]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2101      	movs	r1, #1
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2241      	movs	r2, #65	@ 0x41
 800156a:	2120      	movs	r1, #32
 800156c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2242      	movs	r2, #66	@ 0x42
 8001578:	2100      	movs	r1, #0
 800157a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	0018      	movs	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	b002      	add	sp, #8
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			@ (mov r8, r8)
 8001588:	f0ffffff 	.word	0xf0ffffff
 800158c:	ffff7fff 	.word	0xffff7fff
 8001590:	fffff7ff 	.word	0xfffff7ff
 8001594:	02008000 	.word	0x02008000

08001598 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b089      	sub	sp, #36	@ 0x24
 800159c:	af02      	add	r7, sp, #8
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	0008      	movs	r0, r1
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	0019      	movs	r1, r3
 80015a6:	230a      	movs	r3, #10
 80015a8:	18fb      	adds	r3, r7, r3
 80015aa:	1c02      	adds	r2, r0, #0
 80015ac:	801a      	strh	r2, [r3, #0]
 80015ae:	2308      	movs	r3, #8
 80015b0:	18fb      	adds	r3, r7, r3
 80015b2:	1c0a      	adds	r2, r1, #0
 80015b4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2241      	movs	r2, #65	@ 0x41
 80015ba:	5c9b      	ldrb	r3, [r3, r2]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b20      	cmp	r3, #32
 80015c0:	d000      	beq.n	80015c4 <HAL_I2C_Master_Transmit+0x2c>
 80015c2:	e10a      	b.n	80017da <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2240      	movs	r2, #64	@ 0x40
 80015c8:	5c9b      	ldrb	r3, [r3, r2]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d101      	bne.n	80015d2 <HAL_I2C_Master_Transmit+0x3a>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e104      	b.n	80017dc <HAL_I2C_Master_Transmit+0x244>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2240      	movs	r2, #64	@ 0x40
 80015d6:	2101      	movs	r1, #1
 80015d8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015da:	f7ff fcb5 	bl	8000f48 <HAL_GetTick>
 80015de:	0003      	movs	r3, r0
 80015e0:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015e2:	2380      	movs	r3, #128	@ 0x80
 80015e4:	0219      	lsls	r1, r3, #8
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2319      	movs	r3, #25
 80015ee:	2201      	movs	r2, #1
 80015f0:	f000 f91e 	bl	8001830 <I2C_WaitOnFlagUntilTimeout>
 80015f4:	1e03      	subs	r3, r0, #0
 80015f6:	d001      	beq.n	80015fc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0ef      	b.n	80017dc <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2241      	movs	r2, #65	@ 0x41
 8001600:	2121      	movs	r1, #33	@ 0x21
 8001602:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2242      	movs	r2, #66	@ 0x42
 8001608:	2110      	movs	r1, #16
 800160a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2208      	movs	r2, #8
 800161c:	18ba      	adds	r2, r7, r2
 800161e:	8812      	ldrh	r2, [r2, #0]
 8001620:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800162c:	b29b      	uxth	r3, r3
 800162e:	2bff      	cmp	r3, #255	@ 0xff
 8001630:	d906      	bls.n	8001640 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	22ff      	movs	r2, #255	@ 0xff
 8001636:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001638:	2380      	movs	r3, #128	@ 0x80
 800163a:	045b      	lsls	r3, r3, #17
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e007      	b.n	8001650 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001644:	b29a      	uxth	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800164a:	2380      	movs	r3, #128	@ 0x80
 800164c:	049b      	lsls	r3, r3, #18
 800164e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001654:	2b00      	cmp	r3, #0
 8001656:	d027      	beq.n	80016a8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165c:	781a      	ldrb	r2, [r3, #0]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001672:	b29b      	uxth	r3, r3
 8001674:	3b01      	subs	r3, #1
 8001676:	b29a      	uxth	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001680:	3b01      	subs	r3, #1
 8001682:	b29a      	uxth	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800168c:	b2db      	uxtb	r3, r3
 800168e:	3301      	adds	r3, #1
 8001690:	b2da      	uxtb	r2, r3
 8001692:	697c      	ldr	r4, [r7, #20]
 8001694:	230a      	movs	r3, #10
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	8819      	ldrh	r1, [r3, #0]
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	4b51      	ldr	r3, [pc, #324]	@ (80017e4 <HAL_I2C_Master_Transmit+0x24c>)
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	0023      	movs	r3, r4
 80016a2:	f000 fa9f 	bl	8001be4 <I2C_TransferConfig>
 80016a6:	e06f      	b.n	8001788 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	697c      	ldr	r4, [r7, #20]
 80016b0:	230a      	movs	r3, #10
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	8819      	ldrh	r1, [r3, #0]
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	4b4a      	ldr	r3, [pc, #296]	@ (80017e4 <HAL_I2C_Master_Transmit+0x24c>)
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	0023      	movs	r3, r4
 80016be:	f000 fa91 	bl	8001be4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80016c2:	e061      	b.n	8001788 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	0018      	movs	r0, r3
 80016cc:	f000 f908 	bl	80018e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80016d0:	1e03      	subs	r3, r0, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e081      	b.n	80017dc <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016dc:	781a      	ldrb	r2, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3b01      	subs	r3, #1
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001700:	3b01      	subs	r3, #1
 8001702:	b29a      	uxth	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800170c:	b29b      	uxth	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d03a      	beq.n	8001788 <HAL_I2C_Master_Transmit+0x1f0>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001716:	2b00      	cmp	r3, #0
 8001718:	d136      	bne.n	8001788 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800171a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	0013      	movs	r3, r2
 8001724:	2200      	movs	r2, #0
 8001726:	2180      	movs	r1, #128	@ 0x80
 8001728:	f000 f882 	bl	8001830 <I2C_WaitOnFlagUntilTimeout>
 800172c:	1e03      	subs	r3, r0, #0
 800172e:	d001      	beq.n	8001734 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e053      	b.n	80017dc <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001738:	b29b      	uxth	r3, r3
 800173a:	2bff      	cmp	r3, #255	@ 0xff
 800173c:	d911      	bls.n	8001762 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	22ff      	movs	r2, #255	@ 0xff
 8001742:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001748:	b2da      	uxtb	r2, r3
 800174a:	2380      	movs	r3, #128	@ 0x80
 800174c:	045c      	lsls	r4, r3, #17
 800174e:	230a      	movs	r3, #10
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	8819      	ldrh	r1, [r3, #0]
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	2300      	movs	r3, #0
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	0023      	movs	r3, r4
 800175c:	f000 fa42 	bl	8001be4 <I2C_TransferConfig>
 8001760:	e012      	b.n	8001788 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001766:	b29a      	uxth	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001770:	b2da      	uxtb	r2, r3
 8001772:	2380      	movs	r3, #128	@ 0x80
 8001774:	049c      	lsls	r4, r3, #18
 8001776:	230a      	movs	r3, #10
 8001778:	18fb      	adds	r3, r7, r3
 800177a:	8819      	ldrh	r1, [r3, #0]
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	2300      	movs	r3, #0
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	0023      	movs	r3, r4
 8001784:	f000 fa2e 	bl	8001be4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800178c:	b29b      	uxth	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d198      	bne.n	80016c4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	0018      	movs	r0, r3
 800179a:	f000 f8e7 	bl	800196c <I2C_WaitOnSTOPFlagUntilTimeout>
 800179e:	1e03      	subs	r3, r0, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e01a      	b.n	80017dc <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2220      	movs	r2, #32
 80017ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	490b      	ldr	r1, [pc, #44]	@ (80017e8 <HAL_I2C_Master_Transmit+0x250>)
 80017ba:	400a      	ands	r2, r1
 80017bc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2241      	movs	r2, #65	@ 0x41
 80017c2:	2120      	movs	r1, #32
 80017c4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2242      	movs	r2, #66	@ 0x42
 80017ca:	2100      	movs	r1, #0
 80017cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2240      	movs	r2, #64	@ 0x40
 80017d2:	2100      	movs	r1, #0
 80017d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e000      	b.n	80017dc <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80017da:	2302      	movs	r3, #2
  }
}
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	b007      	add	sp, #28
 80017e2:	bd90      	pop	{r4, r7, pc}
 80017e4:	80002000 	.word	0x80002000
 80017e8:	fe00e800 	.word	0xfe00e800

080017ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	2202      	movs	r2, #2
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d103      	bne.n	800180a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2200      	movs	r2, #0
 8001808:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	2201      	movs	r2, #1
 8001812:	4013      	ands	r3, r2
 8001814:	2b01      	cmp	r3, #1
 8001816:	d007      	beq.n	8001828 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	699a      	ldr	r2, [r3, #24]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2101      	movs	r1, #1
 8001824:	430a      	orrs	r2, r1
 8001826:	619a      	str	r2, [r3, #24]
  }
}
 8001828:	46c0      	nop			@ (mov r8, r8)
 800182a:	46bd      	mov	sp, r7
 800182c:	b002      	add	sp, #8
 800182e:	bd80      	pop	{r7, pc}

08001830 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	1dfb      	adds	r3, r7, #7
 800183e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001840:	e03a      	b.n	80018b8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	6839      	ldr	r1, [r7, #0]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	0018      	movs	r0, r3
 800184a:	f000 f8d3 	bl	80019f4 <I2C_IsErrorOccurred>
 800184e:	1e03      	subs	r3, r0, #0
 8001850:	d001      	beq.n	8001856 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e040      	b.n	80018d8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	d02d      	beq.n	80018b8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800185c:	f7ff fb74 	bl	8000f48 <HAL_GetTick>
 8001860:	0002      	movs	r2, r0
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d302      	bcc.n	8001872 <I2C_WaitOnFlagUntilTimeout+0x42>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d122      	bne.n	80018b8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	4013      	ands	r3, r2
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	425a      	negs	r2, r3
 8001882:	4153      	adcs	r3, r2
 8001884:	b2db      	uxtb	r3, r3
 8001886:	001a      	movs	r2, r3
 8001888:	1dfb      	adds	r3, r7, #7
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d113      	bne.n	80018b8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001894:	2220      	movs	r2, #32
 8001896:	431a      	orrs	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2241      	movs	r2, #65	@ 0x41
 80018a0:	2120      	movs	r1, #32
 80018a2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2242      	movs	r2, #66	@ 0x42
 80018a8:	2100      	movs	r1, #0
 80018aa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2240      	movs	r2, #64	@ 0x40
 80018b0:	2100      	movs	r1, #0
 80018b2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e00f      	b.n	80018d8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	4013      	ands	r3, r2
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	425a      	negs	r2, r3
 80018c8:	4153      	adcs	r3, r2
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	001a      	movs	r2, r3
 80018ce:	1dfb      	adds	r3, r7, #7
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d0b5      	beq.n	8001842 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	b004      	add	sp, #16
 80018de:	bd80      	pop	{r7, pc}

080018e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018ec:	e032      	b.n	8001954 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	68b9      	ldr	r1, [r7, #8]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f000 f87d 	bl	80019f4 <I2C_IsErrorOccurred>
 80018fa:	1e03      	subs	r3, r0, #0
 80018fc:	d001      	beq.n	8001902 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e030      	b.n	8001964 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	3301      	adds	r3, #1
 8001906:	d025      	beq.n	8001954 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001908:	f7ff fb1e 	bl	8000f48 <HAL_GetTick>
 800190c:	0002      	movs	r2, r0
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	429a      	cmp	r2, r3
 8001916:	d302      	bcc.n	800191e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d11a      	bne.n	8001954 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	2202      	movs	r2, #2
 8001926:	4013      	ands	r3, r2
 8001928:	2b02      	cmp	r3, #2
 800192a:	d013      	beq.n	8001954 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001930:	2220      	movs	r2, #32
 8001932:	431a      	orrs	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2241      	movs	r2, #65	@ 0x41
 800193c:	2120      	movs	r1, #32
 800193e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2242      	movs	r2, #66	@ 0x42
 8001944:	2100      	movs	r1, #0
 8001946:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2240      	movs	r2, #64	@ 0x40
 800194c:	2100      	movs	r1, #0
 800194e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e007      	b.n	8001964 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2202      	movs	r2, #2
 800195c:	4013      	ands	r3, r2
 800195e:	2b02      	cmp	r3, #2
 8001960:	d1c5      	bne.n	80018ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	0018      	movs	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	b004      	add	sp, #16
 800196a:	bd80      	pop	{r7, pc}

0800196c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001978:	e02f      	b.n	80019da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	0018      	movs	r0, r3
 8001982:	f000 f837 	bl	80019f4 <I2C_IsErrorOccurred>
 8001986:	1e03      	subs	r3, r0, #0
 8001988:	d001      	beq.n	800198e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e02d      	b.n	80019ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800198e:	f7ff fadb 	bl	8000f48 <HAL_GetTick>
 8001992:	0002      	movs	r2, r0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	429a      	cmp	r2, r3
 800199c:	d302      	bcc.n	80019a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11a      	bne.n	80019da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2220      	movs	r2, #32
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b20      	cmp	r3, #32
 80019b0:	d013      	beq.n	80019da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b6:	2220      	movs	r2, #32
 80019b8:	431a      	orrs	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2241      	movs	r2, #65	@ 0x41
 80019c2:	2120      	movs	r1, #32
 80019c4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2242      	movs	r2, #66	@ 0x42
 80019ca:	2100      	movs	r1, #0
 80019cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2240      	movs	r2, #64	@ 0x40
 80019d2:	2100      	movs	r1, #0
 80019d4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e007      	b.n	80019ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	2220      	movs	r2, #32
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b20      	cmp	r3, #32
 80019e6:	d1c8      	bne.n	800197a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	0018      	movs	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b004      	add	sp, #16
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	@ 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a00:	2327      	movs	r3, #39	@ 0x27
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2210      	movs	r2, #16
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d100      	bne.n	8001a22 <I2C_IsErrorOccurred+0x2e>
 8001a20:	e079      	b.n	8001b16 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2210      	movs	r2, #16
 8001a28:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a2a:	e057      	b.n	8001adc <I2C_IsErrorOccurred+0xe8>
 8001a2c:	2227      	movs	r2, #39	@ 0x27
 8001a2e:	18bb      	adds	r3, r7, r2
 8001a30:	18ba      	adds	r2, r7, r2
 8001a32:	7812      	ldrb	r2, [r2, #0]
 8001a34:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	d04f      	beq.n	8001adc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a3c:	f7ff fa84 	bl	8000f48 <HAL_GetTick>
 8001a40:	0002      	movs	r2, r0
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d302      	bcc.n	8001a52 <I2C_IsErrorOccurred+0x5e>
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d144      	bne.n	8001adc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	2380      	movs	r3, #128	@ 0x80
 8001a5a:	01db      	lsls	r3, r3, #7
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a60:	2013      	movs	r0, #19
 8001a62:	183b      	adds	r3, r7, r0
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	2142      	movs	r1, #66	@ 0x42
 8001a68:	5c52      	ldrb	r2, [r2, r1]
 8001a6a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699a      	ldr	r2, [r3, #24]
 8001a72:	2380      	movs	r3, #128	@ 0x80
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	401a      	ands	r2, r3
 8001a78:	2380      	movs	r3, #128	@ 0x80
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d126      	bne.n	8001ace <I2C_IsErrorOccurred+0xda>
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	2380      	movs	r3, #128	@ 0x80
 8001a84:	01db      	lsls	r3, r3, #7
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d021      	beq.n	8001ace <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001a8a:	183b      	adds	r3, r7, r0
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b20      	cmp	r3, #32
 8001a90:	d01d      	beq.n	8001ace <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2180      	movs	r1, #128	@ 0x80
 8001a9e:	01c9      	lsls	r1, r1, #7
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001aa4:	f7ff fa50 	bl	8000f48 <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001aac:	e00f      	b.n	8001ace <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001aae:	f7ff fa4b 	bl	8000f48 <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b19      	cmp	r3, #25
 8001aba:	d908      	bls.n	8001ace <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ac4:	2327      	movs	r3, #39	@ 0x27
 8001ac6:	18fb      	adds	r3, r7, r3
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]

              break;
 8001acc:	e006      	b.n	8001adc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b20      	cmp	r3, #32
 8001ada:	d1e8      	bne.n	8001aae <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b20      	cmp	r3, #32
 8001ae8:	d004      	beq.n	8001af4 <I2C_IsErrorOccurred+0x100>
 8001aea:	2327      	movs	r3, #39	@ 0x27
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d09b      	beq.n	8001a2c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001af4:	2327      	movs	r3, #39	@ 0x27
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d103      	bne.n	8001b06 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2220      	movs	r2, #32
 8001b04:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	2204      	movs	r2, #4
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b0e:	2327      	movs	r3, #39	@ 0x27
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	2380      	movs	r3, #128	@ 0x80
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4013      	ands	r3, r2
 8001b26:	d00c      	beq.n	8001b42 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2280      	movs	r2, #128	@ 0x80
 8001b36:	0052      	lsls	r2, r2, #1
 8001b38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b3a:	2327      	movs	r3, #39	@ 0x27
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	2380      	movs	r3, #128	@ 0x80
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d00c      	beq.n	8001b66 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	2208      	movs	r2, #8
 8001b50:	4313      	orrs	r3, r2
 8001b52:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2280      	movs	r2, #128	@ 0x80
 8001b5a:	00d2      	lsls	r2, r2, #3
 8001b5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b5e:	2327      	movs	r3, #39	@ 0x27
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d00c      	beq.n	8001b8a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	2202      	movs	r2, #2
 8001b74:	4313      	orrs	r3, r2
 8001b76:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2280      	movs	r2, #128	@ 0x80
 8001b7e:	0092      	lsls	r2, r2, #2
 8001b80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b82:	2327      	movs	r3, #39	@ 0x27
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001b8a:	2327      	movs	r3, #39	@ 0x27
 8001b8c:	18fb      	adds	r3, r7, r3
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d01d      	beq.n	8001bd0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	0018      	movs	r0, r3
 8001b98:	f7ff fe28 	bl	80017ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	490e      	ldr	r1, [pc, #56]	@ (8001be0 <I2C_IsErrorOccurred+0x1ec>)
 8001ba8:	400a      	ands	r2, r1
 8001baa:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2241      	movs	r2, #65	@ 0x41
 8001bbc:	2120      	movs	r1, #32
 8001bbe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2242      	movs	r2, #66	@ 0x42
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2240      	movs	r2, #64	@ 0x40
 8001bcc:	2100      	movs	r1, #0
 8001bce:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001bd0:	2327      	movs	r3, #39	@ 0x27
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	781b      	ldrb	r3, [r3, #0]
}
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b00a      	add	sp, #40	@ 0x28
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	46c0      	nop			@ (mov r8, r8)
 8001be0:	fe00e800 	.word	0xfe00e800

08001be4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001be4:	b590      	push	{r4, r7, lr}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	0008      	movs	r0, r1
 8001bee:	0011      	movs	r1, r2
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	240a      	movs	r4, #10
 8001bf4:	193b      	adds	r3, r7, r4
 8001bf6:	1c02      	adds	r2, r0, #0
 8001bf8:	801a      	strh	r2, [r3, #0]
 8001bfa:	2009      	movs	r0, #9
 8001bfc:	183b      	adds	r3, r7, r0
 8001bfe:	1c0a      	adds	r2, r1, #0
 8001c00:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c02:	193b      	adds	r3, r7, r4
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	059b      	lsls	r3, r3, #22
 8001c08:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c0a:	183b      	adds	r3, r7, r0
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	0419      	lsls	r1, r3, #16
 8001c10:	23ff      	movs	r3, #255	@ 0xff
 8001c12:	041b      	lsls	r3, r3, #16
 8001c14:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c16:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	085b      	lsrs	r3, r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c2e:	0d51      	lsrs	r1, r2, #21
 8001c30:	2280      	movs	r2, #128	@ 0x80
 8001c32:	00d2      	lsls	r2, r2, #3
 8001c34:	400a      	ands	r2, r1
 8001c36:	4907      	ldr	r1, [pc, #28]	@ (8001c54 <I2C_TransferConfig+0x70>)
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	43d2      	mvns	r2, r2
 8001c3c:	401a      	ands	r2, r3
 8001c3e:	0011      	movs	r1, r2
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c4a:	46c0      	nop			@ (mov r8, r8)
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b007      	add	sp, #28
 8001c50:	bd90      	pop	{r4, r7, pc}
 8001c52:	46c0      	nop			@ (mov r8, r8)
 8001c54:	03ff63ff 	.word	0x03ff63ff

08001c58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2241      	movs	r2, #65	@ 0x41
 8001c66:	5c9b      	ldrb	r3, [r3, r2]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b20      	cmp	r3, #32
 8001c6c:	d138      	bne.n	8001ce0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2240      	movs	r2, #64	@ 0x40
 8001c72:	5c9b      	ldrb	r3, [r3, r2]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e032      	b.n	8001ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2240      	movs	r2, #64	@ 0x40
 8001c80:	2101      	movs	r1, #1
 8001c82:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2241      	movs	r2, #65	@ 0x41
 8001c88:	2124      	movs	r1, #36	@ 0x24
 8001c8a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2101      	movs	r1, #1
 8001c98:	438a      	bics	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4911      	ldr	r1, [pc, #68]	@ (8001cec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001ca8:	400a      	ands	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6819      	ldr	r1, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2241      	movs	r2, #65	@ 0x41
 8001cd0:	2120      	movs	r1, #32
 8001cd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2240      	movs	r2, #64	@ 0x40
 8001cd8:	2100      	movs	r1, #0
 8001cda:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e000      	b.n	8001ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ce0:	2302      	movs	r3, #2
  }
}
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b002      	add	sp, #8
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	46c0      	nop			@ (mov r8, r8)
 8001cec:	ffffefff 	.word	0xffffefff

08001cf0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2241      	movs	r2, #65	@ 0x41
 8001cfe:	5c9b      	ldrb	r3, [r3, r2]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b20      	cmp	r3, #32
 8001d04:	d139      	bne.n	8001d7a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2240      	movs	r2, #64	@ 0x40
 8001d0a:	5c9b      	ldrb	r3, [r3, r2]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e033      	b.n	8001d7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2240      	movs	r2, #64	@ 0x40
 8001d18:	2101      	movs	r1, #1
 8001d1a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2241      	movs	r2, #65	@ 0x41
 8001d20:	2124      	movs	r1, #36	@ 0x24
 8001d22:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2101      	movs	r1, #1
 8001d30:	438a      	bics	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4a11      	ldr	r2, [pc, #68]	@ (8001d84 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	021b      	lsls	r3, r3, #8
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2101      	movs	r1, #1
 8001d62:	430a      	orrs	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2241      	movs	r2, #65	@ 0x41
 8001d6a:	2120      	movs	r1, #32
 8001d6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2240      	movs	r2, #64	@ 0x40
 8001d72:	2100      	movs	r1, #0
 8001d74:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d7a:	2302      	movs	r3, #2
  }
}
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b004      	add	sp, #16
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	fffff0ff 	.word	0xfffff0ff

08001d88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001d90:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a19      	ldr	r2, [pc, #100]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	0019      	movs	r1, r3
 8001d9a:	4b17      	ldr	r3, [pc, #92]	@ (8001df8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	2380      	movs	r3, #128	@ 0x80
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d11f      	bne.n	8001dec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001dac:	4b14      	ldr	r3, [pc, #80]	@ (8001e00 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	0013      	movs	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	189b      	adds	r3, r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4912      	ldr	r1, [pc, #72]	@ (8001e04 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f7fe f9aa 	bl	8000114 <__udivsi3>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dc6:	e008      	b.n	8001dda <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	e001      	b.n	8001dda <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e009      	b.n	8001dee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dda:	4b07      	ldr	r3, [pc, #28]	@ (8001df8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ddc:	695a      	ldr	r2, [r3, #20]
 8001dde:	2380      	movs	r3, #128	@ 0x80
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	401a      	ands	r2, r3
 8001de4:	2380      	movs	r3, #128	@ 0x80
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d0ed      	beq.n	8001dc8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	0018      	movs	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b004      	add	sp, #16
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	46c0      	nop			@ (mov r8, r8)
 8001df8:	40007000 	.word	0x40007000
 8001dfc:	fffff9ff 	.word	0xfffff9ff
 8001e00:	20000000 	.word	0x20000000
 8001e04:	000f4240 	.word	0x000f4240

08001e08 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001e0c:	4b03      	ldr	r3, [pc, #12]	@ (8001e1c <LL_RCC_GetAPB1Prescaler+0x14>)
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	23e0      	movs	r3, #224	@ 0xe0
 8001e12:	01db      	lsls	r3, r3, #7
 8001e14:	4013      	ands	r3, r2
}
 8001e16:	0018      	movs	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40021000 	.word	0x40021000

08001e20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e2fe      	b.n	8002430 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2201      	movs	r2, #1
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d100      	bne.n	8001e3e <HAL_RCC_OscConfig+0x1e>
 8001e3c:	e07c      	b.n	8001f38 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e3e:	4bc3      	ldr	r3, [pc, #780]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2238      	movs	r2, #56	@ 0x38
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e48:	4bc0      	ldr	r3, [pc, #768]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	4013      	ands	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2b10      	cmp	r3, #16
 8001e56:	d102      	bne.n	8001e5e <HAL_RCC_OscConfig+0x3e>
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d002      	beq.n	8001e64 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d10b      	bne.n	8001e7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e64:	4bb9      	ldr	r3, [pc, #740]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2380      	movs	r3, #128	@ 0x80
 8001e6a:	029b      	lsls	r3, r3, #10
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d062      	beq.n	8001f36 <HAL_RCC_OscConfig+0x116>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d15e      	bne.n	8001f36 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e2d9      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	2380      	movs	r3, #128	@ 0x80
 8001e82:	025b      	lsls	r3, r3, #9
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d107      	bne.n	8001e98 <HAL_RCC_OscConfig+0x78>
 8001e88:	4bb0      	ldr	r3, [pc, #704]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4baf      	ldr	r3, [pc, #700]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001e8e:	2180      	movs	r1, #128	@ 0x80
 8001e90:	0249      	lsls	r1, r1, #9
 8001e92:	430a      	orrs	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	e020      	b.n	8001eda <HAL_RCC_OscConfig+0xba>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	23a0      	movs	r3, #160	@ 0xa0
 8001e9e:	02db      	lsls	r3, r3, #11
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d10e      	bne.n	8001ec2 <HAL_RCC_OscConfig+0xa2>
 8001ea4:	4ba9      	ldr	r3, [pc, #676]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4ba8      	ldr	r3, [pc, #672]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001eaa:	2180      	movs	r1, #128	@ 0x80
 8001eac:	02c9      	lsls	r1, r1, #11
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	4ba6      	ldr	r3, [pc, #664]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	4ba5      	ldr	r3, [pc, #660]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001eb8:	2180      	movs	r1, #128	@ 0x80
 8001eba:	0249      	lsls	r1, r1, #9
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	e00b      	b.n	8001eda <HAL_RCC_OscConfig+0xba>
 8001ec2:	4ba2      	ldr	r3, [pc, #648]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4ba1      	ldr	r3, [pc, #644]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001ec8:	49a1      	ldr	r1, [pc, #644]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001eca:	400a      	ands	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	4b9f      	ldr	r3, [pc, #636]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	4b9e      	ldr	r3, [pc, #632]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001ed4:	499f      	ldr	r1, [pc, #636]	@ (8002154 <HAL_RCC_OscConfig+0x334>)
 8001ed6:	400a      	ands	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d014      	beq.n	8001f0c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee2:	f7ff f831 	bl	8000f48 <HAL_GetTick>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eec:	f7ff f82c 	bl	8000f48 <HAL_GetTick>
 8001ef0:	0002      	movs	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	@ 0x64
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e298      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001efe:	4b93      	ldr	r3, [pc, #588]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	2380      	movs	r3, #128	@ 0x80
 8001f04:	029b      	lsls	r3, r3, #10
 8001f06:	4013      	ands	r3, r2
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0xcc>
 8001f0a:	e015      	b.n	8001f38 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0c:	f7ff f81c 	bl	8000f48 <HAL_GetTick>
 8001f10:	0003      	movs	r3, r0
 8001f12:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f16:	f7ff f817 	bl	8000f48 <HAL_GetTick>
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b64      	cmp	r3, #100	@ 0x64
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e283      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f28:	4b88      	ldr	r3, [pc, #544]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	2380      	movs	r3, #128	@ 0x80
 8001f2e:	029b      	lsls	r3, r3, #10
 8001f30:	4013      	ands	r3, r2
 8001f32:	d1f0      	bne.n	8001f16 <HAL_RCC_OscConfig+0xf6>
 8001f34:	e000      	b.n	8001f38 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f36:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d100      	bne.n	8001f44 <HAL_RCC_OscConfig+0x124>
 8001f42:	e099      	b.n	8002078 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f44:	4b81      	ldr	r3, [pc, #516]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2238      	movs	r2, #56	@ 0x38
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f4e:	4b7f      	ldr	r3, [pc, #508]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2203      	movs	r2, #3
 8001f54:	4013      	ands	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	2b10      	cmp	r3, #16
 8001f5c:	d102      	bne.n	8001f64 <HAL_RCC_OscConfig+0x144>
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d002      	beq.n	8001f6a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d135      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f6a:	4b78      	ldr	r3, [pc, #480]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	2380      	movs	r3, #128	@ 0x80
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4013      	ands	r3, r2
 8001f74:	d005      	beq.n	8001f82 <HAL_RCC_OscConfig+0x162>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e256      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f82:	4b72      	ldr	r3, [pc, #456]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4a74      	ldr	r2, [pc, #464]	@ (8002158 <HAL_RCC_OscConfig+0x338>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	021a      	lsls	r2, r3, #8
 8001f92:	4b6e      	ldr	r3, [pc, #440]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001f94:	430a      	orrs	r2, r1
 8001f96:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d112      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f9e:	4b6b      	ldr	r3, [pc, #428]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a6e      	ldr	r2, [pc, #440]	@ (800215c <HAL_RCC_OscConfig+0x33c>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	4b67      	ldr	r3, [pc, #412]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001fb2:	4b66      	ldr	r3, [pc, #408]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	0adb      	lsrs	r3, r3, #11
 8001fb8:	2207      	movs	r2, #7
 8001fba:	4013      	ands	r3, r2
 8001fbc:	4a68      	ldr	r2, [pc, #416]	@ (8002160 <HAL_RCC_OscConfig+0x340>)
 8001fbe:	40da      	lsrs	r2, r3
 8001fc0:	4b68      	ldr	r3, [pc, #416]	@ (8002164 <HAL_RCC_OscConfig+0x344>)
 8001fc2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fc4:	4b68      	ldr	r3, [pc, #416]	@ (8002168 <HAL_RCC_OscConfig+0x348>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f7fe ff61 	bl	8000e90 <HAL_InitTick>
 8001fce:	1e03      	subs	r3, r0, #0
 8001fd0:	d051      	beq.n	8002076 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e22c      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d030      	beq.n	8002040 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fde:	4b5b      	ldr	r3, [pc, #364]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a5e      	ldr	r2, [pc, #376]	@ (800215c <HAL_RCC_OscConfig+0x33c>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	4b57      	ldr	r3, [pc, #348]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ff2:	4b56      	ldr	r3, [pc, #344]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	4b55      	ldr	r3, [pc, #340]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8001ff8:	2180      	movs	r1, #128	@ 0x80
 8001ffa:	0049      	lsls	r1, r1, #1
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7fe ffa2 	bl	8000f48 <HAL_GetTick>
 8002004:	0003      	movs	r3, r0
 8002006:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800200a:	f7fe ff9d 	bl	8000f48 <HAL_GetTick>
 800200e:	0002      	movs	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e209      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800201c:	4b4b      	ldr	r3, [pc, #300]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	2380      	movs	r3, #128	@ 0x80
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4013      	ands	r3, r2
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002028:	4b48      	ldr	r3, [pc, #288]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4a4a      	ldr	r2, [pc, #296]	@ (8002158 <HAL_RCC_OscConfig+0x338>)
 800202e:	4013      	ands	r3, r2
 8002030:	0019      	movs	r1, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	021a      	lsls	r2, r3, #8
 8002038:	4b44      	ldr	r3, [pc, #272]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 800203a:	430a      	orrs	r2, r1
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	e01b      	b.n	8002078 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002040:	4b42      	ldr	r3, [pc, #264]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b41      	ldr	r3, [pc, #260]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8002046:	4949      	ldr	r1, [pc, #292]	@ (800216c <HAL_RCC_OscConfig+0x34c>)
 8002048:	400a      	ands	r2, r1
 800204a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7fe ff7c 	bl	8000f48 <HAL_GetTick>
 8002050:	0003      	movs	r3, r0
 8002052:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002056:	f7fe ff77 	bl	8000f48 <HAL_GetTick>
 800205a:	0002      	movs	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e1e3      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002068:	4b38      	ldr	r3, [pc, #224]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2380      	movs	r3, #128	@ 0x80
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4013      	ands	r3, r2
 8002072:	d1f0      	bne.n	8002056 <HAL_RCC_OscConfig+0x236>
 8002074:	e000      	b.n	8002078 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002076:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2208      	movs	r2, #8
 800207e:	4013      	ands	r3, r2
 8002080:	d047      	beq.n	8002112 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002082:	4b32      	ldr	r3, [pc, #200]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2238      	movs	r2, #56	@ 0x38
 8002088:	4013      	ands	r3, r2
 800208a:	2b18      	cmp	r3, #24
 800208c:	d10a      	bne.n	80020a4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800208e:	4b2f      	ldr	r3, [pc, #188]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8002090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002092:	2202      	movs	r2, #2
 8002094:	4013      	ands	r3, r2
 8002096:	d03c      	beq.n	8002112 <HAL_RCC_OscConfig+0x2f2>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d138      	bne.n	8002112 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e1c5      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d019      	beq.n	80020e0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80020ac:	4b27      	ldr	r3, [pc, #156]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 80020ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020b0:	4b26      	ldr	r3, [pc, #152]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 80020b2:	2101      	movs	r1, #1
 80020b4:	430a      	orrs	r2, r1
 80020b6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7fe ff46 	bl	8000f48 <HAL_GetTick>
 80020bc:	0003      	movs	r3, r0
 80020be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c2:	f7fe ff41 	bl	8000f48 <HAL_GetTick>
 80020c6:	0002      	movs	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e1ad      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020d4:	4b1d      	ldr	r3, [pc, #116]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 80020d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d8:	2202      	movs	r2, #2
 80020da:	4013      	ands	r3, r2
 80020dc:	d0f1      	beq.n	80020c2 <HAL_RCC_OscConfig+0x2a2>
 80020de:	e018      	b.n	8002112 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80020e0:	4b1a      	ldr	r3, [pc, #104]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 80020e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020e4:	4b19      	ldr	r3, [pc, #100]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 80020e6:	2101      	movs	r1, #1
 80020e8:	438a      	bics	r2, r1
 80020ea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7fe ff2c 	bl	8000f48 <HAL_GetTick>
 80020f0:	0003      	movs	r3, r0
 80020f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f6:	f7fe ff27 	bl	8000f48 <HAL_GetTick>
 80020fa:	0002      	movs	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e193      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002108:	4b10      	ldr	r3, [pc, #64]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 800210a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800210c:	2202      	movs	r2, #2
 800210e:	4013      	ands	r3, r2
 8002110:	d1f1      	bne.n	80020f6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2204      	movs	r2, #4
 8002118:	4013      	ands	r3, r2
 800211a:	d100      	bne.n	800211e <HAL_RCC_OscConfig+0x2fe>
 800211c:	e0c6      	b.n	80022ac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800211e:	231f      	movs	r3, #31
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002126:	4b09      	ldr	r3, [pc, #36]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2238      	movs	r2, #56	@ 0x38
 800212c:	4013      	ands	r3, r2
 800212e:	2b20      	cmp	r3, #32
 8002130:	d11e      	bne.n	8002170 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002132:	4b06      	ldr	r3, [pc, #24]	@ (800214c <HAL_RCC_OscConfig+0x32c>)
 8002134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002136:	2202      	movs	r2, #2
 8002138:	4013      	ands	r3, r2
 800213a:	d100      	bne.n	800213e <HAL_RCC_OscConfig+0x31e>
 800213c:	e0b6      	b.n	80022ac <HAL_RCC_OscConfig+0x48c>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d000      	beq.n	8002148 <HAL_RCC_OscConfig+0x328>
 8002146:	e0b1      	b.n	80022ac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e171      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
 800214c:	40021000 	.word	0x40021000
 8002150:	fffeffff 	.word	0xfffeffff
 8002154:	fffbffff 	.word	0xfffbffff
 8002158:	ffff80ff 	.word	0xffff80ff
 800215c:	ffffc7ff 	.word	0xffffc7ff
 8002160:	00f42400 	.word	0x00f42400
 8002164:	20000000 	.word	0x20000000
 8002168:	20000004 	.word	0x20000004
 800216c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002170:	4bb1      	ldr	r3, [pc, #708]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002172:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002174:	2380      	movs	r3, #128	@ 0x80
 8002176:	055b      	lsls	r3, r3, #21
 8002178:	4013      	ands	r3, r2
 800217a:	d101      	bne.n	8002180 <HAL_RCC_OscConfig+0x360>
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <HAL_RCC_OscConfig+0x362>
 8002180:	2300      	movs	r3, #0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d011      	beq.n	80021aa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	4bac      	ldr	r3, [pc, #688]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002188:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800218a:	4bab      	ldr	r3, [pc, #684]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 800218c:	2180      	movs	r1, #128	@ 0x80
 800218e:	0549      	lsls	r1, r1, #21
 8002190:	430a      	orrs	r2, r1
 8002192:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002194:	4ba8      	ldr	r3, [pc, #672]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002196:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002198:	2380      	movs	r3, #128	@ 0x80
 800219a:	055b      	lsls	r3, r3, #21
 800219c:	4013      	ands	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80021a2:	231f      	movs	r3, #31
 80021a4:	18fb      	adds	r3, r7, r3
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021aa:	4ba4      	ldr	r3, [pc, #656]	@ (800243c <HAL_RCC_OscConfig+0x61c>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	2380      	movs	r3, #128	@ 0x80
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4013      	ands	r3, r2
 80021b4:	d11a      	bne.n	80021ec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021b6:	4ba1      	ldr	r3, [pc, #644]	@ (800243c <HAL_RCC_OscConfig+0x61c>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	4ba0      	ldr	r3, [pc, #640]	@ (800243c <HAL_RCC_OscConfig+0x61c>)
 80021bc:	2180      	movs	r1, #128	@ 0x80
 80021be:	0049      	lsls	r1, r1, #1
 80021c0:	430a      	orrs	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80021c4:	f7fe fec0 	bl	8000f48 <HAL_GetTick>
 80021c8:	0003      	movs	r3, r0
 80021ca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ce:	f7fe febb 	bl	8000f48 <HAL_GetTick>
 80021d2:	0002      	movs	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e127      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e0:	4b96      	ldr	r3, [pc, #600]	@ (800243c <HAL_RCC_OscConfig+0x61c>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	2380      	movs	r3, #128	@ 0x80
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4013      	ands	r3, r2
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d106      	bne.n	8002202 <HAL_RCC_OscConfig+0x3e2>
 80021f4:	4b90      	ldr	r3, [pc, #576]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 80021f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021f8:	4b8f      	ldr	r3, [pc, #572]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 80021fa:	2101      	movs	r1, #1
 80021fc:	430a      	orrs	r2, r1
 80021fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002200:	e01c      	b.n	800223c <HAL_RCC_OscConfig+0x41c>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b05      	cmp	r3, #5
 8002208:	d10c      	bne.n	8002224 <HAL_RCC_OscConfig+0x404>
 800220a:	4b8b      	ldr	r3, [pc, #556]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 800220c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800220e:	4b8a      	ldr	r3, [pc, #552]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002210:	2104      	movs	r1, #4
 8002212:	430a      	orrs	r2, r1
 8002214:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002216:	4b88      	ldr	r3, [pc, #544]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002218:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800221a:	4b87      	ldr	r3, [pc, #540]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 800221c:	2101      	movs	r1, #1
 800221e:	430a      	orrs	r2, r1
 8002220:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002222:	e00b      	b.n	800223c <HAL_RCC_OscConfig+0x41c>
 8002224:	4b84      	ldr	r3, [pc, #528]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002226:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002228:	4b83      	ldr	r3, [pc, #524]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 800222a:	2101      	movs	r1, #1
 800222c:	438a      	bics	r2, r1
 800222e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002230:	4b81      	ldr	r3, [pc, #516]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002232:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002234:	4b80      	ldr	r3, [pc, #512]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002236:	2104      	movs	r1, #4
 8002238:	438a      	bics	r2, r1
 800223a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d014      	beq.n	800226e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe fe80 	bl	8000f48 <HAL_GetTick>
 8002248:	0003      	movs	r3, r0
 800224a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800224c:	e009      	b.n	8002262 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224e:	f7fe fe7b 	bl	8000f48 <HAL_GetTick>
 8002252:	0002      	movs	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	4a79      	ldr	r2, [pc, #484]	@ (8002440 <HAL_RCC_OscConfig+0x620>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e0e6      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002262:	4b75      	ldr	r3, [pc, #468]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002266:	2202      	movs	r2, #2
 8002268:	4013      	ands	r3, r2
 800226a:	d0f0      	beq.n	800224e <HAL_RCC_OscConfig+0x42e>
 800226c:	e013      	b.n	8002296 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226e:	f7fe fe6b 	bl	8000f48 <HAL_GetTick>
 8002272:	0003      	movs	r3, r0
 8002274:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002276:	e009      	b.n	800228c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002278:	f7fe fe66 	bl	8000f48 <HAL_GetTick>
 800227c:	0002      	movs	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	4a6f      	ldr	r2, [pc, #444]	@ (8002440 <HAL_RCC_OscConfig+0x620>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e0d1      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800228c:	4b6a      	ldr	r3, [pc, #424]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 800228e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002290:	2202      	movs	r2, #2
 8002292:	4013      	ands	r3, r2
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002296:	231f      	movs	r3, #31
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d105      	bne.n	80022ac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80022a0:	4b65      	ldr	r3, [pc, #404]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 80022a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022a4:	4b64      	ldr	r3, [pc, #400]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 80022a6:	4967      	ldr	r1, [pc, #412]	@ (8002444 <HAL_RCC_OscConfig+0x624>)
 80022a8:	400a      	ands	r2, r1
 80022aa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d100      	bne.n	80022b6 <HAL_RCC_OscConfig+0x496>
 80022b4:	e0bb      	b.n	800242e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b6:	4b60      	ldr	r3, [pc, #384]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2238      	movs	r2, #56	@ 0x38
 80022bc:	4013      	ands	r3, r2
 80022be:	2b10      	cmp	r3, #16
 80022c0:	d100      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4a4>
 80022c2:	e07b      	b.n	80023bc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d156      	bne.n	800237a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022cc:	4b5a      	ldr	r3, [pc, #360]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b59      	ldr	r3, [pc, #356]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 80022d2:	495d      	ldr	r1, [pc, #372]	@ (8002448 <HAL_RCC_OscConfig+0x628>)
 80022d4:	400a      	ands	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7fe fe36 	bl	8000f48 <HAL_GetTick>
 80022dc:	0003      	movs	r3, r0
 80022de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e2:	f7fe fe31 	bl	8000f48 <HAL_GetTick>
 80022e6:	0002      	movs	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e09d      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f4:	4b50      	ldr	r3, [pc, #320]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	2380      	movs	r3, #128	@ 0x80
 80022fa:	049b      	lsls	r3, r3, #18
 80022fc:	4013      	ands	r3, r2
 80022fe:	d1f0      	bne.n	80022e2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002300:	4b4d      	ldr	r3, [pc, #308]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4a51      	ldr	r2, [pc, #324]	@ (800244c <HAL_RCC_OscConfig+0x62c>)
 8002306:	4013      	ands	r3, r2
 8002308:	0019      	movs	r1, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1a      	ldr	r2, [r3, #32]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800232c:	431a      	orrs	r2, r3
 800232e:	4b42      	ldr	r3, [pc, #264]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002330:	430a      	orrs	r2, r1
 8002332:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002334:	4b40      	ldr	r3, [pc, #256]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b3f      	ldr	r3, [pc, #252]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 800233a:	2180      	movs	r1, #128	@ 0x80
 800233c:	0449      	lsls	r1, r1, #17
 800233e:	430a      	orrs	r2, r1
 8002340:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002342:	4b3d      	ldr	r3, [pc, #244]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	4b3c      	ldr	r3, [pc, #240]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002348:	2180      	movs	r1, #128	@ 0x80
 800234a:	0549      	lsls	r1, r1, #21
 800234c:	430a      	orrs	r2, r1
 800234e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7fe fdfa 	bl	8000f48 <HAL_GetTick>
 8002354:	0003      	movs	r3, r0
 8002356:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235a:	f7fe fdf5 	bl	8000f48 <HAL_GetTick>
 800235e:	0002      	movs	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e061      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236c:	4b32      	ldr	r3, [pc, #200]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	2380      	movs	r3, #128	@ 0x80
 8002372:	049b      	lsls	r3, r3, #18
 8002374:	4013      	ands	r3, r2
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x53a>
 8002378:	e059      	b.n	800242e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237a:	4b2f      	ldr	r3, [pc, #188]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	4b2e      	ldr	r3, [pc, #184]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 8002380:	4931      	ldr	r1, [pc, #196]	@ (8002448 <HAL_RCC_OscConfig+0x628>)
 8002382:	400a      	ands	r2, r1
 8002384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7fe fddf 	bl	8000f48 <HAL_GetTick>
 800238a:	0003      	movs	r3, r0
 800238c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002390:	f7fe fdda 	bl	8000f48 <HAL_GetTick>
 8002394:	0002      	movs	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e046      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a2:	4b25      	ldr	r3, [pc, #148]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	2380      	movs	r3, #128	@ 0x80
 80023a8:	049b      	lsls	r3, r3, #18
 80023aa:	4013      	ands	r3, r2
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80023ae:	4b22      	ldr	r3, [pc, #136]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	4b21      	ldr	r3, [pc, #132]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 80023b4:	4926      	ldr	r1, [pc, #152]	@ (8002450 <HAL_RCC_OscConfig+0x630>)
 80023b6:	400a      	ands	r2, r1
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	e038      	b.n	800242e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e033      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80023c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002438 <HAL_RCC_OscConfig+0x618>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2203      	movs	r2, #3
 80023d2:	401a      	ands	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d126      	bne.n	800242a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	2270      	movs	r2, #112	@ 0x70
 80023e0:	401a      	ands	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d11f      	bne.n	800242a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	23fe      	movs	r3, #254	@ 0xfe
 80023ee:	01db      	lsls	r3, r3, #7
 80023f0:	401a      	ands	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d116      	bne.n	800242a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	23f8      	movs	r3, #248	@ 0xf8
 8002400:	039b      	lsls	r3, r3, #14
 8002402:	401a      	ands	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002408:	429a      	cmp	r2, r3
 800240a:	d10e      	bne.n	800242a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	23e0      	movs	r3, #224	@ 0xe0
 8002410:	051b      	lsls	r3, r3, #20
 8002412:	401a      	ands	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002418:	429a      	cmp	r2, r3
 800241a:	d106      	bne.n	800242a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	0f5b      	lsrs	r3, r3, #29
 8002420:	075a      	lsls	r2, r3, #29
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d001      	beq.n	800242e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b008      	add	sp, #32
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000
 800243c:	40007000 	.word	0x40007000
 8002440:	00001388 	.word	0x00001388
 8002444:	efffffff 	.word	0xefffffff
 8002448:	feffffff 	.word	0xfeffffff
 800244c:	11c1808c 	.word	0x11c1808c
 8002450:	eefefffc 	.word	0xeefefffc

08002454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0e9      	b.n	800263c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002468:	4b76      	ldr	r3, [pc, #472]	@ (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2207      	movs	r2, #7
 800246e:	4013      	ands	r3, r2
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d91e      	bls.n	80024b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	4b73      	ldr	r3, [pc, #460]	@ (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2207      	movs	r2, #7
 800247c:	4393      	bics	r3, r2
 800247e:	0019      	movs	r1, r3
 8002480:	4b70      	ldr	r3, [pc, #448]	@ (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002488:	f7fe fd5e 	bl	8000f48 <HAL_GetTick>
 800248c:	0003      	movs	r3, r0
 800248e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002490:	e009      	b.n	80024a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002492:	f7fe fd59 	bl	8000f48 <HAL_GetTick>
 8002496:	0002      	movs	r2, r0
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	4a6a      	ldr	r2, [pc, #424]	@ (8002648 <HAL_RCC_ClockConfig+0x1f4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e0ca      	b.n	800263c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024a6:	4b67      	ldr	r3, [pc, #412]	@ (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2207      	movs	r2, #7
 80024ac:	4013      	ands	r3, r2
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d1ee      	bne.n	8002492 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2202      	movs	r2, #2
 80024ba:	4013      	ands	r3, r2
 80024bc:	d015      	beq.n	80024ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2204      	movs	r2, #4
 80024c4:	4013      	ands	r3, r2
 80024c6:	d006      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024c8:	4b60      	ldr	r3, [pc, #384]	@ (800264c <HAL_RCC_ClockConfig+0x1f8>)
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	4b5f      	ldr	r3, [pc, #380]	@ (800264c <HAL_RCC_ClockConfig+0x1f8>)
 80024ce:	21e0      	movs	r1, #224	@ 0xe0
 80024d0:	01c9      	lsls	r1, r1, #7
 80024d2:	430a      	orrs	r2, r1
 80024d4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d6:	4b5d      	ldr	r3, [pc, #372]	@ (800264c <HAL_RCC_ClockConfig+0x1f8>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	4a5d      	ldr	r2, [pc, #372]	@ (8002650 <HAL_RCC_ClockConfig+0x1fc>)
 80024dc:	4013      	ands	r3, r2
 80024de:	0019      	movs	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	4b59      	ldr	r3, [pc, #356]	@ (800264c <HAL_RCC_ClockConfig+0x1f8>)
 80024e6:	430a      	orrs	r2, r1
 80024e8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2201      	movs	r2, #1
 80024f0:	4013      	ands	r3, r2
 80024f2:	d057      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d107      	bne.n	800250c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024fc:	4b53      	ldr	r3, [pc, #332]	@ (800264c <HAL_RCC_ClockConfig+0x1f8>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2380      	movs	r3, #128	@ 0x80
 8002502:	029b      	lsls	r3, r3, #10
 8002504:	4013      	ands	r3, r2
 8002506:	d12b      	bne.n	8002560 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e097      	b.n	800263c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d107      	bne.n	8002524 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002514:	4b4d      	ldr	r3, [pc, #308]	@ (800264c <HAL_RCC_ClockConfig+0x1f8>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	2380      	movs	r3, #128	@ 0x80
 800251a:	049b      	lsls	r3, r3, #18
 800251c:	4013      	ands	r3, r2
 800251e:	d11f      	bne.n	8002560 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e08b      	b.n	800263c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d107      	bne.n	800253c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800252c:	4b47      	ldr	r3, [pc, #284]	@ (800264c <HAL_RCC_ClockConfig+0x1f8>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	2380      	movs	r3, #128	@ 0x80
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4013      	ands	r3, r2
 8002536:	d113      	bne.n	8002560 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e07f      	b.n	800263c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d106      	bne.n	8002552 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002544:	4b41      	ldr	r3, [pc, #260]	@ (800264c <HAL_RCC_ClockConfig+0x1f8>)
 8002546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002548:	2202      	movs	r2, #2
 800254a:	4013      	ands	r3, r2
 800254c:	d108      	bne.n	8002560 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e074      	b.n	800263c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002552:	4b3e      	ldr	r3, [pc, #248]	@ (800264c <HAL_RCC_ClockConfig+0x1f8>)
 8002554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002556:	2202      	movs	r2, #2
 8002558:	4013      	ands	r3, r2
 800255a:	d101      	bne.n	8002560 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e06d      	b.n	800263c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002560:	4b3a      	ldr	r3, [pc, #232]	@ (800264c <HAL_RCC_ClockConfig+0x1f8>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	2207      	movs	r2, #7
 8002566:	4393      	bics	r3, r2
 8002568:	0019      	movs	r1, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	4b37      	ldr	r3, [pc, #220]	@ (800264c <HAL_RCC_ClockConfig+0x1f8>)
 8002570:	430a      	orrs	r2, r1
 8002572:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002574:	f7fe fce8 	bl	8000f48 <HAL_GetTick>
 8002578:	0003      	movs	r3, r0
 800257a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257c:	e009      	b.n	8002592 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257e:	f7fe fce3 	bl	8000f48 <HAL_GetTick>
 8002582:	0002      	movs	r2, r0
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	4a2f      	ldr	r2, [pc, #188]	@ (8002648 <HAL_RCC_ClockConfig+0x1f4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e054      	b.n	800263c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	4b2e      	ldr	r3, [pc, #184]	@ (800264c <HAL_RCC_ClockConfig+0x1f8>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2238      	movs	r2, #56	@ 0x38
 8002598:	401a      	ands	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d1ec      	bne.n	800257e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025a4:	4b27      	ldr	r3, [pc, #156]	@ (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2207      	movs	r2, #7
 80025aa:	4013      	ands	r3, r2
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d21e      	bcs.n	80025f0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b24      	ldr	r3, [pc, #144]	@ (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2207      	movs	r2, #7
 80025b8:	4393      	bics	r3, r2
 80025ba:	0019      	movs	r1, r3
 80025bc:	4b21      	ldr	r3, [pc, #132]	@ (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025c4:	f7fe fcc0 	bl	8000f48 <HAL_GetTick>
 80025c8:	0003      	movs	r3, r0
 80025ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025cc:	e009      	b.n	80025e2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ce:	f7fe fcbb 	bl	8000f48 <HAL_GetTick>
 80025d2:	0002      	movs	r2, r0
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002648 <HAL_RCC_ClockConfig+0x1f4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e02c      	b.n	800263c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025e2:	4b18      	ldr	r3, [pc, #96]	@ (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2207      	movs	r2, #7
 80025e8:	4013      	ands	r3, r2
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d1ee      	bne.n	80025ce <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2204      	movs	r2, #4
 80025f6:	4013      	ands	r3, r2
 80025f8:	d009      	beq.n	800260e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80025fa:	4b14      	ldr	r3, [pc, #80]	@ (800264c <HAL_RCC_ClockConfig+0x1f8>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	4a15      	ldr	r2, [pc, #84]	@ (8002654 <HAL_RCC_ClockConfig+0x200>)
 8002600:	4013      	ands	r3, r2
 8002602:	0019      	movs	r1, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	4b10      	ldr	r3, [pc, #64]	@ (800264c <HAL_RCC_ClockConfig+0x1f8>)
 800260a:	430a      	orrs	r2, r1
 800260c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800260e:	f000 f829 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 8002612:	0001      	movs	r1, r0
 8002614:	4b0d      	ldr	r3, [pc, #52]	@ (800264c <HAL_RCC_ClockConfig+0x1f8>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	220f      	movs	r2, #15
 800261c:	401a      	ands	r2, r3
 800261e:	4b0e      	ldr	r3, [pc, #56]	@ (8002658 <HAL_RCC_ClockConfig+0x204>)
 8002620:	0092      	lsls	r2, r2, #2
 8002622:	58d3      	ldr	r3, [r2, r3]
 8002624:	221f      	movs	r2, #31
 8002626:	4013      	ands	r3, r2
 8002628:	000a      	movs	r2, r1
 800262a:	40da      	lsrs	r2, r3
 800262c:	4b0b      	ldr	r3, [pc, #44]	@ (800265c <HAL_RCC_ClockConfig+0x208>)
 800262e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002630:	4b0b      	ldr	r3, [pc, #44]	@ (8002660 <HAL_RCC_ClockConfig+0x20c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	0018      	movs	r0, r3
 8002636:	f7fe fc2b 	bl	8000e90 <HAL_InitTick>
 800263a:	0003      	movs	r3, r0
}
 800263c:	0018      	movs	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	b004      	add	sp, #16
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40022000 	.word	0x40022000
 8002648:	00001388 	.word	0x00001388
 800264c:	40021000 	.word	0x40021000
 8002650:	fffff0ff 	.word	0xfffff0ff
 8002654:	ffff8fff 	.word	0xffff8fff
 8002658:	08004e90 	.word	0x08004e90
 800265c:	20000000 	.word	0x20000000
 8002660:	20000004 	.word	0x20000004

08002664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800266a:	4b3c      	ldr	r3, [pc, #240]	@ (800275c <HAL_RCC_GetSysClockFreq+0xf8>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2238      	movs	r2, #56	@ 0x38
 8002670:	4013      	ands	r3, r2
 8002672:	d10f      	bne.n	8002694 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002674:	4b39      	ldr	r3, [pc, #228]	@ (800275c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0adb      	lsrs	r3, r3, #11
 800267a:	2207      	movs	r2, #7
 800267c:	4013      	ands	r3, r2
 800267e:	2201      	movs	r2, #1
 8002680:	409a      	lsls	r2, r3
 8002682:	0013      	movs	r3, r2
 8002684:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002686:	6839      	ldr	r1, [r7, #0]
 8002688:	4835      	ldr	r0, [pc, #212]	@ (8002760 <HAL_RCC_GetSysClockFreq+0xfc>)
 800268a:	f7fd fd43 	bl	8000114 <__udivsi3>
 800268e:	0003      	movs	r3, r0
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	e05d      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002694:	4b31      	ldr	r3, [pc, #196]	@ (800275c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2238      	movs	r2, #56	@ 0x38
 800269a:	4013      	ands	r3, r2
 800269c:	2b08      	cmp	r3, #8
 800269e:	d102      	bne.n	80026a6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026a0:	4b30      	ldr	r3, [pc, #192]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x100>)
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	e054      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a6:	4b2d      	ldr	r3, [pc, #180]	@ (800275c <HAL_RCC_GetSysClockFreq+0xf8>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2238      	movs	r2, #56	@ 0x38
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d138      	bne.n	8002724 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80026b2:	4b2a      	ldr	r3, [pc, #168]	@ (800275c <HAL_RCC_GetSysClockFreq+0xf8>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2203      	movs	r2, #3
 80026b8:	4013      	ands	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026bc:	4b27      	ldr	r3, [pc, #156]	@ (800275c <HAL_RCC_GetSysClockFreq+0xf8>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	2207      	movs	r2, #7
 80026c4:	4013      	ands	r3, r2
 80026c6:	3301      	adds	r3, #1
 80026c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d10d      	bne.n	80026ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	4824      	ldr	r0, [pc, #144]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x100>)
 80026d4:	f7fd fd1e 	bl	8000114 <__udivsi3>
 80026d8:	0003      	movs	r3, r0
 80026da:	0019      	movs	r1, r3
 80026dc:	4b1f      	ldr	r3, [pc, #124]	@ (800275c <HAL_RCC_GetSysClockFreq+0xf8>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	227f      	movs	r2, #127	@ 0x7f
 80026e4:	4013      	ands	r3, r2
 80026e6:	434b      	muls	r3, r1
 80026e8:	617b      	str	r3, [r7, #20]
        break;
 80026ea:	e00d      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	481c      	ldr	r0, [pc, #112]	@ (8002760 <HAL_RCC_GetSysClockFreq+0xfc>)
 80026f0:	f7fd fd10 	bl	8000114 <__udivsi3>
 80026f4:	0003      	movs	r3, r0
 80026f6:	0019      	movs	r1, r3
 80026f8:	4b18      	ldr	r3, [pc, #96]	@ (800275c <HAL_RCC_GetSysClockFreq+0xf8>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	0a1b      	lsrs	r3, r3, #8
 80026fe:	227f      	movs	r2, #127	@ 0x7f
 8002700:	4013      	ands	r3, r2
 8002702:	434b      	muls	r3, r1
 8002704:	617b      	str	r3, [r7, #20]
        break;
 8002706:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002708:	4b14      	ldr	r3, [pc, #80]	@ (800275c <HAL_RCC_GetSysClockFreq+0xf8>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	0f5b      	lsrs	r3, r3, #29
 800270e:	2207      	movs	r2, #7
 8002710:	4013      	ands	r3, r2
 8002712:	3301      	adds	r3, #1
 8002714:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	6978      	ldr	r0, [r7, #20]
 800271a:	f7fd fcfb 	bl	8000114 <__udivsi3>
 800271e:	0003      	movs	r3, r0
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	e015      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002724:	4b0d      	ldr	r3, [pc, #52]	@ (800275c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2238      	movs	r2, #56	@ 0x38
 800272a:	4013      	ands	r3, r2
 800272c:	2b20      	cmp	r3, #32
 800272e:	d103      	bne.n	8002738 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002730:	2380      	movs	r3, #128	@ 0x80
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	e00b      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002738:	4b08      	ldr	r3, [pc, #32]	@ (800275c <HAL_RCC_GetSysClockFreq+0xf8>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2238      	movs	r2, #56	@ 0x38
 800273e:	4013      	ands	r3, r2
 8002740:	2b18      	cmp	r3, #24
 8002742:	d103      	bne.n	800274c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002744:	23fa      	movs	r3, #250	@ 0xfa
 8002746:	01db      	lsls	r3, r3, #7
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	e001      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002750:	693b      	ldr	r3, [r7, #16]
}
 8002752:	0018      	movs	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	b006      	add	sp, #24
 8002758:	bd80      	pop	{r7, pc}
 800275a:	46c0      	nop			@ (mov r8, r8)
 800275c:	40021000 	.word	0x40021000
 8002760:	00f42400 	.word	0x00f42400
 8002764:	007a1200 	.word	0x007a1200

08002768 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800276c:	4b02      	ldr	r3, [pc, #8]	@ (8002778 <HAL_RCC_GetHCLKFreq+0x10>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	0018      	movs	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	46c0      	nop			@ (mov r8, r8)
 8002778:	20000000 	.word	0x20000000

0800277c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800277c:	b5b0      	push	{r4, r5, r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002780:	f7ff fff2 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 8002784:	0004      	movs	r4, r0
 8002786:	f7ff fb3f 	bl	8001e08 <LL_RCC_GetAPB1Prescaler>
 800278a:	0003      	movs	r3, r0
 800278c:	0b1a      	lsrs	r2, r3, #12
 800278e:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002790:	0092      	lsls	r2, r2, #2
 8002792:	58d3      	ldr	r3, [r2, r3]
 8002794:	221f      	movs	r2, #31
 8002796:	4013      	ands	r3, r2
 8002798:	40dc      	lsrs	r4, r3
 800279a:	0023      	movs	r3, r4
}
 800279c:	0018      	movs	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	bdb0      	pop	{r4, r5, r7, pc}
 80027a2:	46c0      	nop			@ (mov r8, r8)
 80027a4:	08004ed0 	.word	0x08004ed0

080027a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80027b0:	2313      	movs	r3, #19
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027b8:	2312      	movs	r3, #18
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	2200      	movs	r2, #0
 80027be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	2380      	movs	r3, #128	@ 0x80
 80027c6:	029b      	lsls	r3, r3, #10
 80027c8:	4013      	ands	r3, r2
 80027ca:	d100      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x26>
 80027cc:	e0a3      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ce:	2011      	movs	r0, #17
 80027d0:	183b      	adds	r3, r7, r0
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d6:	4bb0      	ldr	r3, [pc, #704]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027da:	2380      	movs	r3, #128	@ 0x80
 80027dc:	055b      	lsls	r3, r3, #21
 80027de:	4013      	ands	r3, r2
 80027e0:	d110      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e2:	4bad      	ldr	r3, [pc, #692]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027e6:	4bac      	ldr	r3, [pc, #688]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027e8:	2180      	movs	r1, #128	@ 0x80
 80027ea:	0549      	lsls	r1, r1, #21
 80027ec:	430a      	orrs	r2, r1
 80027ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027f0:	4ba9      	ldr	r3, [pc, #676]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027f4:	2380      	movs	r3, #128	@ 0x80
 80027f6:	055b      	lsls	r3, r3, #21
 80027f8:	4013      	ands	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fe:	183b      	adds	r3, r7, r0
 8002800:	2201      	movs	r2, #1
 8002802:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002804:	4ba5      	ldr	r3, [pc, #660]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4ba4      	ldr	r3, [pc, #656]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800280a:	2180      	movs	r1, #128	@ 0x80
 800280c:	0049      	lsls	r1, r1, #1
 800280e:	430a      	orrs	r2, r1
 8002810:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002812:	f7fe fb99 	bl	8000f48 <HAL_GetTick>
 8002816:	0003      	movs	r3, r0
 8002818:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800281a:	e00b      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281c:	f7fe fb94 	bl	8000f48 <HAL_GetTick>
 8002820:	0002      	movs	r2, r0
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d904      	bls.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800282a:	2313      	movs	r3, #19
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	2203      	movs	r2, #3
 8002830:	701a      	strb	r2, [r3, #0]
        break;
 8002832:	e005      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002834:	4b99      	ldr	r3, [pc, #612]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	2380      	movs	r3, #128	@ 0x80
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4013      	ands	r3, r2
 800283e:	d0ed      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002840:	2313      	movs	r3, #19
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d154      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800284a:	4b93      	ldr	r3, [pc, #588]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800284c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800284e:	23c0      	movs	r3, #192	@ 0xc0
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4013      	ands	r3, r2
 8002854:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d019      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	429a      	cmp	r2, r3
 8002864:	d014      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002866:	4b8c      	ldr	r3, [pc, #560]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286a:	4a8d      	ldr	r2, [pc, #564]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800286c:	4013      	ands	r3, r2
 800286e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002870:	4b89      	ldr	r3, [pc, #548]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002872:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002874:	4b88      	ldr	r3, [pc, #544]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002876:	2180      	movs	r1, #128	@ 0x80
 8002878:	0249      	lsls	r1, r1, #9
 800287a:	430a      	orrs	r2, r1
 800287c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800287e:	4b86      	ldr	r3, [pc, #536]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002880:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002882:	4b85      	ldr	r3, [pc, #532]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002884:	4987      	ldr	r1, [pc, #540]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002886:	400a      	ands	r2, r1
 8002888:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800288a:	4b83      	ldr	r3, [pc, #524]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2201      	movs	r2, #1
 8002894:	4013      	ands	r3, r2
 8002896:	d016      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe fb56 	bl	8000f48 <HAL_GetTick>
 800289c:	0003      	movs	r3, r0
 800289e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a0:	e00c      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a2:	f7fe fb51 	bl	8000f48 <HAL_GetTick>
 80028a6:	0002      	movs	r2, r0
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	4a7e      	ldr	r2, [pc, #504]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d904      	bls.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80028b2:	2313      	movs	r3, #19
 80028b4:	18fb      	adds	r3, r7, r3
 80028b6:	2203      	movs	r2, #3
 80028b8:	701a      	strb	r2, [r3, #0]
            break;
 80028ba:	e004      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028bc:	4b76      	ldr	r3, [pc, #472]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c0:	2202      	movs	r2, #2
 80028c2:	4013      	ands	r3, r2
 80028c4:	d0ed      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80028c6:	2313      	movs	r3, #19
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10a      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028d0:	4b71      	ldr	r3, [pc, #452]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d4:	4a72      	ldr	r2, [pc, #456]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	0019      	movs	r1, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028de:	4b6e      	ldr	r3, [pc, #440]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028e0:	430a      	orrs	r2, r1
 80028e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028e4:	e00c      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028e6:	2312      	movs	r3, #18
 80028e8:	18fb      	adds	r3, r7, r3
 80028ea:	2213      	movs	r2, #19
 80028ec:	18ba      	adds	r2, r7, r2
 80028ee:	7812      	ldrb	r2, [r2, #0]
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	e005      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f4:	2312      	movs	r3, #18
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	2213      	movs	r2, #19
 80028fa:	18ba      	adds	r2, r7, r2
 80028fc:	7812      	ldrb	r2, [r2, #0]
 80028fe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002900:	2311      	movs	r3, #17
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d105      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800290a:	4b63      	ldr	r3, [pc, #396]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800290c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800290e:	4b62      	ldr	r3, [pc, #392]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002910:	4966      	ldr	r1, [pc, #408]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002912:	400a      	ands	r2, r1
 8002914:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2201      	movs	r2, #1
 800291c:	4013      	ands	r3, r2
 800291e:	d009      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002920:	4b5d      	ldr	r3, [pc, #372]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002924:	2203      	movs	r2, #3
 8002926:	4393      	bics	r3, r2
 8002928:	0019      	movs	r1, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	4b5a      	ldr	r3, [pc, #360]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002930:	430a      	orrs	r2, r1
 8002932:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2202      	movs	r2, #2
 800293a:	4013      	ands	r3, r2
 800293c:	d009      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800293e:	4b56      	ldr	r3, [pc, #344]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002942:	220c      	movs	r2, #12
 8002944:	4393      	bics	r3, r2
 8002946:	0019      	movs	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	4b52      	ldr	r3, [pc, #328]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800294e:	430a      	orrs	r2, r1
 8002950:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2204      	movs	r2, #4
 8002958:	4013      	ands	r3, r2
 800295a:	d009      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800295c:	4b4e      	ldr	r3, [pc, #312]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800295e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002960:	2230      	movs	r2, #48	@ 0x30
 8002962:	4393      	bics	r3, r2
 8002964:	0019      	movs	r1, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	4b4b      	ldr	r3, [pc, #300]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800296c:	430a      	orrs	r2, r1
 800296e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2220      	movs	r2, #32
 8002976:	4013      	ands	r3, r2
 8002978:	d009      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800297a:	4b47      	ldr	r3, [pc, #284]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800297c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800297e:	4a4c      	ldr	r2, [pc, #304]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002980:	4013      	ands	r3, r2
 8002982:	0019      	movs	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	4b43      	ldr	r3, [pc, #268]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800298a:	430a      	orrs	r2, r1
 800298c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2240      	movs	r2, #64	@ 0x40
 8002994:	4013      	ands	r3, r2
 8002996:	d009      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002998:	4b3f      	ldr	r3, [pc, #252]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800299a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299c:	4a45      	ldr	r2, [pc, #276]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800299e:	4013      	ands	r3, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029a8:	430a      	orrs	r2, r1
 80029aa:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	2380      	movs	r3, #128	@ 0x80
 80029b2:	01db      	lsls	r3, r3, #7
 80029b4:	4013      	ands	r3, r2
 80029b6:	d015      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029b8:	4b37      	ldr	r3, [pc, #220]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	0899      	lsrs	r1, r3, #2
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1a      	ldr	r2, [r3, #32]
 80029c4:	4b34      	ldr	r3, [pc, #208]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029c6:	430a      	orrs	r2, r1
 80029c8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1a      	ldr	r2, [r3, #32]
 80029ce:	2380      	movs	r3, #128	@ 0x80
 80029d0:	05db      	lsls	r3, r3, #23
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d106      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80029d6:	4b30      	ldr	r3, [pc, #192]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	4b2f      	ldr	r3, [pc, #188]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029dc:	2180      	movs	r1, #128	@ 0x80
 80029de:	0249      	lsls	r1, r1, #9
 80029e0:	430a      	orrs	r2, r1
 80029e2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	2380      	movs	r3, #128	@ 0x80
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	4013      	ands	r3, r2
 80029ee:	d014      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80029f0:	4b29      	ldr	r3, [pc, #164]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f4:	2203      	movs	r2, #3
 80029f6:	4393      	bics	r3, r2
 80029f8:	0019      	movs	r1, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	4b26      	ldr	r3, [pc, #152]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a00:	430a      	orrs	r2, r1
 8002a02:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d106      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a0c:	4b22      	ldr	r3, [pc, #136]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	4b21      	ldr	r3, [pc, #132]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a12:	2180      	movs	r1, #128	@ 0x80
 8002a14:	0249      	lsls	r1, r1, #9
 8002a16:	430a      	orrs	r2, r1
 8002a18:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	2380      	movs	r3, #128	@ 0x80
 8002a20:	019b      	lsls	r3, r3, #6
 8002a22:	4013      	ands	r3, r2
 8002a24:	d014      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002a26:	4b1c      	ldr	r3, [pc, #112]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2a:	220c      	movs	r2, #12
 8002a2c:	4393      	bics	r3, r2
 8002a2e:	0019      	movs	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69da      	ldr	r2, [r3, #28]
 8002a34:	4b18      	ldr	r3, [pc, #96]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a36:	430a      	orrs	r2, r1
 8002a38:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d106      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a42:	4b15      	ldr	r3, [pc, #84]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	4b14      	ldr	r3, [pc, #80]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a48:	2180      	movs	r1, #128	@ 0x80
 8002a4a:	0249      	lsls	r1, r1, #9
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	2380      	movs	r3, #128	@ 0x80
 8002a56:	045b      	lsls	r3, r3, #17
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d016      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a60:	4a13      	ldr	r2, [pc, #76]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	0019      	movs	r1, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a74:	2380      	movs	r3, #128	@ 0x80
 8002a76:	019b      	lsls	r3, r3, #6
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002a7c:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	4b05      	ldr	r3, [pc, #20]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a82:	2180      	movs	r1, #128	@ 0x80
 8002a84:	0449      	lsls	r1, r1, #17
 8002a86:	430a      	orrs	r2, r1
 8002a88:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002a8a:	2312      	movs	r3, #18
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	781b      	ldrb	r3, [r3, #0]
}
 8002a90:	0018      	movs	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b006      	add	sp, #24
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40007000 	.word	0x40007000
 8002aa0:	fffffcff 	.word	0xfffffcff
 8002aa4:	fffeffff 	.word	0xfffeffff
 8002aa8:	00001388 	.word	0x00001388
 8002aac:	efffffff 	.word	0xefffffff
 8002ab0:	ffffcfff 	.word	0xffffcfff
 8002ab4:	ffff3fff 	.word	0xffff3fff

08002ab8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e0a8      	b.n	8002c1c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d109      	bne.n	8002ae6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	2382      	movs	r3, #130	@ 0x82
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d009      	beq.n	8002af2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	61da      	str	r2, [r3, #28]
 8002ae4:	e005      	b.n	8002af2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	225d      	movs	r2, #93	@ 0x5d
 8002afc:	5c9b      	ldrb	r3, [r3, r2]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d107      	bne.n	8002b14 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	225c      	movs	r2, #92	@ 0x5c
 8002b08:	2100      	movs	r1, #0
 8002b0a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f7fe f80c 	bl	8000b2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	225d      	movs	r2, #93	@ 0x5d
 8002b18:	2102      	movs	r1, #2
 8002b1a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2140      	movs	r1, #64	@ 0x40
 8002b28:	438a      	bics	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	23e0      	movs	r3, #224	@ 0xe0
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d902      	bls.n	8002b3e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	e002      	b.n	8002b44 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b3e:	2380      	movs	r3, #128	@ 0x80
 8002b40:	015b      	lsls	r3, r3, #5
 8002b42:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	23f0      	movs	r3, #240	@ 0xf0
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d008      	beq.n	8002b62 <HAL_SPI_Init+0xaa>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	23e0      	movs	r3, #224	@ 0xe0
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d002      	beq.n	8002b62 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	2382      	movs	r3, #130	@ 0x82
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6899      	ldr	r1, [r3, #8]
 8002b70:	2384      	movs	r3, #132	@ 0x84
 8002b72:	021b      	lsls	r3, r3, #8
 8002b74:	400b      	ands	r3, r1
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	2102      	movs	r1, #2
 8002b7e:	400b      	ands	r3, r1
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	2101      	movs	r1, #1
 8002b88:	400b      	ands	r3, r1
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6999      	ldr	r1, [r3, #24]
 8002b90:	2380      	movs	r3, #128	@ 0x80
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	400b      	ands	r3, r1
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	2138      	movs	r1, #56	@ 0x38
 8002b9e:	400b      	ands	r3, r1
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	2180      	movs	r1, #128	@ 0x80
 8002ba8:	400b      	ands	r3, r1
 8002baa:	431a      	orrs	r2, r3
 8002bac:	0011      	movs	r1, r2
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bb2:	2380      	movs	r3, #128	@ 0x80
 8002bb4:	019b      	lsls	r3, r3, #6
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	0c1b      	lsrs	r3, r3, #16
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	401a      	ands	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	2110      	movs	r1, #16
 8002bd0:	400b      	ands	r3, r1
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd8:	2108      	movs	r1, #8
 8002bda:	400b      	ands	r3, r1
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68d9      	ldr	r1, [r3, #12]
 8002be2:	23f0      	movs	r3, #240	@ 0xf0
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	400b      	ands	r3, r1
 8002be8:	431a      	orrs	r2, r3
 8002bea:	0011      	movs	r1, r2
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	2380      	movs	r3, #128	@ 0x80
 8002bf0:	015b      	lsls	r3, r3, #5
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	69da      	ldr	r2, [r3, #28]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4907      	ldr	r1, [pc, #28]	@ (8002c24 <HAL_SPI_Init+0x16c>)
 8002c08:	400a      	ands	r2, r1
 8002c0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	225d      	movs	r2, #93	@ 0x5d
 8002c16:	2101      	movs	r1, #1
 8002c18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b004      	add	sp, #16
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	fffff7ff 	.word	0xfffff7ff

08002c28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e046      	b.n	8002cc8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2288      	movs	r2, #136	@ 0x88
 8002c3e:	589b      	ldr	r3, [r3, r2]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d107      	bne.n	8002c54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2284      	movs	r2, #132	@ 0x84
 8002c48:	2100      	movs	r1, #0
 8002c4a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f7fd ffb8 	bl	8000bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2288      	movs	r2, #136	@ 0x88
 8002c58:	2124      	movs	r1, #36	@ 0x24
 8002c5a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2101      	movs	r1, #1
 8002c68:	438a      	bics	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	0018      	movs	r0, r3
 8002c78:	f000 fab2 	bl	80031e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f000 f8cc 	bl	8002e1c <UART_SetConfig>
 8002c84:	0003      	movs	r3, r0
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e01c      	b.n	8002cc8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	490d      	ldr	r1, [pc, #52]	@ (8002cd0 <HAL_UART_Init+0xa8>)
 8002c9a:	400a      	ands	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	212a      	movs	r1, #42	@ 0x2a
 8002caa:	438a      	bics	r2, r1
 8002cac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2101      	movs	r1, #1
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 fb41 	bl	8003348 <UART_CheckIdleState>
 8002cc6:	0003      	movs	r3, r0
}
 8002cc8:	0018      	movs	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b002      	add	sp, #8
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	ffffb7ff 	.word	0xffffb7ff

08002cd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08a      	sub	sp, #40	@ 0x28
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	1dbb      	adds	r3, r7, #6
 8002ce2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2288      	movs	r2, #136	@ 0x88
 8002ce8:	589b      	ldr	r3, [r3, r2]
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	d000      	beq.n	8002cf0 <HAL_UART_Transmit+0x1c>
 8002cee:	e090      	b.n	8002e12 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_UART_Transmit+0x2a>
 8002cf6:	1dbb      	adds	r3, r7, #6
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e088      	b.n	8002e14 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	2380      	movs	r3, #128	@ 0x80
 8002d08:	015b      	lsls	r3, r3, #5
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d109      	bne.n	8002d22 <HAL_UART_Transmit+0x4e>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d105      	bne.n	8002d22 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d001      	beq.n	8002d22 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e078      	b.n	8002e14 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2290      	movs	r2, #144	@ 0x90
 8002d26:	2100      	movs	r1, #0
 8002d28:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2288      	movs	r2, #136	@ 0x88
 8002d2e:	2121      	movs	r1, #33	@ 0x21
 8002d30:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d32:	f7fe f909 	bl	8000f48 <HAL_GetTick>
 8002d36:	0003      	movs	r3, r0
 8002d38:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1dba      	adds	r2, r7, #6
 8002d3e:	2154      	movs	r1, #84	@ 0x54
 8002d40:	8812      	ldrh	r2, [r2, #0]
 8002d42:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1dba      	adds	r2, r7, #6
 8002d48:	2156      	movs	r1, #86	@ 0x56
 8002d4a:	8812      	ldrh	r2, [r2, #0]
 8002d4c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	2380      	movs	r3, #128	@ 0x80
 8002d54:	015b      	lsls	r3, r3, #5
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d108      	bne.n	8002d6c <HAL_UART_Transmit+0x98>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d104      	bne.n	8002d6c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	61bb      	str	r3, [r7, #24]
 8002d6a:	e003      	b.n	8002d74 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d74:	e030      	b.n	8002dd8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	0013      	movs	r3, r2
 8002d80:	2200      	movs	r2, #0
 8002d82:	2180      	movs	r1, #128	@ 0x80
 8002d84:	f000 fb8a 	bl	800349c <UART_WaitOnFlagUntilTimeout>
 8002d88:	1e03      	subs	r3, r0, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2288      	movs	r2, #136	@ 0x88
 8002d90:	2120      	movs	r1, #32
 8002d92:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e03d      	b.n	8002e14 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10b      	bne.n	8002db6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	001a      	movs	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	05d2      	lsls	r2, r2, #23
 8002daa:	0dd2      	lsrs	r2, r2, #23
 8002dac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	3302      	adds	r3, #2
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	e007      	b.n	8002dc6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	781a      	ldrb	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2256      	movs	r2, #86	@ 0x56
 8002dca:	5a9b      	ldrh	r3, [r3, r2]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b299      	uxth	r1, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2256      	movs	r2, #86	@ 0x56
 8002dd6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2256      	movs	r2, #86	@ 0x56
 8002ddc:	5a9b      	ldrh	r3, [r3, r2]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1c8      	bne.n	8002d76 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	0013      	movs	r3, r2
 8002dee:	2200      	movs	r2, #0
 8002df0:	2140      	movs	r1, #64	@ 0x40
 8002df2:	f000 fb53 	bl	800349c <UART_WaitOnFlagUntilTimeout>
 8002df6:	1e03      	subs	r3, r0, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2288      	movs	r2, #136	@ 0x88
 8002dfe:	2120      	movs	r1, #32
 8002e00:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e006      	b.n	8002e14 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2288      	movs	r2, #136	@ 0x88
 8002e0a:	2120      	movs	r1, #32
 8002e0c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e000      	b.n	8002e14 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002e12:	2302      	movs	r3, #2
  }
}
 8002e14:	0018      	movs	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b008      	add	sp, #32
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e24:	231b      	movs	r3, #27
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4ab4      	ldr	r2, [pc, #720]	@ (800311c <UART_SetConfig+0x300>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	0019      	movs	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69fa      	ldr	r2, [r7, #28]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	4aaf      	ldr	r2, [pc, #700]	@ (8003120 <UART_SetConfig+0x304>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	0019      	movs	r1, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4aa6      	ldr	r2, [pc, #664]	@ (8003124 <UART_SetConfig+0x308>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9e:	220f      	movs	r2, #15
 8002ea0:	4393      	bics	r3, r2
 8002ea2:	0019      	movs	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a9c      	ldr	r2, [pc, #624]	@ (8003128 <UART_SetConfig+0x30c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d127      	bne.n	8002f0a <UART_SetConfig+0xee>
 8002eba:	4b9c      	ldr	r3, [pc, #624]	@ (800312c <UART_SetConfig+0x310>)
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d017      	beq.n	8002ef6 <UART_SetConfig+0xda>
 8002ec6:	d81b      	bhi.n	8002f00 <UART_SetConfig+0xe4>
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d00a      	beq.n	8002ee2 <UART_SetConfig+0xc6>
 8002ecc:	d818      	bhi.n	8002f00 <UART_SetConfig+0xe4>
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <UART_SetConfig+0xbc>
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d00a      	beq.n	8002eec <UART_SetConfig+0xd0>
 8002ed6:	e013      	b.n	8002f00 <UART_SetConfig+0xe4>
 8002ed8:	231a      	movs	r3, #26
 8002eda:	18fb      	adds	r3, r7, r3
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	e08f      	b.n	8003002 <UART_SetConfig+0x1e6>
 8002ee2:	231a      	movs	r3, #26
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	e08a      	b.n	8003002 <UART_SetConfig+0x1e6>
 8002eec:	231a      	movs	r3, #26
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	e085      	b.n	8003002 <UART_SetConfig+0x1e6>
 8002ef6:	231a      	movs	r3, #26
 8002ef8:	18fb      	adds	r3, r7, r3
 8002efa:	2208      	movs	r2, #8
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e080      	b.n	8003002 <UART_SetConfig+0x1e6>
 8002f00:	231a      	movs	r3, #26
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	2210      	movs	r2, #16
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	e07b      	b.n	8003002 <UART_SetConfig+0x1e6>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a88      	ldr	r2, [pc, #544]	@ (8003130 <UART_SetConfig+0x314>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d127      	bne.n	8002f64 <UART_SetConfig+0x148>
 8002f14:	4b85      	ldr	r3, [pc, #532]	@ (800312c <UART_SetConfig+0x310>)
 8002f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f18:	220c      	movs	r2, #12
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b0c      	cmp	r3, #12
 8002f1e:	d017      	beq.n	8002f50 <UART_SetConfig+0x134>
 8002f20:	d81b      	bhi.n	8002f5a <UART_SetConfig+0x13e>
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d00a      	beq.n	8002f3c <UART_SetConfig+0x120>
 8002f26:	d818      	bhi.n	8002f5a <UART_SetConfig+0x13e>
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <UART_SetConfig+0x116>
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d00a      	beq.n	8002f46 <UART_SetConfig+0x12a>
 8002f30:	e013      	b.n	8002f5a <UART_SetConfig+0x13e>
 8002f32:	231a      	movs	r3, #26
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	2200      	movs	r2, #0
 8002f38:	701a      	strb	r2, [r3, #0]
 8002f3a:	e062      	b.n	8003002 <UART_SetConfig+0x1e6>
 8002f3c:	231a      	movs	r3, #26
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	2202      	movs	r2, #2
 8002f42:	701a      	strb	r2, [r3, #0]
 8002f44:	e05d      	b.n	8003002 <UART_SetConfig+0x1e6>
 8002f46:	231a      	movs	r3, #26
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	701a      	strb	r2, [r3, #0]
 8002f4e:	e058      	b.n	8003002 <UART_SetConfig+0x1e6>
 8002f50:	231a      	movs	r3, #26
 8002f52:	18fb      	adds	r3, r7, r3
 8002f54:	2208      	movs	r2, #8
 8002f56:	701a      	strb	r2, [r3, #0]
 8002f58:	e053      	b.n	8003002 <UART_SetConfig+0x1e6>
 8002f5a:	231a      	movs	r3, #26
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	2210      	movs	r2, #16
 8002f60:	701a      	strb	r2, [r3, #0]
 8002f62:	e04e      	b.n	8003002 <UART_SetConfig+0x1e6>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a72      	ldr	r2, [pc, #456]	@ (8003134 <UART_SetConfig+0x318>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d127      	bne.n	8002fbe <UART_SetConfig+0x1a2>
 8002f6e:	4b6f      	ldr	r3, [pc, #444]	@ (800312c <UART_SetConfig+0x310>)
 8002f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f72:	2230      	movs	r2, #48	@ 0x30
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b30      	cmp	r3, #48	@ 0x30
 8002f78:	d017      	beq.n	8002faa <UART_SetConfig+0x18e>
 8002f7a:	d81b      	bhi.n	8002fb4 <UART_SetConfig+0x198>
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d00a      	beq.n	8002f96 <UART_SetConfig+0x17a>
 8002f80:	d818      	bhi.n	8002fb4 <UART_SetConfig+0x198>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <UART_SetConfig+0x170>
 8002f86:	2b10      	cmp	r3, #16
 8002f88:	d00a      	beq.n	8002fa0 <UART_SetConfig+0x184>
 8002f8a:	e013      	b.n	8002fb4 <UART_SetConfig+0x198>
 8002f8c:	231a      	movs	r3, #26
 8002f8e:	18fb      	adds	r3, r7, r3
 8002f90:	2200      	movs	r2, #0
 8002f92:	701a      	strb	r2, [r3, #0]
 8002f94:	e035      	b.n	8003002 <UART_SetConfig+0x1e6>
 8002f96:	231a      	movs	r3, #26
 8002f98:	18fb      	adds	r3, r7, r3
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	701a      	strb	r2, [r3, #0]
 8002f9e:	e030      	b.n	8003002 <UART_SetConfig+0x1e6>
 8002fa0:	231a      	movs	r3, #26
 8002fa2:	18fb      	adds	r3, r7, r3
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	701a      	strb	r2, [r3, #0]
 8002fa8:	e02b      	b.n	8003002 <UART_SetConfig+0x1e6>
 8002faa:	231a      	movs	r3, #26
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	2208      	movs	r2, #8
 8002fb0:	701a      	strb	r2, [r3, #0]
 8002fb2:	e026      	b.n	8003002 <UART_SetConfig+0x1e6>
 8002fb4:	231a      	movs	r3, #26
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	2210      	movs	r2, #16
 8002fba:	701a      	strb	r2, [r3, #0]
 8002fbc:	e021      	b.n	8003002 <UART_SetConfig+0x1e6>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a5d      	ldr	r2, [pc, #372]	@ (8003138 <UART_SetConfig+0x31c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d104      	bne.n	8002fd2 <UART_SetConfig+0x1b6>
 8002fc8:	231a      	movs	r3, #26
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
 8002fd0:	e017      	b.n	8003002 <UART_SetConfig+0x1e6>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a59      	ldr	r2, [pc, #356]	@ (800313c <UART_SetConfig+0x320>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d104      	bne.n	8002fe6 <UART_SetConfig+0x1ca>
 8002fdc:	231a      	movs	r3, #26
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
 8002fe4:	e00d      	b.n	8003002 <UART_SetConfig+0x1e6>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a55      	ldr	r2, [pc, #340]	@ (8003140 <UART_SetConfig+0x324>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d104      	bne.n	8002ffa <UART_SetConfig+0x1de>
 8002ff0:	231a      	movs	r3, #26
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
 8002ff8:	e003      	b.n	8003002 <UART_SetConfig+0x1e6>
 8002ffa:	231a      	movs	r3, #26
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	2210      	movs	r2, #16
 8003000:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	2380      	movs	r3, #128	@ 0x80
 8003008:	021b      	lsls	r3, r3, #8
 800300a:	429a      	cmp	r2, r3
 800300c:	d000      	beq.n	8003010 <UART_SetConfig+0x1f4>
 800300e:	e065      	b.n	80030dc <UART_SetConfig+0x2c0>
  {
    switch (clocksource)
 8003010:	231a      	movs	r3, #26
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b08      	cmp	r3, #8
 8003018:	d015      	beq.n	8003046 <UART_SetConfig+0x22a>
 800301a:	dc18      	bgt.n	800304e <UART_SetConfig+0x232>
 800301c:	2b04      	cmp	r3, #4
 800301e:	d00d      	beq.n	800303c <UART_SetConfig+0x220>
 8003020:	dc15      	bgt.n	800304e <UART_SetConfig+0x232>
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <UART_SetConfig+0x210>
 8003026:	2b02      	cmp	r3, #2
 8003028:	d005      	beq.n	8003036 <UART_SetConfig+0x21a>
 800302a:	e010      	b.n	800304e <UART_SetConfig+0x232>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800302c:	f7ff fba6 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 8003030:	0003      	movs	r3, r0
 8003032:	617b      	str	r3, [r7, #20]
        break;
 8003034:	e012      	b.n	800305c <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003036:	4b43      	ldr	r3, [pc, #268]	@ (8003144 <UART_SetConfig+0x328>)
 8003038:	617b      	str	r3, [r7, #20]
        break;
 800303a:	e00f      	b.n	800305c <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800303c:	f7ff fb12 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 8003040:	0003      	movs	r3, r0
 8003042:	617b      	str	r3, [r7, #20]
        break;
 8003044:	e00a      	b.n	800305c <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003046:	2380      	movs	r3, #128	@ 0x80
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	617b      	str	r3, [r7, #20]
        break;
 800304c:	e006      	b.n	800305c <UART_SetConfig+0x240>
      default:
        pclk = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003052:	231b      	movs	r3, #27
 8003054:	18fb      	adds	r3, r7, r3
 8003056:	2201      	movs	r2, #1
 8003058:	701a      	strb	r2, [r3, #0]
        break;
 800305a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d100      	bne.n	8003064 <UART_SetConfig+0x248>
 8003062:	e0a6      	b.n	80031b2 <UART_SetConfig+0x396>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003068:	4b37      	ldr	r3, [pc, #220]	@ (8003148 <UART_SetConfig+0x32c>)
 800306a:	0052      	lsls	r2, r2, #1
 800306c:	5ad3      	ldrh	r3, [r2, r3]
 800306e:	0019      	movs	r1, r3
 8003070:	6978      	ldr	r0, [r7, #20]
 8003072:	f7fd f84f 	bl	8000114 <__udivsi3>
 8003076:	0003      	movs	r3, r0
 8003078:	005a      	lsls	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	085b      	lsrs	r3, r3, #1
 8003080:	18d2      	adds	r2, r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	0019      	movs	r1, r3
 8003088:	0010      	movs	r0, r2
 800308a:	f7fd f843 	bl	8000114 <__udivsi3>
 800308e:	0003      	movs	r3, r0
 8003090:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	2b0f      	cmp	r3, #15
 8003096:	d91c      	bls.n	80030d2 <UART_SetConfig+0x2b6>
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	2380      	movs	r3, #128	@ 0x80
 800309c:	025b      	lsls	r3, r3, #9
 800309e:	429a      	cmp	r2, r3
 80030a0:	d217      	bcs.n	80030d2 <UART_SetConfig+0x2b6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	200e      	movs	r0, #14
 80030a8:	183b      	adds	r3, r7, r0
 80030aa:	210f      	movs	r1, #15
 80030ac:	438a      	bics	r2, r1
 80030ae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	085b      	lsrs	r3, r3, #1
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2207      	movs	r2, #7
 80030b8:	4013      	ands	r3, r2
 80030ba:	b299      	uxth	r1, r3
 80030bc:	183b      	adds	r3, r7, r0
 80030be:	183a      	adds	r2, r7, r0
 80030c0:	8812      	ldrh	r2, [r2, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	183a      	adds	r2, r7, r0
 80030cc:	8812      	ldrh	r2, [r2, #0]
 80030ce:	60da      	str	r2, [r3, #12]
 80030d0:	e06f      	b.n	80031b2 <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 80030d2:	231b      	movs	r3, #27
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]
 80030da:	e06a      	b.n	80031b2 <UART_SetConfig+0x396>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030dc:	231a      	movs	r3, #26
 80030de:	18fb      	adds	r3, r7, r3
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d015      	beq.n	8003112 <UART_SetConfig+0x2f6>
 80030e6:	dc31      	bgt.n	800314c <UART_SetConfig+0x330>
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d00d      	beq.n	8003108 <UART_SetConfig+0x2ec>
 80030ec:	dc2e      	bgt.n	800314c <UART_SetConfig+0x330>
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <UART_SetConfig+0x2dc>
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d005      	beq.n	8003102 <UART_SetConfig+0x2e6>
 80030f6:	e029      	b.n	800314c <UART_SetConfig+0x330>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030f8:	f7ff fb40 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 80030fc:	0003      	movs	r3, r0
 80030fe:	617b      	str	r3, [r7, #20]
        break;
 8003100:	e02b      	b.n	800315a <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003102:	4b10      	ldr	r3, [pc, #64]	@ (8003144 <UART_SetConfig+0x328>)
 8003104:	617b      	str	r3, [r7, #20]
        break;
 8003106:	e028      	b.n	800315a <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003108:	f7ff faac 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 800310c:	0003      	movs	r3, r0
 800310e:	617b      	str	r3, [r7, #20]
        break;
 8003110:	e023      	b.n	800315a <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003112:	2380      	movs	r3, #128	@ 0x80
 8003114:	021b      	lsls	r3, r3, #8
 8003116:	617b      	str	r3, [r7, #20]
        break;
 8003118:	e01f      	b.n	800315a <UART_SetConfig+0x33e>
 800311a:	46c0      	nop			@ (mov r8, r8)
 800311c:	cfff69f3 	.word	0xcfff69f3
 8003120:	ffffcfff 	.word	0xffffcfff
 8003124:	11fff4ff 	.word	0x11fff4ff
 8003128:	40013800 	.word	0x40013800
 800312c:	40021000 	.word	0x40021000
 8003130:	40004400 	.word	0x40004400
 8003134:	40004800 	.word	0x40004800
 8003138:	40004c00 	.word	0x40004c00
 800313c:	40005000 	.word	0x40005000
 8003140:	40013c00 	.word	0x40013c00
 8003144:	00f42400 	.word	0x00f42400
 8003148:	08004ef0 	.word	0x08004ef0
      default:
        pclk = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003150:	231b      	movs	r3, #27
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
        break;
 8003158:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d028      	beq.n	80031b2 <UART_SetConfig+0x396>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003164:	4b1d      	ldr	r3, [pc, #116]	@ (80031dc <UART_SetConfig+0x3c0>)
 8003166:	0052      	lsls	r2, r2, #1
 8003168:	5ad3      	ldrh	r3, [r2, r3]
 800316a:	0019      	movs	r1, r3
 800316c:	6978      	ldr	r0, [r7, #20]
 800316e:	f7fc ffd1 	bl	8000114 <__udivsi3>
 8003172:	0003      	movs	r3, r0
 8003174:	001a      	movs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	18d2      	adds	r2, r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	0019      	movs	r1, r3
 8003184:	0010      	movs	r0, r2
 8003186:	f7fc ffc5 	bl	8000114 <__udivsi3>
 800318a:	0003      	movs	r3, r0
 800318c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b0f      	cmp	r3, #15
 8003192:	d90a      	bls.n	80031aa <UART_SetConfig+0x38e>
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	2380      	movs	r3, #128	@ 0x80
 8003198:	025b      	lsls	r3, r3, #9
 800319a:	429a      	cmp	r2, r3
 800319c:	d205      	bcs.n	80031aa <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	60da      	str	r2, [r3, #12]
 80031a8:	e003      	b.n	80031b2 <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 80031aa:	231b      	movs	r3, #27
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	2201      	movs	r2, #1
 80031b0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	226a      	movs	r2, #106	@ 0x6a
 80031b6:	2101      	movs	r1, #1
 80031b8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2268      	movs	r2, #104	@ 0x68
 80031be:	2101      	movs	r1, #1
 80031c0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80031ce:	231b      	movs	r3, #27
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	781b      	ldrb	r3, [r3, #0]
}
 80031d4:	0018      	movs	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b008      	add	sp, #32
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	08004ef0 	.word	0x08004ef0

080031e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ec:	2208      	movs	r2, #8
 80031ee:	4013      	ands	r3, r2
 80031f0:	d00b      	beq.n	800320a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4a4a      	ldr	r2, [pc, #296]	@ (8003324 <UART_AdvFeatureConfig+0x144>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	0019      	movs	r1, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320e:	2201      	movs	r2, #1
 8003210:	4013      	ands	r3, r2
 8003212:	d00b      	beq.n	800322c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4a43      	ldr	r2, [pc, #268]	@ (8003328 <UART_AdvFeatureConfig+0x148>)
 800321c:	4013      	ands	r3, r2
 800321e:	0019      	movs	r1, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003230:	2202      	movs	r2, #2
 8003232:	4013      	ands	r3, r2
 8003234:	d00b      	beq.n	800324e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	4a3b      	ldr	r2, [pc, #236]	@ (800332c <UART_AdvFeatureConfig+0x14c>)
 800323e:	4013      	ands	r3, r2
 8003240:	0019      	movs	r1, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003252:	2204      	movs	r2, #4
 8003254:	4013      	ands	r3, r2
 8003256:	d00b      	beq.n	8003270 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	4a34      	ldr	r2, [pc, #208]	@ (8003330 <UART_AdvFeatureConfig+0x150>)
 8003260:	4013      	ands	r3, r2
 8003262:	0019      	movs	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003274:	2210      	movs	r2, #16
 8003276:	4013      	ands	r3, r2
 8003278:	d00b      	beq.n	8003292 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	4a2c      	ldr	r2, [pc, #176]	@ (8003334 <UART_AdvFeatureConfig+0x154>)
 8003282:	4013      	ands	r3, r2
 8003284:	0019      	movs	r1, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003296:	2220      	movs	r2, #32
 8003298:	4013      	ands	r3, r2
 800329a:	d00b      	beq.n	80032b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	4a25      	ldr	r2, [pc, #148]	@ (8003338 <UART_AdvFeatureConfig+0x158>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	0019      	movs	r1, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b8:	2240      	movs	r2, #64	@ 0x40
 80032ba:	4013      	ands	r3, r2
 80032bc:	d01d      	beq.n	80032fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4a1d      	ldr	r2, [pc, #116]	@ (800333c <UART_AdvFeatureConfig+0x15c>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	0019      	movs	r1, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032da:	2380      	movs	r3, #128	@ 0x80
 80032dc:	035b      	lsls	r3, r3, #13
 80032de:	429a      	cmp	r2, r3
 80032e0:	d10b      	bne.n	80032fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	4a15      	ldr	r2, [pc, #84]	@ (8003340 <UART_AdvFeatureConfig+0x160>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	0019      	movs	r1, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032fe:	2280      	movs	r2, #128	@ 0x80
 8003300:	4013      	ands	r3, r2
 8003302:	d00b      	beq.n	800331c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4a0e      	ldr	r2, [pc, #56]	@ (8003344 <UART_AdvFeatureConfig+0x164>)
 800330c:	4013      	ands	r3, r2
 800330e:	0019      	movs	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	605a      	str	r2, [r3, #4]
  }
}
 800331c:	46c0      	nop			@ (mov r8, r8)
 800331e:	46bd      	mov	sp, r7
 8003320:	b002      	add	sp, #8
 8003322:	bd80      	pop	{r7, pc}
 8003324:	ffff7fff 	.word	0xffff7fff
 8003328:	fffdffff 	.word	0xfffdffff
 800332c:	fffeffff 	.word	0xfffeffff
 8003330:	fffbffff 	.word	0xfffbffff
 8003334:	ffffefff 	.word	0xffffefff
 8003338:	ffffdfff 	.word	0xffffdfff
 800333c:	ffefffff 	.word	0xffefffff
 8003340:	ff9fffff 	.word	0xff9fffff
 8003344:	fff7ffff 	.word	0xfff7ffff

08003348 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b092      	sub	sp, #72	@ 0x48
 800334c:	af02      	add	r7, sp, #8
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2290      	movs	r2, #144	@ 0x90
 8003354:	2100      	movs	r1, #0
 8003356:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003358:	f7fd fdf6 	bl	8000f48 <HAL_GetTick>
 800335c:	0003      	movs	r3, r0
 800335e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2208      	movs	r2, #8
 8003368:	4013      	ands	r3, r2
 800336a:	2b08      	cmp	r3, #8
 800336c:	d12d      	bne.n	80033ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800336e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003370:	2280      	movs	r2, #128	@ 0x80
 8003372:	0391      	lsls	r1, r2, #14
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4a47      	ldr	r2, [pc, #284]	@ (8003494 <UART_CheckIdleState+0x14c>)
 8003378:	9200      	str	r2, [sp, #0]
 800337a:	2200      	movs	r2, #0
 800337c:	f000 f88e 	bl	800349c <UART_WaitOnFlagUntilTimeout>
 8003380:	1e03      	subs	r3, r0, #0
 8003382:	d022      	beq.n	80033ca <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003384:	f3ef 8310 	mrs	r3, PRIMASK
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800338a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800338c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800338e:	2301      	movs	r3, #1
 8003390:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003394:	f383 8810 	msr	PRIMASK, r3
}
 8003398:	46c0      	nop			@ (mov r8, r8)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2180      	movs	r1, #128	@ 0x80
 80033a6:	438a      	bics	r2, r1
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b0:	f383 8810 	msr	PRIMASK, r3
}
 80033b4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2288      	movs	r2, #136	@ 0x88
 80033ba:	2120      	movs	r1, #32
 80033bc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2284      	movs	r2, #132	@ 0x84
 80033c2:	2100      	movs	r1, #0
 80033c4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e060      	b.n	800348c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2204      	movs	r2, #4
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d146      	bne.n	8003466 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033da:	2280      	movs	r2, #128	@ 0x80
 80033dc:	03d1      	lsls	r1, r2, #15
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4a2c      	ldr	r2, [pc, #176]	@ (8003494 <UART_CheckIdleState+0x14c>)
 80033e2:	9200      	str	r2, [sp, #0]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f000 f859 	bl	800349c <UART_WaitOnFlagUntilTimeout>
 80033ea:	1e03      	subs	r3, r0, #0
 80033ec:	d03b      	beq.n	8003466 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ee:	f3ef 8310 	mrs	r3, PRIMASK
 80033f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80033f4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80033f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80033f8:	2301      	movs	r3, #1
 80033fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f383 8810 	msr	PRIMASK, r3
}
 8003402:	46c0      	nop			@ (mov r8, r8)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4922      	ldr	r1, [pc, #136]	@ (8003498 <UART_CheckIdleState+0x150>)
 8003410:	400a      	ands	r2, r1
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003416:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f383 8810 	msr	PRIMASK, r3
}
 800341e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003420:	f3ef 8310 	mrs	r3, PRIMASK
 8003424:	61bb      	str	r3, [r7, #24]
  return(result);
 8003426:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003428:	633b      	str	r3, [r7, #48]	@ 0x30
 800342a:	2301      	movs	r3, #1
 800342c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f383 8810 	msr	PRIMASK, r3
}
 8003434:	46c0      	nop			@ (mov r8, r8)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2101      	movs	r1, #1
 8003442:	438a      	bics	r2, r1
 8003444:	609a      	str	r2, [r3, #8]
 8003446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003448:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	f383 8810 	msr	PRIMASK, r3
}
 8003450:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	228c      	movs	r2, #140	@ 0x8c
 8003456:	2120      	movs	r1, #32
 8003458:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2284      	movs	r2, #132	@ 0x84
 800345e:	2100      	movs	r1, #0
 8003460:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e012      	b.n	800348c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2288      	movs	r2, #136	@ 0x88
 800346a:	2120      	movs	r1, #32
 800346c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	228c      	movs	r2, #140	@ 0x8c
 8003472:	2120      	movs	r1, #32
 8003474:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2284      	movs	r2, #132	@ 0x84
 8003486:	2100      	movs	r1, #0
 8003488:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	0018      	movs	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	b010      	add	sp, #64	@ 0x40
 8003492:	bd80      	pop	{r7, pc}
 8003494:	01ffffff 	.word	0x01ffffff
 8003498:	fffffedf 	.word	0xfffffedf

0800349c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	1dfb      	adds	r3, r7, #7
 80034aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ac:	e051      	b.n	8003552 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	3301      	adds	r3, #1
 80034b2:	d04e      	beq.n	8003552 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b4:	f7fd fd48 	bl	8000f48 <HAL_GetTick>
 80034b8:	0002      	movs	r2, r0
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d302      	bcc.n	80034ca <UART_WaitOnFlagUntilTimeout+0x2e>
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e051      	b.n	8003572 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2204      	movs	r2, #4
 80034d6:	4013      	ands	r3, r2
 80034d8:	d03b      	beq.n	8003552 <UART_WaitOnFlagUntilTimeout+0xb6>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b80      	cmp	r3, #128	@ 0x80
 80034de:	d038      	beq.n	8003552 <UART_WaitOnFlagUntilTimeout+0xb6>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b40      	cmp	r3, #64	@ 0x40
 80034e4:	d035      	beq.n	8003552 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	2208      	movs	r2, #8
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d111      	bne.n	8003518 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2208      	movs	r2, #8
 80034fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	0018      	movs	r0, r3
 8003500:	f000 f83c 	bl	800357c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2290      	movs	r2, #144	@ 0x90
 8003508:	2108      	movs	r1, #8
 800350a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2284      	movs	r2, #132	@ 0x84
 8003510:	2100      	movs	r1, #0
 8003512:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e02c      	b.n	8003572 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	69da      	ldr	r2, [r3, #28]
 800351e:	2380      	movs	r3, #128	@ 0x80
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	401a      	ands	r2, r3
 8003524:	2380      	movs	r3, #128	@ 0x80
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	429a      	cmp	r2, r3
 800352a:	d112      	bne.n	8003552 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2280      	movs	r2, #128	@ 0x80
 8003532:	0112      	lsls	r2, r2, #4
 8003534:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	0018      	movs	r0, r3
 800353a:	f000 f81f 	bl	800357c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2290      	movs	r2, #144	@ 0x90
 8003542:	2120      	movs	r1, #32
 8003544:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2284      	movs	r2, #132	@ 0x84
 800354a:	2100      	movs	r1, #0
 800354c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e00f      	b.n	8003572 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	4013      	ands	r3, r2
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	425a      	negs	r2, r3
 8003562:	4153      	adcs	r3, r2
 8003564:	b2db      	uxtb	r3, r3
 8003566:	001a      	movs	r2, r3
 8003568:	1dfb      	adds	r3, r7, #7
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d09e      	beq.n	80034ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	0018      	movs	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	b004      	add	sp, #16
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08e      	sub	sp, #56	@ 0x38
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003584:	f3ef 8310 	mrs	r3, PRIMASK
 8003588:	617b      	str	r3, [r7, #20]
  return(result);
 800358a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800358c:	637b      	str	r3, [r7, #52]	@ 0x34
 800358e:	2301      	movs	r3, #1
 8003590:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	f383 8810 	msr	PRIMASK, r3
}
 8003598:	46c0      	nop			@ (mov r8, r8)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4926      	ldr	r1, [pc, #152]	@ (8003640 <UART_EndRxTransfer+0xc4>)
 80035a6:	400a      	ands	r2, r1
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	f383 8810 	msr	PRIMASK, r3
}
 80035b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b6:	f3ef 8310 	mrs	r3, PRIMASK
 80035ba:	623b      	str	r3, [r7, #32]
  return(result);
 80035bc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80035be:	633b      	str	r3, [r7, #48]	@ 0x30
 80035c0:	2301      	movs	r3, #1
 80035c2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c6:	f383 8810 	msr	PRIMASK, r3
}
 80035ca:	46c0      	nop			@ (mov r8, r8)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	491b      	ldr	r1, [pc, #108]	@ (8003644 <UART_EndRxTransfer+0xc8>)
 80035d8:	400a      	ands	r2, r1
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035de:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e2:	f383 8810 	msr	PRIMASK, r3
}
 80035e6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d118      	bne.n	8003622 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035f0:	f3ef 8310 	mrs	r3, PRIMASK
 80035f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80035f6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035fa:	2301      	movs	r3, #1
 80035fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f383 8810 	msr	PRIMASK, r3
}
 8003604:	46c0      	nop			@ (mov r8, r8)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2110      	movs	r1, #16
 8003612:	438a      	bics	r2, r1
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003618:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f383 8810 	msr	PRIMASK, r3
}
 8003620:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	228c      	movs	r2, #140	@ 0x8c
 8003626:	2120      	movs	r1, #32
 8003628:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003636:	46c0      	nop			@ (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	b00e      	add	sp, #56	@ 0x38
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			@ (mov r8, r8)
 8003640:	fffffedf 	.word	0xfffffedf
 8003644:	effffffe 	.word	0xeffffffe

08003648 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2284      	movs	r2, #132	@ 0x84
 8003654:	5c9b      	ldrb	r3, [r3, r2]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_UARTEx_DisableFifoMode+0x16>
 800365a:	2302      	movs	r3, #2
 800365c:	e027      	b.n	80036ae <HAL_UARTEx_DisableFifoMode+0x66>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2284      	movs	r2, #132	@ 0x84
 8003662:	2101      	movs	r1, #1
 8003664:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2288      	movs	r2, #136	@ 0x88
 800366a:	2124      	movs	r1, #36	@ 0x24
 800366c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2101      	movs	r1, #1
 8003682:	438a      	bics	r2, r1
 8003684:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	4a0b      	ldr	r2, [pc, #44]	@ (80036b8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800368a:	4013      	ands	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2288      	movs	r2, #136	@ 0x88
 80036a0:	2120      	movs	r1, #32
 80036a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2284      	movs	r2, #132	@ 0x84
 80036a8:	2100      	movs	r1, #0
 80036aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	0018      	movs	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b004      	add	sp, #16
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	dfffffff 	.word	0xdfffffff

080036bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2284      	movs	r2, #132	@ 0x84
 80036ca:	5c9b      	ldrb	r3, [r3, r2]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e02e      	b.n	8003732 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2284      	movs	r2, #132	@ 0x84
 80036d8:	2101      	movs	r1, #1
 80036da:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2288      	movs	r2, #136	@ 0x88
 80036e0:	2124      	movs	r1, #36	@ 0x24
 80036e2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2101      	movs	r1, #1
 80036f8:	438a      	bics	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	08d9      	lsrs	r1, r3, #3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	0018      	movs	r0, r3
 8003714:	f000 f854 	bl	80037c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2288      	movs	r2, #136	@ 0x88
 8003724:	2120      	movs	r1, #32
 8003726:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2284      	movs	r2, #132	@ 0x84
 800372c:	2100      	movs	r1, #0
 800372e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	0018      	movs	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	b004      	add	sp, #16
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2284      	movs	r2, #132	@ 0x84
 800374a:	5c9b      	ldrb	r3, [r3, r2]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003750:	2302      	movs	r3, #2
 8003752:	e02f      	b.n	80037b4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2284      	movs	r2, #132	@ 0x84
 8003758:	2101      	movs	r1, #1
 800375a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2288      	movs	r2, #136	@ 0x88
 8003760:	2124      	movs	r1, #36	@ 0x24
 8003762:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2101      	movs	r1, #1
 8003778:	438a      	bics	r2, r1
 800377a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	4a0e      	ldr	r2, [pc, #56]	@ (80037bc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003784:	4013      	ands	r3, r2
 8003786:	0019      	movs	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	0018      	movs	r0, r3
 8003796:	f000 f813 	bl	80037c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2288      	movs	r2, #136	@ 0x88
 80037a6:	2120      	movs	r1, #32
 80037a8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2284      	movs	r2, #132	@ 0x84
 80037ae:	2100      	movs	r1, #0
 80037b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	0018      	movs	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b004      	add	sp, #16
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	f1ffffff 	.word	0xf1ffffff

080037c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80037c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d108      	bne.n	80037e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	226a      	movs	r2, #106	@ 0x6a
 80037d4:	2101      	movs	r1, #1
 80037d6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2268      	movs	r2, #104	@ 0x68
 80037dc:	2101      	movs	r1, #1
 80037de:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80037e0:	e043      	b.n	800386a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80037e2:	260f      	movs	r6, #15
 80037e4:	19bb      	adds	r3, r7, r6
 80037e6:	2208      	movs	r2, #8
 80037e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80037ea:	200e      	movs	r0, #14
 80037ec:	183b      	adds	r3, r7, r0
 80037ee:	2208      	movs	r2, #8
 80037f0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	0e5b      	lsrs	r3, r3, #25
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	240d      	movs	r4, #13
 80037fe:	193b      	adds	r3, r7, r4
 8003800:	2107      	movs	r1, #7
 8003802:	400a      	ands	r2, r1
 8003804:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	0f5b      	lsrs	r3, r3, #29
 800380e:	b2da      	uxtb	r2, r3
 8003810:	250c      	movs	r5, #12
 8003812:	197b      	adds	r3, r7, r5
 8003814:	2107      	movs	r1, #7
 8003816:	400a      	ands	r2, r1
 8003818:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800381a:	183b      	adds	r3, r7, r0
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	197a      	adds	r2, r7, r5
 8003820:	7812      	ldrb	r2, [r2, #0]
 8003822:	4914      	ldr	r1, [pc, #80]	@ (8003874 <UARTEx_SetNbDataToProcess+0xb4>)
 8003824:	5c8a      	ldrb	r2, [r1, r2]
 8003826:	435a      	muls	r2, r3
 8003828:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800382a:	197b      	adds	r3, r7, r5
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	4a12      	ldr	r2, [pc, #72]	@ (8003878 <UARTEx_SetNbDataToProcess+0xb8>)
 8003830:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003832:	0019      	movs	r1, r3
 8003834:	f7fc fcf8 	bl	8000228 <__divsi3>
 8003838:	0003      	movs	r3, r0
 800383a:	b299      	uxth	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	226a      	movs	r2, #106	@ 0x6a
 8003840:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003842:	19bb      	adds	r3, r7, r6
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	193a      	adds	r2, r7, r4
 8003848:	7812      	ldrb	r2, [r2, #0]
 800384a:	490a      	ldr	r1, [pc, #40]	@ (8003874 <UARTEx_SetNbDataToProcess+0xb4>)
 800384c:	5c8a      	ldrb	r2, [r1, r2]
 800384e:	435a      	muls	r2, r3
 8003850:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003852:	193b      	adds	r3, r7, r4
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	4a08      	ldr	r2, [pc, #32]	@ (8003878 <UARTEx_SetNbDataToProcess+0xb8>)
 8003858:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800385a:	0019      	movs	r1, r3
 800385c:	f7fc fce4 	bl	8000228 <__divsi3>
 8003860:	0003      	movs	r3, r0
 8003862:	b299      	uxth	r1, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2268      	movs	r2, #104	@ 0x68
 8003868:	5299      	strh	r1, [r3, r2]
}
 800386a:	46c0      	nop			@ (mov r8, r8)
 800386c:	46bd      	mov	sp, r7
 800386e:	b005      	add	sp, #20
 8003870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	08004f08 	.word	0x08004f08
 8003878:	08004f10 	.word	0x08004f10

0800387c <std>:
 800387c:	2300      	movs	r3, #0
 800387e:	b510      	push	{r4, lr}
 8003880:	0004      	movs	r4, r0
 8003882:	6003      	str	r3, [r0, #0]
 8003884:	6043      	str	r3, [r0, #4]
 8003886:	6083      	str	r3, [r0, #8]
 8003888:	8181      	strh	r1, [r0, #12]
 800388a:	6643      	str	r3, [r0, #100]	@ 0x64
 800388c:	81c2      	strh	r2, [r0, #14]
 800388e:	6103      	str	r3, [r0, #16]
 8003890:	6143      	str	r3, [r0, #20]
 8003892:	6183      	str	r3, [r0, #24]
 8003894:	0019      	movs	r1, r3
 8003896:	2208      	movs	r2, #8
 8003898:	305c      	adds	r0, #92	@ 0x5c
 800389a:	f000 fa0f 	bl	8003cbc <memset>
 800389e:	4b0b      	ldr	r3, [pc, #44]	@ (80038cc <std+0x50>)
 80038a0:	6224      	str	r4, [r4, #32]
 80038a2:	6263      	str	r3, [r4, #36]	@ 0x24
 80038a4:	4b0a      	ldr	r3, [pc, #40]	@ (80038d0 <std+0x54>)
 80038a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80038a8:	4b0a      	ldr	r3, [pc, #40]	@ (80038d4 <std+0x58>)
 80038aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80038ac:	4b0a      	ldr	r3, [pc, #40]	@ (80038d8 <std+0x5c>)
 80038ae:	6323      	str	r3, [r4, #48]	@ 0x30
 80038b0:	4b0a      	ldr	r3, [pc, #40]	@ (80038dc <std+0x60>)
 80038b2:	429c      	cmp	r4, r3
 80038b4:	d005      	beq.n	80038c2 <std+0x46>
 80038b6:	4b0a      	ldr	r3, [pc, #40]	@ (80038e0 <std+0x64>)
 80038b8:	429c      	cmp	r4, r3
 80038ba:	d002      	beq.n	80038c2 <std+0x46>
 80038bc:	4b09      	ldr	r3, [pc, #36]	@ (80038e4 <std+0x68>)
 80038be:	429c      	cmp	r4, r3
 80038c0:	d103      	bne.n	80038ca <std+0x4e>
 80038c2:	0020      	movs	r0, r4
 80038c4:	3058      	adds	r0, #88	@ 0x58
 80038c6:	f000 fa79 	bl	8003dbc <__retarget_lock_init_recursive>
 80038ca:	bd10      	pop	{r4, pc}
 80038cc:	08003ae5 	.word	0x08003ae5
 80038d0:	08003b0d 	.word	0x08003b0d
 80038d4:	08003b45 	.word	0x08003b45
 80038d8:	08003b71 	.word	0x08003b71
 80038dc:	200001d8 	.word	0x200001d8
 80038e0:	20000240 	.word	0x20000240
 80038e4:	200002a8 	.word	0x200002a8

080038e8 <stdio_exit_handler>:
 80038e8:	b510      	push	{r4, lr}
 80038ea:	4a03      	ldr	r2, [pc, #12]	@ (80038f8 <stdio_exit_handler+0x10>)
 80038ec:	4903      	ldr	r1, [pc, #12]	@ (80038fc <stdio_exit_handler+0x14>)
 80038ee:	4804      	ldr	r0, [pc, #16]	@ (8003900 <stdio_exit_handler+0x18>)
 80038f0:	f000 f86c 	bl	80039cc <_fwalk_sglue>
 80038f4:	bd10      	pop	{r4, pc}
 80038f6:	46c0      	nop			@ (mov r8, r8)
 80038f8:	2000000c 	.word	0x2000000c
 80038fc:	08004649 	.word	0x08004649
 8003900:	2000001c 	.word	0x2000001c

08003904 <cleanup_stdio>:
 8003904:	6841      	ldr	r1, [r0, #4]
 8003906:	4b0b      	ldr	r3, [pc, #44]	@ (8003934 <cleanup_stdio+0x30>)
 8003908:	b510      	push	{r4, lr}
 800390a:	0004      	movs	r4, r0
 800390c:	4299      	cmp	r1, r3
 800390e:	d001      	beq.n	8003914 <cleanup_stdio+0x10>
 8003910:	f000 fe9a 	bl	8004648 <_fflush_r>
 8003914:	68a1      	ldr	r1, [r4, #8]
 8003916:	4b08      	ldr	r3, [pc, #32]	@ (8003938 <cleanup_stdio+0x34>)
 8003918:	4299      	cmp	r1, r3
 800391a:	d002      	beq.n	8003922 <cleanup_stdio+0x1e>
 800391c:	0020      	movs	r0, r4
 800391e:	f000 fe93 	bl	8004648 <_fflush_r>
 8003922:	68e1      	ldr	r1, [r4, #12]
 8003924:	4b05      	ldr	r3, [pc, #20]	@ (800393c <cleanup_stdio+0x38>)
 8003926:	4299      	cmp	r1, r3
 8003928:	d002      	beq.n	8003930 <cleanup_stdio+0x2c>
 800392a:	0020      	movs	r0, r4
 800392c:	f000 fe8c 	bl	8004648 <_fflush_r>
 8003930:	bd10      	pop	{r4, pc}
 8003932:	46c0      	nop			@ (mov r8, r8)
 8003934:	200001d8 	.word	0x200001d8
 8003938:	20000240 	.word	0x20000240
 800393c:	200002a8 	.word	0x200002a8

08003940 <global_stdio_init.part.0>:
 8003940:	b510      	push	{r4, lr}
 8003942:	4b09      	ldr	r3, [pc, #36]	@ (8003968 <global_stdio_init.part.0+0x28>)
 8003944:	4a09      	ldr	r2, [pc, #36]	@ (800396c <global_stdio_init.part.0+0x2c>)
 8003946:	2104      	movs	r1, #4
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	4809      	ldr	r0, [pc, #36]	@ (8003970 <global_stdio_init.part.0+0x30>)
 800394c:	2200      	movs	r2, #0
 800394e:	f7ff ff95 	bl	800387c <std>
 8003952:	2201      	movs	r2, #1
 8003954:	2109      	movs	r1, #9
 8003956:	4807      	ldr	r0, [pc, #28]	@ (8003974 <global_stdio_init.part.0+0x34>)
 8003958:	f7ff ff90 	bl	800387c <std>
 800395c:	2202      	movs	r2, #2
 800395e:	2112      	movs	r1, #18
 8003960:	4805      	ldr	r0, [pc, #20]	@ (8003978 <global_stdio_init.part.0+0x38>)
 8003962:	f7ff ff8b 	bl	800387c <std>
 8003966:	bd10      	pop	{r4, pc}
 8003968:	20000310 	.word	0x20000310
 800396c:	080038e9 	.word	0x080038e9
 8003970:	200001d8 	.word	0x200001d8
 8003974:	20000240 	.word	0x20000240
 8003978:	200002a8 	.word	0x200002a8

0800397c <__sfp_lock_acquire>:
 800397c:	b510      	push	{r4, lr}
 800397e:	4802      	ldr	r0, [pc, #8]	@ (8003988 <__sfp_lock_acquire+0xc>)
 8003980:	f000 fa1d 	bl	8003dbe <__retarget_lock_acquire_recursive>
 8003984:	bd10      	pop	{r4, pc}
 8003986:	46c0      	nop			@ (mov r8, r8)
 8003988:	20000319 	.word	0x20000319

0800398c <__sfp_lock_release>:
 800398c:	b510      	push	{r4, lr}
 800398e:	4802      	ldr	r0, [pc, #8]	@ (8003998 <__sfp_lock_release+0xc>)
 8003990:	f000 fa16 	bl	8003dc0 <__retarget_lock_release_recursive>
 8003994:	bd10      	pop	{r4, pc}
 8003996:	46c0      	nop			@ (mov r8, r8)
 8003998:	20000319 	.word	0x20000319

0800399c <__sinit>:
 800399c:	b510      	push	{r4, lr}
 800399e:	0004      	movs	r4, r0
 80039a0:	f7ff ffec 	bl	800397c <__sfp_lock_acquire>
 80039a4:	6a23      	ldr	r3, [r4, #32]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <__sinit+0x14>
 80039aa:	f7ff ffef 	bl	800398c <__sfp_lock_release>
 80039ae:	bd10      	pop	{r4, pc}
 80039b0:	4b04      	ldr	r3, [pc, #16]	@ (80039c4 <__sinit+0x28>)
 80039b2:	6223      	str	r3, [r4, #32]
 80039b4:	4b04      	ldr	r3, [pc, #16]	@ (80039c8 <__sinit+0x2c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1f6      	bne.n	80039aa <__sinit+0xe>
 80039bc:	f7ff ffc0 	bl	8003940 <global_stdio_init.part.0>
 80039c0:	e7f3      	b.n	80039aa <__sinit+0xe>
 80039c2:	46c0      	nop			@ (mov r8, r8)
 80039c4:	08003905 	.word	0x08003905
 80039c8:	20000310 	.word	0x20000310

080039cc <_fwalk_sglue>:
 80039cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039ce:	0014      	movs	r4, r2
 80039d0:	2600      	movs	r6, #0
 80039d2:	9000      	str	r0, [sp, #0]
 80039d4:	9101      	str	r1, [sp, #4]
 80039d6:	68a5      	ldr	r5, [r4, #8]
 80039d8:	6867      	ldr	r7, [r4, #4]
 80039da:	3f01      	subs	r7, #1
 80039dc:	d504      	bpl.n	80039e8 <_fwalk_sglue+0x1c>
 80039de:	6824      	ldr	r4, [r4, #0]
 80039e0:	2c00      	cmp	r4, #0
 80039e2:	d1f8      	bne.n	80039d6 <_fwalk_sglue+0xa>
 80039e4:	0030      	movs	r0, r6
 80039e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80039e8:	89ab      	ldrh	r3, [r5, #12]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d908      	bls.n	8003a00 <_fwalk_sglue+0x34>
 80039ee:	220e      	movs	r2, #14
 80039f0:	5eab      	ldrsh	r3, [r5, r2]
 80039f2:	3301      	adds	r3, #1
 80039f4:	d004      	beq.n	8003a00 <_fwalk_sglue+0x34>
 80039f6:	0029      	movs	r1, r5
 80039f8:	9800      	ldr	r0, [sp, #0]
 80039fa:	9b01      	ldr	r3, [sp, #4]
 80039fc:	4798      	blx	r3
 80039fe:	4306      	orrs	r6, r0
 8003a00:	3568      	adds	r5, #104	@ 0x68
 8003a02:	e7ea      	b.n	80039da <_fwalk_sglue+0xe>

08003a04 <iprintf>:
 8003a04:	b40f      	push	{r0, r1, r2, r3}
 8003a06:	b507      	push	{r0, r1, r2, lr}
 8003a08:	4905      	ldr	r1, [pc, #20]	@ (8003a20 <iprintf+0x1c>)
 8003a0a:	ab04      	add	r3, sp, #16
 8003a0c:	6808      	ldr	r0, [r1, #0]
 8003a0e:	cb04      	ldmia	r3!, {r2}
 8003a10:	6881      	ldr	r1, [r0, #8]
 8003a12:	9301      	str	r3, [sp, #4]
 8003a14:	f000 fafa 	bl	800400c <_vfiprintf_r>
 8003a18:	b003      	add	sp, #12
 8003a1a:	bc08      	pop	{r3}
 8003a1c:	b004      	add	sp, #16
 8003a1e:	4718      	bx	r3
 8003a20:	20000018 	.word	0x20000018

08003a24 <_puts_r>:
 8003a24:	6a03      	ldr	r3, [r0, #32]
 8003a26:	b570      	push	{r4, r5, r6, lr}
 8003a28:	0005      	movs	r5, r0
 8003a2a:	000e      	movs	r6, r1
 8003a2c:	6884      	ldr	r4, [r0, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <_puts_r+0x12>
 8003a32:	f7ff ffb3 	bl	800399c <__sinit>
 8003a36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a38:	07db      	lsls	r3, r3, #31
 8003a3a:	d405      	bmi.n	8003a48 <_puts_r+0x24>
 8003a3c:	89a3      	ldrh	r3, [r4, #12]
 8003a3e:	059b      	lsls	r3, r3, #22
 8003a40:	d402      	bmi.n	8003a48 <_puts_r+0x24>
 8003a42:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a44:	f000 f9bb 	bl	8003dbe <__retarget_lock_acquire_recursive>
 8003a48:	89a3      	ldrh	r3, [r4, #12]
 8003a4a:	071b      	lsls	r3, r3, #28
 8003a4c:	d502      	bpl.n	8003a54 <_puts_r+0x30>
 8003a4e:	6923      	ldr	r3, [r4, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d11f      	bne.n	8003a94 <_puts_r+0x70>
 8003a54:	0021      	movs	r1, r4
 8003a56:	0028      	movs	r0, r5
 8003a58:	f000 f8d2 	bl	8003c00 <__swsetup_r>
 8003a5c:	2800      	cmp	r0, #0
 8003a5e:	d019      	beq.n	8003a94 <_puts_r+0x70>
 8003a60:	2501      	movs	r5, #1
 8003a62:	426d      	negs	r5, r5
 8003a64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a66:	07db      	lsls	r3, r3, #31
 8003a68:	d405      	bmi.n	8003a76 <_puts_r+0x52>
 8003a6a:	89a3      	ldrh	r3, [r4, #12]
 8003a6c:	059b      	lsls	r3, r3, #22
 8003a6e:	d402      	bmi.n	8003a76 <_puts_r+0x52>
 8003a70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a72:	f000 f9a5 	bl	8003dc0 <__retarget_lock_release_recursive>
 8003a76:	0028      	movs	r0, r5
 8003a78:	bd70      	pop	{r4, r5, r6, pc}
 8003a7a:	3601      	adds	r6, #1
 8003a7c:	60a3      	str	r3, [r4, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	da04      	bge.n	8003a8c <_puts_r+0x68>
 8003a82:	69a2      	ldr	r2, [r4, #24]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	dc16      	bgt.n	8003ab6 <_puts_r+0x92>
 8003a88:	290a      	cmp	r1, #10
 8003a8a:	d014      	beq.n	8003ab6 <_puts_r+0x92>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	6022      	str	r2, [r4, #0]
 8003a92:	7019      	strb	r1, [r3, #0]
 8003a94:	68a3      	ldr	r3, [r4, #8]
 8003a96:	7831      	ldrb	r1, [r6, #0]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	2900      	cmp	r1, #0
 8003a9c:	d1ed      	bne.n	8003a7a <_puts_r+0x56>
 8003a9e:	60a3      	str	r3, [r4, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	da0f      	bge.n	8003ac4 <_puts_r+0xa0>
 8003aa4:	0022      	movs	r2, r4
 8003aa6:	0028      	movs	r0, r5
 8003aa8:	310a      	adds	r1, #10
 8003aaa:	f000 f867 	bl	8003b7c <__swbuf_r>
 8003aae:	3001      	adds	r0, #1
 8003ab0:	d0d6      	beq.n	8003a60 <_puts_r+0x3c>
 8003ab2:	250a      	movs	r5, #10
 8003ab4:	e7d6      	b.n	8003a64 <_puts_r+0x40>
 8003ab6:	0022      	movs	r2, r4
 8003ab8:	0028      	movs	r0, r5
 8003aba:	f000 f85f 	bl	8003b7c <__swbuf_r>
 8003abe:	3001      	adds	r0, #1
 8003ac0:	d1e8      	bne.n	8003a94 <_puts_r+0x70>
 8003ac2:	e7cd      	b.n	8003a60 <_puts_r+0x3c>
 8003ac4:	6823      	ldr	r3, [r4, #0]
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	6022      	str	r2, [r4, #0]
 8003aca:	220a      	movs	r2, #10
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	e7f0      	b.n	8003ab2 <_puts_r+0x8e>

08003ad0 <puts>:
 8003ad0:	b510      	push	{r4, lr}
 8003ad2:	4b03      	ldr	r3, [pc, #12]	@ (8003ae0 <puts+0x10>)
 8003ad4:	0001      	movs	r1, r0
 8003ad6:	6818      	ldr	r0, [r3, #0]
 8003ad8:	f7ff ffa4 	bl	8003a24 <_puts_r>
 8003adc:	bd10      	pop	{r4, pc}
 8003ade:	46c0      	nop			@ (mov r8, r8)
 8003ae0:	20000018 	.word	0x20000018

08003ae4 <__sread>:
 8003ae4:	b570      	push	{r4, r5, r6, lr}
 8003ae6:	000c      	movs	r4, r1
 8003ae8:	250e      	movs	r5, #14
 8003aea:	5f49      	ldrsh	r1, [r1, r5]
 8003aec:	f000 f914 	bl	8003d18 <_read_r>
 8003af0:	2800      	cmp	r0, #0
 8003af2:	db03      	blt.n	8003afc <__sread+0x18>
 8003af4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003af6:	181b      	adds	r3, r3, r0
 8003af8:	6563      	str	r3, [r4, #84]	@ 0x54
 8003afa:	bd70      	pop	{r4, r5, r6, pc}
 8003afc:	89a3      	ldrh	r3, [r4, #12]
 8003afe:	4a02      	ldr	r2, [pc, #8]	@ (8003b08 <__sread+0x24>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	81a3      	strh	r3, [r4, #12]
 8003b04:	e7f9      	b.n	8003afa <__sread+0x16>
 8003b06:	46c0      	nop			@ (mov r8, r8)
 8003b08:	ffffefff 	.word	0xffffefff

08003b0c <__swrite>:
 8003b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0e:	001f      	movs	r7, r3
 8003b10:	898b      	ldrh	r3, [r1, #12]
 8003b12:	0005      	movs	r5, r0
 8003b14:	000c      	movs	r4, r1
 8003b16:	0016      	movs	r6, r2
 8003b18:	05db      	lsls	r3, r3, #23
 8003b1a:	d505      	bpl.n	8003b28 <__swrite+0x1c>
 8003b1c:	230e      	movs	r3, #14
 8003b1e:	5ec9      	ldrsh	r1, [r1, r3]
 8003b20:	2200      	movs	r2, #0
 8003b22:	2302      	movs	r3, #2
 8003b24:	f000 f8e4 	bl	8003cf0 <_lseek_r>
 8003b28:	89a3      	ldrh	r3, [r4, #12]
 8003b2a:	4a05      	ldr	r2, [pc, #20]	@ (8003b40 <__swrite+0x34>)
 8003b2c:	0028      	movs	r0, r5
 8003b2e:	4013      	ands	r3, r2
 8003b30:	81a3      	strh	r3, [r4, #12]
 8003b32:	0032      	movs	r2, r6
 8003b34:	230e      	movs	r3, #14
 8003b36:	5ee1      	ldrsh	r1, [r4, r3]
 8003b38:	003b      	movs	r3, r7
 8003b3a:	f000 f901 	bl	8003d40 <_write_r>
 8003b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b40:	ffffefff 	.word	0xffffefff

08003b44 <__sseek>:
 8003b44:	b570      	push	{r4, r5, r6, lr}
 8003b46:	000c      	movs	r4, r1
 8003b48:	250e      	movs	r5, #14
 8003b4a:	5f49      	ldrsh	r1, [r1, r5]
 8003b4c:	f000 f8d0 	bl	8003cf0 <_lseek_r>
 8003b50:	89a3      	ldrh	r3, [r4, #12]
 8003b52:	1c42      	adds	r2, r0, #1
 8003b54:	d103      	bne.n	8003b5e <__sseek+0x1a>
 8003b56:	4a05      	ldr	r2, [pc, #20]	@ (8003b6c <__sseek+0x28>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	81a3      	strh	r3, [r4, #12]
 8003b5c:	bd70      	pop	{r4, r5, r6, pc}
 8003b5e:	2280      	movs	r2, #128	@ 0x80
 8003b60:	0152      	lsls	r2, r2, #5
 8003b62:	4313      	orrs	r3, r2
 8003b64:	81a3      	strh	r3, [r4, #12]
 8003b66:	6560      	str	r0, [r4, #84]	@ 0x54
 8003b68:	e7f8      	b.n	8003b5c <__sseek+0x18>
 8003b6a:	46c0      	nop			@ (mov r8, r8)
 8003b6c:	ffffefff 	.word	0xffffefff

08003b70 <__sclose>:
 8003b70:	b510      	push	{r4, lr}
 8003b72:	230e      	movs	r3, #14
 8003b74:	5ec9      	ldrsh	r1, [r1, r3]
 8003b76:	f000 f8a9 	bl	8003ccc <_close_r>
 8003b7a:	bd10      	pop	{r4, pc}

08003b7c <__swbuf_r>:
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	0006      	movs	r6, r0
 8003b80:	000d      	movs	r5, r1
 8003b82:	0014      	movs	r4, r2
 8003b84:	2800      	cmp	r0, #0
 8003b86:	d004      	beq.n	8003b92 <__swbuf_r+0x16>
 8003b88:	6a03      	ldr	r3, [r0, #32]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <__swbuf_r+0x16>
 8003b8e:	f7ff ff05 	bl	800399c <__sinit>
 8003b92:	69a3      	ldr	r3, [r4, #24]
 8003b94:	60a3      	str	r3, [r4, #8]
 8003b96:	89a3      	ldrh	r3, [r4, #12]
 8003b98:	071b      	lsls	r3, r3, #28
 8003b9a:	d502      	bpl.n	8003ba2 <__swbuf_r+0x26>
 8003b9c:	6923      	ldr	r3, [r4, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d109      	bne.n	8003bb6 <__swbuf_r+0x3a>
 8003ba2:	0021      	movs	r1, r4
 8003ba4:	0030      	movs	r0, r6
 8003ba6:	f000 f82b 	bl	8003c00 <__swsetup_r>
 8003baa:	2800      	cmp	r0, #0
 8003bac:	d003      	beq.n	8003bb6 <__swbuf_r+0x3a>
 8003bae:	2501      	movs	r5, #1
 8003bb0:	426d      	negs	r5, r5
 8003bb2:	0028      	movs	r0, r5
 8003bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bb6:	6923      	ldr	r3, [r4, #16]
 8003bb8:	6820      	ldr	r0, [r4, #0]
 8003bba:	b2ef      	uxtb	r7, r5
 8003bbc:	1ac0      	subs	r0, r0, r3
 8003bbe:	6963      	ldr	r3, [r4, #20]
 8003bc0:	b2ed      	uxtb	r5, r5
 8003bc2:	4283      	cmp	r3, r0
 8003bc4:	dc05      	bgt.n	8003bd2 <__swbuf_r+0x56>
 8003bc6:	0021      	movs	r1, r4
 8003bc8:	0030      	movs	r0, r6
 8003bca:	f000 fd3d 	bl	8004648 <_fflush_r>
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	d1ed      	bne.n	8003bae <__swbuf_r+0x32>
 8003bd2:	68a3      	ldr	r3, [r4, #8]
 8003bd4:	3001      	adds	r0, #1
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	60a3      	str	r3, [r4, #8]
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	6022      	str	r2, [r4, #0]
 8003be0:	701f      	strb	r7, [r3, #0]
 8003be2:	6963      	ldr	r3, [r4, #20]
 8003be4:	4283      	cmp	r3, r0
 8003be6:	d004      	beq.n	8003bf2 <__swbuf_r+0x76>
 8003be8:	89a3      	ldrh	r3, [r4, #12]
 8003bea:	07db      	lsls	r3, r3, #31
 8003bec:	d5e1      	bpl.n	8003bb2 <__swbuf_r+0x36>
 8003bee:	2d0a      	cmp	r5, #10
 8003bf0:	d1df      	bne.n	8003bb2 <__swbuf_r+0x36>
 8003bf2:	0021      	movs	r1, r4
 8003bf4:	0030      	movs	r0, r6
 8003bf6:	f000 fd27 	bl	8004648 <_fflush_r>
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	d0d9      	beq.n	8003bb2 <__swbuf_r+0x36>
 8003bfe:	e7d6      	b.n	8003bae <__swbuf_r+0x32>

08003c00 <__swsetup_r>:
 8003c00:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb8 <__swsetup_r+0xb8>)
 8003c02:	b570      	push	{r4, r5, r6, lr}
 8003c04:	0005      	movs	r5, r0
 8003c06:	6818      	ldr	r0, [r3, #0]
 8003c08:	000c      	movs	r4, r1
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	d004      	beq.n	8003c18 <__swsetup_r+0x18>
 8003c0e:	6a03      	ldr	r3, [r0, #32]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <__swsetup_r+0x18>
 8003c14:	f7ff fec2 	bl	800399c <__sinit>
 8003c18:	220c      	movs	r2, #12
 8003c1a:	5ea3      	ldrsh	r3, [r4, r2]
 8003c1c:	071a      	lsls	r2, r3, #28
 8003c1e:	d423      	bmi.n	8003c68 <__swsetup_r+0x68>
 8003c20:	06da      	lsls	r2, r3, #27
 8003c22:	d407      	bmi.n	8003c34 <__swsetup_r+0x34>
 8003c24:	2209      	movs	r2, #9
 8003c26:	602a      	str	r2, [r5, #0]
 8003c28:	2240      	movs	r2, #64	@ 0x40
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	81a3      	strh	r3, [r4, #12]
 8003c30:	4240      	negs	r0, r0
 8003c32:	e03a      	b.n	8003caa <__swsetup_r+0xaa>
 8003c34:	075b      	lsls	r3, r3, #29
 8003c36:	d513      	bpl.n	8003c60 <__swsetup_r+0x60>
 8003c38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c3a:	2900      	cmp	r1, #0
 8003c3c:	d008      	beq.n	8003c50 <__swsetup_r+0x50>
 8003c3e:	0023      	movs	r3, r4
 8003c40:	3344      	adds	r3, #68	@ 0x44
 8003c42:	4299      	cmp	r1, r3
 8003c44:	d002      	beq.n	8003c4c <__swsetup_r+0x4c>
 8003c46:	0028      	movs	r0, r5
 8003c48:	f000 f8bc 	bl	8003dc4 <_free_r>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c50:	2224      	movs	r2, #36	@ 0x24
 8003c52:	89a3      	ldrh	r3, [r4, #12]
 8003c54:	4393      	bics	r3, r2
 8003c56:	81a3      	strh	r3, [r4, #12]
 8003c58:	2300      	movs	r3, #0
 8003c5a:	6063      	str	r3, [r4, #4]
 8003c5c:	6923      	ldr	r3, [r4, #16]
 8003c5e:	6023      	str	r3, [r4, #0]
 8003c60:	2308      	movs	r3, #8
 8003c62:	89a2      	ldrh	r2, [r4, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	81a3      	strh	r3, [r4, #12]
 8003c68:	6923      	ldr	r3, [r4, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10b      	bne.n	8003c86 <__swsetup_r+0x86>
 8003c6e:	21a0      	movs	r1, #160	@ 0xa0
 8003c70:	2280      	movs	r2, #128	@ 0x80
 8003c72:	89a3      	ldrh	r3, [r4, #12]
 8003c74:	0089      	lsls	r1, r1, #2
 8003c76:	0092      	lsls	r2, r2, #2
 8003c78:	400b      	ands	r3, r1
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d003      	beq.n	8003c86 <__swsetup_r+0x86>
 8003c7e:	0021      	movs	r1, r4
 8003c80:	0028      	movs	r0, r5
 8003c82:	f000 fd37 	bl	80046f4 <__smakebuf_r>
 8003c86:	220c      	movs	r2, #12
 8003c88:	5ea3      	ldrsh	r3, [r4, r2]
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	001a      	movs	r2, r3
 8003c8e:	400a      	ands	r2, r1
 8003c90:	420b      	tst	r3, r1
 8003c92:	d00b      	beq.n	8003cac <__swsetup_r+0xac>
 8003c94:	2200      	movs	r2, #0
 8003c96:	60a2      	str	r2, [r4, #8]
 8003c98:	6962      	ldr	r2, [r4, #20]
 8003c9a:	4252      	negs	r2, r2
 8003c9c:	61a2      	str	r2, [r4, #24]
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	6922      	ldr	r2, [r4, #16]
 8003ca2:	4282      	cmp	r2, r0
 8003ca4:	d101      	bne.n	8003caa <__swsetup_r+0xaa>
 8003ca6:	061a      	lsls	r2, r3, #24
 8003ca8:	d4be      	bmi.n	8003c28 <__swsetup_r+0x28>
 8003caa:	bd70      	pop	{r4, r5, r6, pc}
 8003cac:	0799      	lsls	r1, r3, #30
 8003cae:	d400      	bmi.n	8003cb2 <__swsetup_r+0xb2>
 8003cb0:	6962      	ldr	r2, [r4, #20]
 8003cb2:	60a2      	str	r2, [r4, #8]
 8003cb4:	e7f3      	b.n	8003c9e <__swsetup_r+0x9e>
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	20000018 	.word	0x20000018

08003cbc <memset>:
 8003cbc:	0003      	movs	r3, r0
 8003cbe:	1882      	adds	r2, r0, r2
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d100      	bne.n	8003cc6 <memset+0xa>
 8003cc4:	4770      	bx	lr
 8003cc6:	7019      	strb	r1, [r3, #0]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	e7f9      	b.n	8003cc0 <memset+0x4>

08003ccc <_close_r>:
 8003ccc:	2300      	movs	r3, #0
 8003cce:	b570      	push	{r4, r5, r6, lr}
 8003cd0:	4d06      	ldr	r5, [pc, #24]	@ (8003cec <_close_r+0x20>)
 8003cd2:	0004      	movs	r4, r0
 8003cd4:	0008      	movs	r0, r1
 8003cd6:	602b      	str	r3, [r5, #0]
 8003cd8:	f7fd f828 	bl	8000d2c <_close>
 8003cdc:	1c43      	adds	r3, r0, #1
 8003cde:	d103      	bne.n	8003ce8 <_close_r+0x1c>
 8003ce0:	682b      	ldr	r3, [r5, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d000      	beq.n	8003ce8 <_close_r+0x1c>
 8003ce6:	6023      	str	r3, [r4, #0]
 8003ce8:	bd70      	pop	{r4, r5, r6, pc}
 8003cea:	46c0      	nop			@ (mov r8, r8)
 8003cec:	20000314 	.word	0x20000314

08003cf0 <_lseek_r>:
 8003cf0:	b570      	push	{r4, r5, r6, lr}
 8003cf2:	0004      	movs	r4, r0
 8003cf4:	0008      	movs	r0, r1
 8003cf6:	0011      	movs	r1, r2
 8003cf8:	001a      	movs	r2, r3
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	4d05      	ldr	r5, [pc, #20]	@ (8003d14 <_lseek_r+0x24>)
 8003cfe:	602b      	str	r3, [r5, #0]
 8003d00:	f7fd f835 	bl	8000d6e <_lseek>
 8003d04:	1c43      	adds	r3, r0, #1
 8003d06:	d103      	bne.n	8003d10 <_lseek_r+0x20>
 8003d08:	682b      	ldr	r3, [r5, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d000      	beq.n	8003d10 <_lseek_r+0x20>
 8003d0e:	6023      	str	r3, [r4, #0]
 8003d10:	bd70      	pop	{r4, r5, r6, pc}
 8003d12:	46c0      	nop			@ (mov r8, r8)
 8003d14:	20000314 	.word	0x20000314

08003d18 <_read_r>:
 8003d18:	b570      	push	{r4, r5, r6, lr}
 8003d1a:	0004      	movs	r4, r0
 8003d1c:	0008      	movs	r0, r1
 8003d1e:	0011      	movs	r1, r2
 8003d20:	001a      	movs	r2, r3
 8003d22:	2300      	movs	r3, #0
 8003d24:	4d05      	ldr	r5, [pc, #20]	@ (8003d3c <_read_r+0x24>)
 8003d26:	602b      	str	r3, [r5, #0]
 8003d28:	f7fc ffc7 	bl	8000cba <_read>
 8003d2c:	1c43      	adds	r3, r0, #1
 8003d2e:	d103      	bne.n	8003d38 <_read_r+0x20>
 8003d30:	682b      	ldr	r3, [r5, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d000      	beq.n	8003d38 <_read_r+0x20>
 8003d36:	6023      	str	r3, [r4, #0]
 8003d38:	bd70      	pop	{r4, r5, r6, pc}
 8003d3a:	46c0      	nop			@ (mov r8, r8)
 8003d3c:	20000314 	.word	0x20000314

08003d40 <_write_r>:
 8003d40:	b570      	push	{r4, r5, r6, lr}
 8003d42:	0004      	movs	r4, r0
 8003d44:	0008      	movs	r0, r1
 8003d46:	0011      	movs	r1, r2
 8003d48:	001a      	movs	r2, r3
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	4d05      	ldr	r5, [pc, #20]	@ (8003d64 <_write_r+0x24>)
 8003d4e:	602b      	str	r3, [r5, #0]
 8003d50:	f7fc ffd0 	bl	8000cf4 <_write>
 8003d54:	1c43      	adds	r3, r0, #1
 8003d56:	d103      	bne.n	8003d60 <_write_r+0x20>
 8003d58:	682b      	ldr	r3, [r5, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d000      	beq.n	8003d60 <_write_r+0x20>
 8003d5e:	6023      	str	r3, [r4, #0]
 8003d60:	bd70      	pop	{r4, r5, r6, pc}
 8003d62:	46c0      	nop			@ (mov r8, r8)
 8003d64:	20000314 	.word	0x20000314

08003d68 <__errno>:
 8003d68:	4b01      	ldr	r3, [pc, #4]	@ (8003d70 <__errno+0x8>)
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	4770      	bx	lr
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	20000018 	.word	0x20000018

08003d74 <__libc_init_array>:
 8003d74:	b570      	push	{r4, r5, r6, lr}
 8003d76:	2600      	movs	r6, #0
 8003d78:	4c0c      	ldr	r4, [pc, #48]	@ (8003dac <__libc_init_array+0x38>)
 8003d7a:	4d0d      	ldr	r5, [pc, #52]	@ (8003db0 <__libc_init_array+0x3c>)
 8003d7c:	1b64      	subs	r4, r4, r5
 8003d7e:	10a4      	asrs	r4, r4, #2
 8003d80:	42a6      	cmp	r6, r4
 8003d82:	d109      	bne.n	8003d98 <__libc_init_array+0x24>
 8003d84:	2600      	movs	r6, #0
 8003d86:	f000 fd39 	bl	80047fc <_init>
 8003d8a:	4c0a      	ldr	r4, [pc, #40]	@ (8003db4 <__libc_init_array+0x40>)
 8003d8c:	4d0a      	ldr	r5, [pc, #40]	@ (8003db8 <__libc_init_array+0x44>)
 8003d8e:	1b64      	subs	r4, r4, r5
 8003d90:	10a4      	asrs	r4, r4, #2
 8003d92:	42a6      	cmp	r6, r4
 8003d94:	d105      	bne.n	8003da2 <__libc_init_array+0x2e>
 8003d96:	bd70      	pop	{r4, r5, r6, pc}
 8003d98:	00b3      	lsls	r3, r6, #2
 8003d9a:	58eb      	ldr	r3, [r5, r3]
 8003d9c:	4798      	blx	r3
 8003d9e:	3601      	adds	r6, #1
 8003da0:	e7ee      	b.n	8003d80 <__libc_init_array+0xc>
 8003da2:	00b3      	lsls	r3, r6, #2
 8003da4:	58eb      	ldr	r3, [r5, r3]
 8003da6:	4798      	blx	r3
 8003da8:	3601      	adds	r6, #1
 8003daa:	e7f2      	b.n	8003d92 <__libc_init_array+0x1e>
 8003dac:	08004f4c 	.word	0x08004f4c
 8003db0:	08004f4c 	.word	0x08004f4c
 8003db4:	08004f50 	.word	0x08004f50
 8003db8:	08004f4c 	.word	0x08004f4c

08003dbc <__retarget_lock_init_recursive>:
 8003dbc:	4770      	bx	lr

08003dbe <__retarget_lock_acquire_recursive>:
 8003dbe:	4770      	bx	lr

08003dc0 <__retarget_lock_release_recursive>:
 8003dc0:	4770      	bx	lr
	...

08003dc4 <_free_r>:
 8003dc4:	b570      	push	{r4, r5, r6, lr}
 8003dc6:	0005      	movs	r5, r0
 8003dc8:	1e0c      	subs	r4, r1, #0
 8003dca:	d010      	beq.n	8003dee <_free_r+0x2a>
 8003dcc:	3c04      	subs	r4, #4
 8003dce:	6823      	ldr	r3, [r4, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	da00      	bge.n	8003dd6 <_free_r+0x12>
 8003dd4:	18e4      	adds	r4, r4, r3
 8003dd6:	0028      	movs	r0, r5
 8003dd8:	f000 f8e0 	bl	8003f9c <__malloc_lock>
 8003ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8003e54 <_free_r+0x90>)
 8003dde:	6813      	ldr	r3, [r2, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d105      	bne.n	8003df0 <_free_r+0x2c>
 8003de4:	6063      	str	r3, [r4, #4]
 8003de6:	6014      	str	r4, [r2, #0]
 8003de8:	0028      	movs	r0, r5
 8003dea:	f000 f8df 	bl	8003fac <__malloc_unlock>
 8003dee:	bd70      	pop	{r4, r5, r6, pc}
 8003df0:	42a3      	cmp	r3, r4
 8003df2:	d908      	bls.n	8003e06 <_free_r+0x42>
 8003df4:	6820      	ldr	r0, [r4, #0]
 8003df6:	1821      	adds	r1, r4, r0
 8003df8:	428b      	cmp	r3, r1
 8003dfa:	d1f3      	bne.n	8003de4 <_free_r+0x20>
 8003dfc:	6819      	ldr	r1, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	1809      	adds	r1, r1, r0
 8003e02:	6021      	str	r1, [r4, #0]
 8003e04:	e7ee      	b.n	8003de4 <_free_r+0x20>
 8003e06:	001a      	movs	r2, r3
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <_free_r+0x4e>
 8003e0e:	42a3      	cmp	r3, r4
 8003e10:	d9f9      	bls.n	8003e06 <_free_r+0x42>
 8003e12:	6811      	ldr	r1, [r2, #0]
 8003e14:	1850      	adds	r0, r2, r1
 8003e16:	42a0      	cmp	r0, r4
 8003e18:	d10b      	bne.n	8003e32 <_free_r+0x6e>
 8003e1a:	6820      	ldr	r0, [r4, #0]
 8003e1c:	1809      	adds	r1, r1, r0
 8003e1e:	1850      	adds	r0, r2, r1
 8003e20:	6011      	str	r1, [r2, #0]
 8003e22:	4283      	cmp	r3, r0
 8003e24:	d1e0      	bne.n	8003de8 <_free_r+0x24>
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	1841      	adds	r1, r0, r1
 8003e2c:	6011      	str	r1, [r2, #0]
 8003e2e:	6053      	str	r3, [r2, #4]
 8003e30:	e7da      	b.n	8003de8 <_free_r+0x24>
 8003e32:	42a0      	cmp	r0, r4
 8003e34:	d902      	bls.n	8003e3c <_free_r+0x78>
 8003e36:	230c      	movs	r3, #12
 8003e38:	602b      	str	r3, [r5, #0]
 8003e3a:	e7d5      	b.n	8003de8 <_free_r+0x24>
 8003e3c:	6820      	ldr	r0, [r4, #0]
 8003e3e:	1821      	adds	r1, r4, r0
 8003e40:	428b      	cmp	r3, r1
 8003e42:	d103      	bne.n	8003e4c <_free_r+0x88>
 8003e44:	6819      	ldr	r1, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	1809      	adds	r1, r1, r0
 8003e4a:	6021      	str	r1, [r4, #0]
 8003e4c:	6063      	str	r3, [r4, #4]
 8003e4e:	6054      	str	r4, [r2, #4]
 8003e50:	e7ca      	b.n	8003de8 <_free_r+0x24>
 8003e52:	46c0      	nop			@ (mov r8, r8)
 8003e54:	20000320 	.word	0x20000320

08003e58 <sbrk_aligned>:
 8003e58:	b570      	push	{r4, r5, r6, lr}
 8003e5a:	4e0f      	ldr	r6, [pc, #60]	@ (8003e98 <sbrk_aligned+0x40>)
 8003e5c:	000d      	movs	r5, r1
 8003e5e:	6831      	ldr	r1, [r6, #0]
 8003e60:	0004      	movs	r4, r0
 8003e62:	2900      	cmp	r1, #0
 8003e64:	d102      	bne.n	8003e6c <sbrk_aligned+0x14>
 8003e66:	f000 fcab 	bl	80047c0 <_sbrk_r>
 8003e6a:	6030      	str	r0, [r6, #0]
 8003e6c:	0029      	movs	r1, r5
 8003e6e:	0020      	movs	r0, r4
 8003e70:	f000 fca6 	bl	80047c0 <_sbrk_r>
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	d103      	bne.n	8003e80 <sbrk_aligned+0x28>
 8003e78:	2501      	movs	r5, #1
 8003e7a:	426d      	negs	r5, r5
 8003e7c:	0028      	movs	r0, r5
 8003e7e:	bd70      	pop	{r4, r5, r6, pc}
 8003e80:	2303      	movs	r3, #3
 8003e82:	1cc5      	adds	r5, r0, #3
 8003e84:	439d      	bics	r5, r3
 8003e86:	42a8      	cmp	r0, r5
 8003e88:	d0f8      	beq.n	8003e7c <sbrk_aligned+0x24>
 8003e8a:	1a29      	subs	r1, r5, r0
 8003e8c:	0020      	movs	r0, r4
 8003e8e:	f000 fc97 	bl	80047c0 <_sbrk_r>
 8003e92:	3001      	adds	r0, #1
 8003e94:	d1f2      	bne.n	8003e7c <sbrk_aligned+0x24>
 8003e96:	e7ef      	b.n	8003e78 <sbrk_aligned+0x20>
 8003e98:	2000031c 	.word	0x2000031c

08003e9c <_malloc_r>:
 8003e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	1ccb      	adds	r3, r1, #3
 8003ea2:	4393      	bics	r3, r2
 8003ea4:	3308      	adds	r3, #8
 8003ea6:	0005      	movs	r5, r0
 8003ea8:	001f      	movs	r7, r3
 8003eaa:	2b0c      	cmp	r3, #12
 8003eac:	d234      	bcs.n	8003f18 <_malloc_r+0x7c>
 8003eae:	270c      	movs	r7, #12
 8003eb0:	42b9      	cmp	r1, r7
 8003eb2:	d833      	bhi.n	8003f1c <_malloc_r+0x80>
 8003eb4:	0028      	movs	r0, r5
 8003eb6:	f000 f871 	bl	8003f9c <__malloc_lock>
 8003eba:	4e37      	ldr	r6, [pc, #220]	@ (8003f98 <_malloc_r+0xfc>)
 8003ebc:	6833      	ldr	r3, [r6, #0]
 8003ebe:	001c      	movs	r4, r3
 8003ec0:	2c00      	cmp	r4, #0
 8003ec2:	d12f      	bne.n	8003f24 <_malloc_r+0x88>
 8003ec4:	0039      	movs	r1, r7
 8003ec6:	0028      	movs	r0, r5
 8003ec8:	f7ff ffc6 	bl	8003e58 <sbrk_aligned>
 8003ecc:	0004      	movs	r4, r0
 8003ece:	1c43      	adds	r3, r0, #1
 8003ed0:	d15f      	bne.n	8003f92 <_malloc_r+0xf6>
 8003ed2:	6834      	ldr	r4, [r6, #0]
 8003ed4:	9400      	str	r4, [sp, #0]
 8003ed6:	9b00      	ldr	r3, [sp, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d14a      	bne.n	8003f72 <_malloc_r+0xd6>
 8003edc:	2c00      	cmp	r4, #0
 8003ede:	d052      	beq.n	8003f86 <_malloc_r+0xea>
 8003ee0:	6823      	ldr	r3, [r4, #0]
 8003ee2:	0028      	movs	r0, r5
 8003ee4:	18e3      	adds	r3, r4, r3
 8003ee6:	9900      	ldr	r1, [sp, #0]
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	f000 fc69 	bl	80047c0 <_sbrk_r>
 8003eee:	9b01      	ldr	r3, [sp, #4]
 8003ef0:	4283      	cmp	r3, r0
 8003ef2:	d148      	bne.n	8003f86 <_malloc_r+0xea>
 8003ef4:	6823      	ldr	r3, [r4, #0]
 8003ef6:	0028      	movs	r0, r5
 8003ef8:	1aff      	subs	r7, r7, r3
 8003efa:	0039      	movs	r1, r7
 8003efc:	f7ff ffac 	bl	8003e58 <sbrk_aligned>
 8003f00:	3001      	adds	r0, #1
 8003f02:	d040      	beq.n	8003f86 <_malloc_r+0xea>
 8003f04:	6823      	ldr	r3, [r4, #0]
 8003f06:	19db      	adds	r3, r3, r7
 8003f08:	6023      	str	r3, [r4, #0]
 8003f0a:	6833      	ldr	r3, [r6, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	2a00      	cmp	r2, #0
 8003f10:	d133      	bne.n	8003f7a <_malloc_r+0xde>
 8003f12:	9b00      	ldr	r3, [sp, #0]
 8003f14:	6033      	str	r3, [r6, #0]
 8003f16:	e019      	b.n	8003f4c <_malloc_r+0xb0>
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	dac9      	bge.n	8003eb0 <_malloc_r+0x14>
 8003f1c:	230c      	movs	r3, #12
 8003f1e:	602b      	str	r3, [r5, #0]
 8003f20:	2000      	movs	r0, #0
 8003f22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f24:	6821      	ldr	r1, [r4, #0]
 8003f26:	1bc9      	subs	r1, r1, r7
 8003f28:	d420      	bmi.n	8003f6c <_malloc_r+0xd0>
 8003f2a:	290b      	cmp	r1, #11
 8003f2c:	d90a      	bls.n	8003f44 <_malloc_r+0xa8>
 8003f2e:	19e2      	adds	r2, r4, r7
 8003f30:	6027      	str	r7, [r4, #0]
 8003f32:	42a3      	cmp	r3, r4
 8003f34:	d104      	bne.n	8003f40 <_malloc_r+0xa4>
 8003f36:	6032      	str	r2, [r6, #0]
 8003f38:	6863      	ldr	r3, [r4, #4]
 8003f3a:	6011      	str	r1, [r2, #0]
 8003f3c:	6053      	str	r3, [r2, #4]
 8003f3e:	e005      	b.n	8003f4c <_malloc_r+0xb0>
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	e7f9      	b.n	8003f38 <_malloc_r+0x9c>
 8003f44:	6862      	ldr	r2, [r4, #4]
 8003f46:	42a3      	cmp	r3, r4
 8003f48:	d10e      	bne.n	8003f68 <_malloc_r+0xcc>
 8003f4a:	6032      	str	r2, [r6, #0]
 8003f4c:	0028      	movs	r0, r5
 8003f4e:	f000 f82d 	bl	8003fac <__malloc_unlock>
 8003f52:	0020      	movs	r0, r4
 8003f54:	2207      	movs	r2, #7
 8003f56:	300b      	adds	r0, #11
 8003f58:	1d23      	adds	r3, r4, #4
 8003f5a:	4390      	bics	r0, r2
 8003f5c:	1ac2      	subs	r2, r0, r3
 8003f5e:	4298      	cmp	r0, r3
 8003f60:	d0df      	beq.n	8003f22 <_malloc_r+0x86>
 8003f62:	1a1b      	subs	r3, r3, r0
 8003f64:	50a3      	str	r3, [r4, r2]
 8003f66:	e7dc      	b.n	8003f22 <_malloc_r+0x86>
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	e7ef      	b.n	8003f4c <_malloc_r+0xb0>
 8003f6c:	0023      	movs	r3, r4
 8003f6e:	6864      	ldr	r4, [r4, #4]
 8003f70:	e7a6      	b.n	8003ec0 <_malloc_r+0x24>
 8003f72:	9c00      	ldr	r4, [sp, #0]
 8003f74:	6863      	ldr	r3, [r4, #4]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	e7ad      	b.n	8003ed6 <_malloc_r+0x3a>
 8003f7a:	001a      	movs	r2, r3
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	42a3      	cmp	r3, r4
 8003f80:	d1fb      	bne.n	8003f7a <_malloc_r+0xde>
 8003f82:	2300      	movs	r3, #0
 8003f84:	e7da      	b.n	8003f3c <_malloc_r+0xa0>
 8003f86:	230c      	movs	r3, #12
 8003f88:	0028      	movs	r0, r5
 8003f8a:	602b      	str	r3, [r5, #0]
 8003f8c:	f000 f80e 	bl	8003fac <__malloc_unlock>
 8003f90:	e7c6      	b.n	8003f20 <_malloc_r+0x84>
 8003f92:	6007      	str	r7, [r0, #0]
 8003f94:	e7da      	b.n	8003f4c <_malloc_r+0xb0>
 8003f96:	46c0      	nop			@ (mov r8, r8)
 8003f98:	20000320 	.word	0x20000320

08003f9c <__malloc_lock>:
 8003f9c:	b510      	push	{r4, lr}
 8003f9e:	4802      	ldr	r0, [pc, #8]	@ (8003fa8 <__malloc_lock+0xc>)
 8003fa0:	f7ff ff0d 	bl	8003dbe <__retarget_lock_acquire_recursive>
 8003fa4:	bd10      	pop	{r4, pc}
 8003fa6:	46c0      	nop			@ (mov r8, r8)
 8003fa8:	20000318 	.word	0x20000318

08003fac <__malloc_unlock>:
 8003fac:	b510      	push	{r4, lr}
 8003fae:	4802      	ldr	r0, [pc, #8]	@ (8003fb8 <__malloc_unlock+0xc>)
 8003fb0:	f7ff ff06 	bl	8003dc0 <__retarget_lock_release_recursive>
 8003fb4:	bd10      	pop	{r4, pc}
 8003fb6:	46c0      	nop			@ (mov r8, r8)
 8003fb8:	20000318 	.word	0x20000318

08003fbc <__sfputc_r>:
 8003fbc:	6893      	ldr	r3, [r2, #8]
 8003fbe:	b510      	push	{r4, lr}
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	6093      	str	r3, [r2, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	da04      	bge.n	8003fd2 <__sfputc_r+0x16>
 8003fc8:	6994      	ldr	r4, [r2, #24]
 8003fca:	42a3      	cmp	r3, r4
 8003fcc:	db07      	blt.n	8003fde <__sfputc_r+0x22>
 8003fce:	290a      	cmp	r1, #10
 8003fd0:	d005      	beq.n	8003fde <__sfputc_r+0x22>
 8003fd2:	6813      	ldr	r3, [r2, #0]
 8003fd4:	1c58      	adds	r0, r3, #1
 8003fd6:	6010      	str	r0, [r2, #0]
 8003fd8:	7019      	strb	r1, [r3, #0]
 8003fda:	0008      	movs	r0, r1
 8003fdc:	bd10      	pop	{r4, pc}
 8003fde:	f7ff fdcd 	bl	8003b7c <__swbuf_r>
 8003fe2:	0001      	movs	r1, r0
 8003fe4:	e7f9      	b.n	8003fda <__sfputc_r+0x1e>

08003fe6 <__sfputs_r>:
 8003fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe8:	0006      	movs	r6, r0
 8003fea:	000f      	movs	r7, r1
 8003fec:	0014      	movs	r4, r2
 8003fee:	18d5      	adds	r5, r2, r3
 8003ff0:	42ac      	cmp	r4, r5
 8003ff2:	d101      	bne.n	8003ff8 <__sfputs_r+0x12>
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	e007      	b.n	8004008 <__sfputs_r+0x22>
 8003ff8:	7821      	ldrb	r1, [r4, #0]
 8003ffa:	003a      	movs	r2, r7
 8003ffc:	0030      	movs	r0, r6
 8003ffe:	f7ff ffdd 	bl	8003fbc <__sfputc_r>
 8004002:	3401      	adds	r4, #1
 8004004:	1c43      	adds	r3, r0, #1
 8004006:	d1f3      	bne.n	8003ff0 <__sfputs_r+0xa>
 8004008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800400c <_vfiprintf_r>:
 800400c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800400e:	b0a1      	sub	sp, #132	@ 0x84
 8004010:	000f      	movs	r7, r1
 8004012:	0015      	movs	r5, r2
 8004014:	001e      	movs	r6, r3
 8004016:	9003      	str	r0, [sp, #12]
 8004018:	2800      	cmp	r0, #0
 800401a:	d004      	beq.n	8004026 <_vfiprintf_r+0x1a>
 800401c:	6a03      	ldr	r3, [r0, #32]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <_vfiprintf_r+0x1a>
 8004022:	f7ff fcbb 	bl	800399c <__sinit>
 8004026:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004028:	07db      	lsls	r3, r3, #31
 800402a:	d405      	bmi.n	8004038 <_vfiprintf_r+0x2c>
 800402c:	89bb      	ldrh	r3, [r7, #12]
 800402e:	059b      	lsls	r3, r3, #22
 8004030:	d402      	bmi.n	8004038 <_vfiprintf_r+0x2c>
 8004032:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004034:	f7ff fec3 	bl	8003dbe <__retarget_lock_acquire_recursive>
 8004038:	89bb      	ldrh	r3, [r7, #12]
 800403a:	071b      	lsls	r3, r3, #28
 800403c:	d502      	bpl.n	8004044 <_vfiprintf_r+0x38>
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d113      	bne.n	800406c <_vfiprintf_r+0x60>
 8004044:	0039      	movs	r1, r7
 8004046:	9803      	ldr	r0, [sp, #12]
 8004048:	f7ff fdda 	bl	8003c00 <__swsetup_r>
 800404c:	2800      	cmp	r0, #0
 800404e:	d00d      	beq.n	800406c <_vfiprintf_r+0x60>
 8004050:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004052:	07db      	lsls	r3, r3, #31
 8004054:	d503      	bpl.n	800405e <_vfiprintf_r+0x52>
 8004056:	2001      	movs	r0, #1
 8004058:	4240      	negs	r0, r0
 800405a:	b021      	add	sp, #132	@ 0x84
 800405c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800405e:	89bb      	ldrh	r3, [r7, #12]
 8004060:	059b      	lsls	r3, r3, #22
 8004062:	d4f8      	bmi.n	8004056 <_vfiprintf_r+0x4a>
 8004064:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004066:	f7ff feab 	bl	8003dc0 <__retarget_lock_release_recursive>
 800406a:	e7f4      	b.n	8004056 <_vfiprintf_r+0x4a>
 800406c:	2300      	movs	r3, #0
 800406e:	ac08      	add	r4, sp, #32
 8004070:	6163      	str	r3, [r4, #20]
 8004072:	3320      	adds	r3, #32
 8004074:	7663      	strb	r3, [r4, #25]
 8004076:	3310      	adds	r3, #16
 8004078:	76a3      	strb	r3, [r4, #26]
 800407a:	9607      	str	r6, [sp, #28]
 800407c:	002e      	movs	r6, r5
 800407e:	7833      	ldrb	r3, [r6, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <_vfiprintf_r+0x7c>
 8004084:	2b25      	cmp	r3, #37	@ 0x25
 8004086:	d148      	bne.n	800411a <_vfiprintf_r+0x10e>
 8004088:	1b73      	subs	r3, r6, r5
 800408a:	9305      	str	r3, [sp, #20]
 800408c:	42ae      	cmp	r6, r5
 800408e:	d00b      	beq.n	80040a8 <_vfiprintf_r+0x9c>
 8004090:	002a      	movs	r2, r5
 8004092:	0039      	movs	r1, r7
 8004094:	9803      	ldr	r0, [sp, #12]
 8004096:	f7ff ffa6 	bl	8003fe6 <__sfputs_r>
 800409a:	3001      	adds	r0, #1
 800409c:	d100      	bne.n	80040a0 <_vfiprintf_r+0x94>
 800409e:	e0ae      	b.n	80041fe <_vfiprintf_r+0x1f2>
 80040a0:	6963      	ldr	r3, [r4, #20]
 80040a2:	9a05      	ldr	r2, [sp, #20]
 80040a4:	189b      	adds	r3, r3, r2
 80040a6:	6163      	str	r3, [r4, #20]
 80040a8:	7833      	ldrb	r3, [r6, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d100      	bne.n	80040b0 <_vfiprintf_r+0xa4>
 80040ae:	e0a6      	b.n	80041fe <_vfiprintf_r+0x1f2>
 80040b0:	2201      	movs	r2, #1
 80040b2:	2300      	movs	r3, #0
 80040b4:	4252      	negs	r2, r2
 80040b6:	6062      	str	r2, [r4, #4]
 80040b8:	a904      	add	r1, sp, #16
 80040ba:	3254      	adds	r2, #84	@ 0x54
 80040bc:	1852      	adds	r2, r2, r1
 80040be:	1c75      	adds	r5, r6, #1
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	60e3      	str	r3, [r4, #12]
 80040c4:	60a3      	str	r3, [r4, #8]
 80040c6:	7013      	strb	r3, [r2, #0]
 80040c8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80040ca:	4b59      	ldr	r3, [pc, #356]	@ (8004230 <_vfiprintf_r+0x224>)
 80040cc:	2205      	movs	r2, #5
 80040ce:	0018      	movs	r0, r3
 80040d0:	7829      	ldrb	r1, [r5, #0]
 80040d2:	9305      	str	r3, [sp, #20]
 80040d4:	f000 fb86 	bl	80047e4 <memchr>
 80040d8:	1c6e      	adds	r6, r5, #1
 80040da:	2800      	cmp	r0, #0
 80040dc:	d11f      	bne.n	800411e <_vfiprintf_r+0x112>
 80040de:	6822      	ldr	r2, [r4, #0]
 80040e0:	06d3      	lsls	r3, r2, #27
 80040e2:	d504      	bpl.n	80040ee <_vfiprintf_r+0xe2>
 80040e4:	2353      	movs	r3, #83	@ 0x53
 80040e6:	a904      	add	r1, sp, #16
 80040e8:	185b      	adds	r3, r3, r1
 80040ea:	2120      	movs	r1, #32
 80040ec:	7019      	strb	r1, [r3, #0]
 80040ee:	0713      	lsls	r3, r2, #28
 80040f0:	d504      	bpl.n	80040fc <_vfiprintf_r+0xf0>
 80040f2:	2353      	movs	r3, #83	@ 0x53
 80040f4:	a904      	add	r1, sp, #16
 80040f6:	185b      	adds	r3, r3, r1
 80040f8:	212b      	movs	r1, #43	@ 0x2b
 80040fa:	7019      	strb	r1, [r3, #0]
 80040fc:	782b      	ldrb	r3, [r5, #0]
 80040fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004100:	d016      	beq.n	8004130 <_vfiprintf_r+0x124>
 8004102:	002e      	movs	r6, r5
 8004104:	2100      	movs	r1, #0
 8004106:	200a      	movs	r0, #10
 8004108:	68e3      	ldr	r3, [r4, #12]
 800410a:	7832      	ldrb	r2, [r6, #0]
 800410c:	1c75      	adds	r5, r6, #1
 800410e:	3a30      	subs	r2, #48	@ 0x30
 8004110:	2a09      	cmp	r2, #9
 8004112:	d950      	bls.n	80041b6 <_vfiprintf_r+0x1aa>
 8004114:	2900      	cmp	r1, #0
 8004116:	d111      	bne.n	800413c <_vfiprintf_r+0x130>
 8004118:	e017      	b.n	800414a <_vfiprintf_r+0x13e>
 800411a:	3601      	adds	r6, #1
 800411c:	e7af      	b.n	800407e <_vfiprintf_r+0x72>
 800411e:	9b05      	ldr	r3, [sp, #20]
 8004120:	6822      	ldr	r2, [r4, #0]
 8004122:	1ac0      	subs	r0, r0, r3
 8004124:	2301      	movs	r3, #1
 8004126:	4083      	lsls	r3, r0
 8004128:	4313      	orrs	r3, r2
 800412a:	0035      	movs	r5, r6
 800412c:	6023      	str	r3, [r4, #0]
 800412e:	e7cc      	b.n	80040ca <_vfiprintf_r+0xbe>
 8004130:	9b07      	ldr	r3, [sp, #28]
 8004132:	1d19      	adds	r1, r3, #4
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	9107      	str	r1, [sp, #28]
 8004138:	2b00      	cmp	r3, #0
 800413a:	db01      	blt.n	8004140 <_vfiprintf_r+0x134>
 800413c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800413e:	e004      	b.n	800414a <_vfiprintf_r+0x13e>
 8004140:	425b      	negs	r3, r3
 8004142:	60e3      	str	r3, [r4, #12]
 8004144:	2302      	movs	r3, #2
 8004146:	4313      	orrs	r3, r2
 8004148:	6023      	str	r3, [r4, #0]
 800414a:	7833      	ldrb	r3, [r6, #0]
 800414c:	2b2e      	cmp	r3, #46	@ 0x2e
 800414e:	d10c      	bne.n	800416a <_vfiprintf_r+0x15e>
 8004150:	7873      	ldrb	r3, [r6, #1]
 8004152:	2b2a      	cmp	r3, #42	@ 0x2a
 8004154:	d134      	bne.n	80041c0 <_vfiprintf_r+0x1b4>
 8004156:	9b07      	ldr	r3, [sp, #28]
 8004158:	3602      	adds	r6, #2
 800415a:	1d1a      	adds	r2, r3, #4
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	9207      	str	r2, [sp, #28]
 8004160:	2b00      	cmp	r3, #0
 8004162:	da01      	bge.n	8004168 <_vfiprintf_r+0x15c>
 8004164:	2301      	movs	r3, #1
 8004166:	425b      	negs	r3, r3
 8004168:	9309      	str	r3, [sp, #36]	@ 0x24
 800416a:	4d32      	ldr	r5, [pc, #200]	@ (8004234 <_vfiprintf_r+0x228>)
 800416c:	2203      	movs	r2, #3
 800416e:	0028      	movs	r0, r5
 8004170:	7831      	ldrb	r1, [r6, #0]
 8004172:	f000 fb37 	bl	80047e4 <memchr>
 8004176:	2800      	cmp	r0, #0
 8004178:	d006      	beq.n	8004188 <_vfiprintf_r+0x17c>
 800417a:	2340      	movs	r3, #64	@ 0x40
 800417c:	1b40      	subs	r0, r0, r5
 800417e:	4083      	lsls	r3, r0
 8004180:	6822      	ldr	r2, [r4, #0]
 8004182:	3601      	adds	r6, #1
 8004184:	4313      	orrs	r3, r2
 8004186:	6023      	str	r3, [r4, #0]
 8004188:	7831      	ldrb	r1, [r6, #0]
 800418a:	2206      	movs	r2, #6
 800418c:	482a      	ldr	r0, [pc, #168]	@ (8004238 <_vfiprintf_r+0x22c>)
 800418e:	1c75      	adds	r5, r6, #1
 8004190:	7621      	strb	r1, [r4, #24]
 8004192:	f000 fb27 	bl	80047e4 <memchr>
 8004196:	2800      	cmp	r0, #0
 8004198:	d040      	beq.n	800421c <_vfiprintf_r+0x210>
 800419a:	4b28      	ldr	r3, [pc, #160]	@ (800423c <_vfiprintf_r+0x230>)
 800419c:	2b00      	cmp	r3, #0
 800419e:	d122      	bne.n	80041e6 <_vfiprintf_r+0x1da>
 80041a0:	2207      	movs	r2, #7
 80041a2:	9b07      	ldr	r3, [sp, #28]
 80041a4:	3307      	adds	r3, #7
 80041a6:	4393      	bics	r3, r2
 80041a8:	3308      	adds	r3, #8
 80041aa:	9307      	str	r3, [sp, #28]
 80041ac:	6963      	ldr	r3, [r4, #20]
 80041ae:	9a04      	ldr	r2, [sp, #16]
 80041b0:	189b      	adds	r3, r3, r2
 80041b2:	6163      	str	r3, [r4, #20]
 80041b4:	e762      	b.n	800407c <_vfiprintf_r+0x70>
 80041b6:	4343      	muls	r3, r0
 80041b8:	002e      	movs	r6, r5
 80041ba:	2101      	movs	r1, #1
 80041bc:	189b      	adds	r3, r3, r2
 80041be:	e7a4      	b.n	800410a <_vfiprintf_r+0xfe>
 80041c0:	2300      	movs	r3, #0
 80041c2:	200a      	movs	r0, #10
 80041c4:	0019      	movs	r1, r3
 80041c6:	3601      	adds	r6, #1
 80041c8:	6063      	str	r3, [r4, #4]
 80041ca:	7832      	ldrb	r2, [r6, #0]
 80041cc:	1c75      	adds	r5, r6, #1
 80041ce:	3a30      	subs	r2, #48	@ 0x30
 80041d0:	2a09      	cmp	r2, #9
 80041d2:	d903      	bls.n	80041dc <_vfiprintf_r+0x1d0>
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0c8      	beq.n	800416a <_vfiprintf_r+0x15e>
 80041d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80041da:	e7c6      	b.n	800416a <_vfiprintf_r+0x15e>
 80041dc:	4341      	muls	r1, r0
 80041de:	002e      	movs	r6, r5
 80041e0:	2301      	movs	r3, #1
 80041e2:	1889      	adds	r1, r1, r2
 80041e4:	e7f1      	b.n	80041ca <_vfiprintf_r+0x1be>
 80041e6:	aa07      	add	r2, sp, #28
 80041e8:	9200      	str	r2, [sp, #0]
 80041ea:	0021      	movs	r1, r4
 80041ec:	003a      	movs	r2, r7
 80041ee:	4b14      	ldr	r3, [pc, #80]	@ (8004240 <_vfiprintf_r+0x234>)
 80041f0:	9803      	ldr	r0, [sp, #12]
 80041f2:	e000      	b.n	80041f6 <_vfiprintf_r+0x1ea>
 80041f4:	bf00      	nop
 80041f6:	9004      	str	r0, [sp, #16]
 80041f8:	9b04      	ldr	r3, [sp, #16]
 80041fa:	3301      	adds	r3, #1
 80041fc:	d1d6      	bne.n	80041ac <_vfiprintf_r+0x1a0>
 80041fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004200:	07db      	lsls	r3, r3, #31
 8004202:	d405      	bmi.n	8004210 <_vfiprintf_r+0x204>
 8004204:	89bb      	ldrh	r3, [r7, #12]
 8004206:	059b      	lsls	r3, r3, #22
 8004208:	d402      	bmi.n	8004210 <_vfiprintf_r+0x204>
 800420a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800420c:	f7ff fdd8 	bl	8003dc0 <__retarget_lock_release_recursive>
 8004210:	89bb      	ldrh	r3, [r7, #12]
 8004212:	065b      	lsls	r3, r3, #25
 8004214:	d500      	bpl.n	8004218 <_vfiprintf_r+0x20c>
 8004216:	e71e      	b.n	8004056 <_vfiprintf_r+0x4a>
 8004218:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800421a:	e71e      	b.n	800405a <_vfiprintf_r+0x4e>
 800421c:	aa07      	add	r2, sp, #28
 800421e:	9200      	str	r2, [sp, #0]
 8004220:	0021      	movs	r1, r4
 8004222:	003a      	movs	r2, r7
 8004224:	4b06      	ldr	r3, [pc, #24]	@ (8004240 <_vfiprintf_r+0x234>)
 8004226:	9803      	ldr	r0, [sp, #12]
 8004228:	f000 f87c 	bl	8004324 <_printf_i>
 800422c:	e7e3      	b.n	80041f6 <_vfiprintf_r+0x1ea>
 800422e:	46c0      	nop			@ (mov r8, r8)
 8004230:	08004f18 	.word	0x08004f18
 8004234:	08004f1e 	.word	0x08004f1e
 8004238:	08004f22 	.word	0x08004f22
 800423c:	00000000 	.word	0x00000000
 8004240:	08003fe7 	.word	0x08003fe7

08004244 <_printf_common>:
 8004244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004246:	0016      	movs	r6, r2
 8004248:	9301      	str	r3, [sp, #4]
 800424a:	688a      	ldr	r2, [r1, #8]
 800424c:	690b      	ldr	r3, [r1, #16]
 800424e:	000c      	movs	r4, r1
 8004250:	9000      	str	r0, [sp, #0]
 8004252:	4293      	cmp	r3, r2
 8004254:	da00      	bge.n	8004258 <_printf_common+0x14>
 8004256:	0013      	movs	r3, r2
 8004258:	0022      	movs	r2, r4
 800425a:	6033      	str	r3, [r6, #0]
 800425c:	3243      	adds	r2, #67	@ 0x43
 800425e:	7812      	ldrb	r2, [r2, #0]
 8004260:	2a00      	cmp	r2, #0
 8004262:	d001      	beq.n	8004268 <_printf_common+0x24>
 8004264:	3301      	adds	r3, #1
 8004266:	6033      	str	r3, [r6, #0]
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	069b      	lsls	r3, r3, #26
 800426c:	d502      	bpl.n	8004274 <_printf_common+0x30>
 800426e:	6833      	ldr	r3, [r6, #0]
 8004270:	3302      	adds	r3, #2
 8004272:	6033      	str	r3, [r6, #0]
 8004274:	6822      	ldr	r2, [r4, #0]
 8004276:	2306      	movs	r3, #6
 8004278:	0015      	movs	r5, r2
 800427a:	401d      	ands	r5, r3
 800427c:	421a      	tst	r2, r3
 800427e:	d027      	beq.n	80042d0 <_printf_common+0x8c>
 8004280:	0023      	movs	r3, r4
 8004282:	3343      	adds	r3, #67	@ 0x43
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	1e5a      	subs	r2, r3, #1
 8004288:	4193      	sbcs	r3, r2
 800428a:	6822      	ldr	r2, [r4, #0]
 800428c:	0692      	lsls	r2, r2, #26
 800428e:	d430      	bmi.n	80042f2 <_printf_common+0xae>
 8004290:	0022      	movs	r2, r4
 8004292:	9901      	ldr	r1, [sp, #4]
 8004294:	9800      	ldr	r0, [sp, #0]
 8004296:	9d08      	ldr	r5, [sp, #32]
 8004298:	3243      	adds	r2, #67	@ 0x43
 800429a:	47a8      	blx	r5
 800429c:	3001      	adds	r0, #1
 800429e:	d025      	beq.n	80042ec <_printf_common+0xa8>
 80042a0:	2206      	movs	r2, #6
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	2500      	movs	r5, #0
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d105      	bne.n	80042b8 <_printf_common+0x74>
 80042ac:	6833      	ldr	r3, [r6, #0]
 80042ae:	68e5      	ldr	r5, [r4, #12]
 80042b0:	1aed      	subs	r5, r5, r3
 80042b2:	43eb      	mvns	r3, r5
 80042b4:	17db      	asrs	r3, r3, #31
 80042b6:	401d      	ands	r5, r3
 80042b8:	68a3      	ldr	r3, [r4, #8]
 80042ba:	6922      	ldr	r2, [r4, #16]
 80042bc:	4293      	cmp	r3, r2
 80042be:	dd01      	ble.n	80042c4 <_printf_common+0x80>
 80042c0:	1a9b      	subs	r3, r3, r2
 80042c2:	18ed      	adds	r5, r5, r3
 80042c4:	2600      	movs	r6, #0
 80042c6:	42b5      	cmp	r5, r6
 80042c8:	d120      	bne.n	800430c <_printf_common+0xc8>
 80042ca:	2000      	movs	r0, #0
 80042cc:	e010      	b.n	80042f0 <_printf_common+0xac>
 80042ce:	3501      	adds	r5, #1
 80042d0:	68e3      	ldr	r3, [r4, #12]
 80042d2:	6832      	ldr	r2, [r6, #0]
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	42ab      	cmp	r3, r5
 80042d8:	ddd2      	ble.n	8004280 <_printf_common+0x3c>
 80042da:	0022      	movs	r2, r4
 80042dc:	2301      	movs	r3, #1
 80042de:	9901      	ldr	r1, [sp, #4]
 80042e0:	9800      	ldr	r0, [sp, #0]
 80042e2:	9f08      	ldr	r7, [sp, #32]
 80042e4:	3219      	adds	r2, #25
 80042e6:	47b8      	blx	r7
 80042e8:	3001      	adds	r0, #1
 80042ea:	d1f0      	bne.n	80042ce <_printf_common+0x8a>
 80042ec:	2001      	movs	r0, #1
 80042ee:	4240      	negs	r0, r0
 80042f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80042f2:	2030      	movs	r0, #48	@ 0x30
 80042f4:	18e1      	adds	r1, r4, r3
 80042f6:	3143      	adds	r1, #67	@ 0x43
 80042f8:	7008      	strb	r0, [r1, #0]
 80042fa:	0021      	movs	r1, r4
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	3145      	adds	r1, #69	@ 0x45
 8004300:	7809      	ldrb	r1, [r1, #0]
 8004302:	18a2      	adds	r2, r4, r2
 8004304:	3243      	adds	r2, #67	@ 0x43
 8004306:	3302      	adds	r3, #2
 8004308:	7011      	strb	r1, [r2, #0]
 800430a:	e7c1      	b.n	8004290 <_printf_common+0x4c>
 800430c:	0022      	movs	r2, r4
 800430e:	2301      	movs	r3, #1
 8004310:	9901      	ldr	r1, [sp, #4]
 8004312:	9800      	ldr	r0, [sp, #0]
 8004314:	9f08      	ldr	r7, [sp, #32]
 8004316:	321a      	adds	r2, #26
 8004318:	47b8      	blx	r7
 800431a:	3001      	adds	r0, #1
 800431c:	d0e6      	beq.n	80042ec <_printf_common+0xa8>
 800431e:	3601      	adds	r6, #1
 8004320:	e7d1      	b.n	80042c6 <_printf_common+0x82>
	...

08004324 <_printf_i>:
 8004324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004326:	b08b      	sub	sp, #44	@ 0x2c
 8004328:	9206      	str	r2, [sp, #24]
 800432a:	000a      	movs	r2, r1
 800432c:	3243      	adds	r2, #67	@ 0x43
 800432e:	9307      	str	r3, [sp, #28]
 8004330:	9005      	str	r0, [sp, #20]
 8004332:	9203      	str	r2, [sp, #12]
 8004334:	7e0a      	ldrb	r2, [r1, #24]
 8004336:	000c      	movs	r4, r1
 8004338:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800433a:	2a78      	cmp	r2, #120	@ 0x78
 800433c:	d809      	bhi.n	8004352 <_printf_i+0x2e>
 800433e:	2a62      	cmp	r2, #98	@ 0x62
 8004340:	d80b      	bhi.n	800435a <_printf_i+0x36>
 8004342:	2a00      	cmp	r2, #0
 8004344:	d100      	bne.n	8004348 <_printf_i+0x24>
 8004346:	e0ba      	b.n	80044be <_printf_i+0x19a>
 8004348:	497a      	ldr	r1, [pc, #488]	@ (8004534 <_printf_i+0x210>)
 800434a:	9104      	str	r1, [sp, #16]
 800434c:	2a58      	cmp	r2, #88	@ 0x58
 800434e:	d100      	bne.n	8004352 <_printf_i+0x2e>
 8004350:	e08e      	b.n	8004470 <_printf_i+0x14c>
 8004352:	0025      	movs	r5, r4
 8004354:	3542      	adds	r5, #66	@ 0x42
 8004356:	702a      	strb	r2, [r5, #0]
 8004358:	e022      	b.n	80043a0 <_printf_i+0x7c>
 800435a:	0010      	movs	r0, r2
 800435c:	3863      	subs	r0, #99	@ 0x63
 800435e:	2815      	cmp	r0, #21
 8004360:	d8f7      	bhi.n	8004352 <_printf_i+0x2e>
 8004362:	f7fb fecd 	bl	8000100 <__gnu_thumb1_case_shi>
 8004366:	0016      	.short	0x0016
 8004368:	fff6001f 	.word	0xfff6001f
 800436c:	fff6fff6 	.word	0xfff6fff6
 8004370:	001ffff6 	.word	0x001ffff6
 8004374:	fff6fff6 	.word	0xfff6fff6
 8004378:	fff6fff6 	.word	0xfff6fff6
 800437c:	0036009f 	.word	0x0036009f
 8004380:	fff6007e 	.word	0xfff6007e
 8004384:	00b0fff6 	.word	0x00b0fff6
 8004388:	0036fff6 	.word	0x0036fff6
 800438c:	fff6fff6 	.word	0xfff6fff6
 8004390:	0082      	.short	0x0082
 8004392:	0025      	movs	r5, r4
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	3542      	adds	r5, #66	@ 0x42
 8004398:	1d11      	adds	r1, r2, #4
 800439a:	6019      	str	r1, [r3, #0]
 800439c:	6813      	ldr	r3, [r2, #0]
 800439e:	702b      	strb	r3, [r5, #0]
 80043a0:	2301      	movs	r3, #1
 80043a2:	e09e      	b.n	80044e2 <_printf_i+0x1be>
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	6809      	ldr	r1, [r1, #0]
 80043a8:	1d02      	adds	r2, r0, #4
 80043aa:	060d      	lsls	r5, r1, #24
 80043ac:	d50b      	bpl.n	80043c6 <_printf_i+0xa2>
 80043ae:	6806      	ldr	r6, [r0, #0]
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	2e00      	cmp	r6, #0
 80043b4:	da03      	bge.n	80043be <_printf_i+0x9a>
 80043b6:	232d      	movs	r3, #45	@ 0x2d
 80043b8:	9a03      	ldr	r2, [sp, #12]
 80043ba:	4276      	negs	r6, r6
 80043bc:	7013      	strb	r3, [r2, #0]
 80043be:	4b5d      	ldr	r3, [pc, #372]	@ (8004534 <_printf_i+0x210>)
 80043c0:	270a      	movs	r7, #10
 80043c2:	9304      	str	r3, [sp, #16]
 80043c4:	e018      	b.n	80043f8 <_printf_i+0xd4>
 80043c6:	6806      	ldr	r6, [r0, #0]
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	0649      	lsls	r1, r1, #25
 80043cc:	d5f1      	bpl.n	80043b2 <_printf_i+0x8e>
 80043ce:	b236      	sxth	r6, r6
 80043d0:	e7ef      	b.n	80043b2 <_printf_i+0x8e>
 80043d2:	6808      	ldr	r0, [r1, #0]
 80043d4:	6819      	ldr	r1, [r3, #0]
 80043d6:	c940      	ldmia	r1!, {r6}
 80043d8:	0605      	lsls	r5, r0, #24
 80043da:	d402      	bmi.n	80043e2 <_printf_i+0xbe>
 80043dc:	0640      	lsls	r0, r0, #25
 80043de:	d500      	bpl.n	80043e2 <_printf_i+0xbe>
 80043e0:	b2b6      	uxth	r6, r6
 80043e2:	6019      	str	r1, [r3, #0]
 80043e4:	4b53      	ldr	r3, [pc, #332]	@ (8004534 <_printf_i+0x210>)
 80043e6:	270a      	movs	r7, #10
 80043e8:	9304      	str	r3, [sp, #16]
 80043ea:	2a6f      	cmp	r2, #111	@ 0x6f
 80043ec:	d100      	bne.n	80043f0 <_printf_i+0xcc>
 80043ee:	3f02      	subs	r7, #2
 80043f0:	0023      	movs	r3, r4
 80043f2:	2200      	movs	r2, #0
 80043f4:	3343      	adds	r3, #67	@ 0x43
 80043f6:	701a      	strb	r2, [r3, #0]
 80043f8:	6863      	ldr	r3, [r4, #4]
 80043fa:	60a3      	str	r3, [r4, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	db06      	blt.n	800440e <_printf_i+0xea>
 8004400:	2104      	movs	r1, #4
 8004402:	6822      	ldr	r2, [r4, #0]
 8004404:	9d03      	ldr	r5, [sp, #12]
 8004406:	438a      	bics	r2, r1
 8004408:	6022      	str	r2, [r4, #0]
 800440a:	4333      	orrs	r3, r6
 800440c:	d00c      	beq.n	8004428 <_printf_i+0x104>
 800440e:	9d03      	ldr	r5, [sp, #12]
 8004410:	0030      	movs	r0, r6
 8004412:	0039      	movs	r1, r7
 8004414:	f7fb ff04 	bl	8000220 <__aeabi_uidivmod>
 8004418:	9b04      	ldr	r3, [sp, #16]
 800441a:	3d01      	subs	r5, #1
 800441c:	5c5b      	ldrb	r3, [r3, r1]
 800441e:	702b      	strb	r3, [r5, #0]
 8004420:	0033      	movs	r3, r6
 8004422:	0006      	movs	r6, r0
 8004424:	429f      	cmp	r7, r3
 8004426:	d9f3      	bls.n	8004410 <_printf_i+0xec>
 8004428:	2f08      	cmp	r7, #8
 800442a:	d109      	bne.n	8004440 <_printf_i+0x11c>
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	07db      	lsls	r3, r3, #31
 8004430:	d506      	bpl.n	8004440 <_printf_i+0x11c>
 8004432:	6862      	ldr	r2, [r4, #4]
 8004434:	6923      	ldr	r3, [r4, #16]
 8004436:	429a      	cmp	r2, r3
 8004438:	dc02      	bgt.n	8004440 <_printf_i+0x11c>
 800443a:	2330      	movs	r3, #48	@ 0x30
 800443c:	3d01      	subs	r5, #1
 800443e:	702b      	strb	r3, [r5, #0]
 8004440:	9b03      	ldr	r3, [sp, #12]
 8004442:	1b5b      	subs	r3, r3, r5
 8004444:	6123      	str	r3, [r4, #16]
 8004446:	9b07      	ldr	r3, [sp, #28]
 8004448:	0021      	movs	r1, r4
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	9805      	ldr	r0, [sp, #20]
 800444e:	9b06      	ldr	r3, [sp, #24]
 8004450:	aa09      	add	r2, sp, #36	@ 0x24
 8004452:	f7ff fef7 	bl	8004244 <_printf_common>
 8004456:	3001      	adds	r0, #1
 8004458:	d148      	bne.n	80044ec <_printf_i+0x1c8>
 800445a:	2001      	movs	r0, #1
 800445c:	4240      	negs	r0, r0
 800445e:	b00b      	add	sp, #44	@ 0x2c
 8004460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004462:	2220      	movs	r2, #32
 8004464:	6809      	ldr	r1, [r1, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	6022      	str	r2, [r4, #0]
 800446a:	2278      	movs	r2, #120	@ 0x78
 800446c:	4932      	ldr	r1, [pc, #200]	@ (8004538 <_printf_i+0x214>)
 800446e:	9104      	str	r1, [sp, #16]
 8004470:	0021      	movs	r1, r4
 8004472:	3145      	adds	r1, #69	@ 0x45
 8004474:	700a      	strb	r2, [r1, #0]
 8004476:	6819      	ldr	r1, [r3, #0]
 8004478:	6822      	ldr	r2, [r4, #0]
 800447a:	c940      	ldmia	r1!, {r6}
 800447c:	0610      	lsls	r0, r2, #24
 800447e:	d402      	bmi.n	8004486 <_printf_i+0x162>
 8004480:	0650      	lsls	r0, r2, #25
 8004482:	d500      	bpl.n	8004486 <_printf_i+0x162>
 8004484:	b2b6      	uxth	r6, r6
 8004486:	6019      	str	r1, [r3, #0]
 8004488:	07d3      	lsls	r3, r2, #31
 800448a:	d502      	bpl.n	8004492 <_printf_i+0x16e>
 800448c:	2320      	movs	r3, #32
 800448e:	4313      	orrs	r3, r2
 8004490:	6023      	str	r3, [r4, #0]
 8004492:	2e00      	cmp	r6, #0
 8004494:	d001      	beq.n	800449a <_printf_i+0x176>
 8004496:	2710      	movs	r7, #16
 8004498:	e7aa      	b.n	80043f0 <_printf_i+0xcc>
 800449a:	2220      	movs	r2, #32
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	4393      	bics	r3, r2
 80044a0:	6023      	str	r3, [r4, #0]
 80044a2:	e7f8      	b.n	8004496 <_printf_i+0x172>
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	680d      	ldr	r5, [r1, #0]
 80044a8:	1d10      	adds	r0, r2, #4
 80044aa:	6949      	ldr	r1, [r1, #20]
 80044ac:	6018      	str	r0, [r3, #0]
 80044ae:	6813      	ldr	r3, [r2, #0]
 80044b0:	062e      	lsls	r6, r5, #24
 80044b2:	d501      	bpl.n	80044b8 <_printf_i+0x194>
 80044b4:	6019      	str	r1, [r3, #0]
 80044b6:	e002      	b.n	80044be <_printf_i+0x19a>
 80044b8:	066d      	lsls	r5, r5, #25
 80044ba:	d5fb      	bpl.n	80044b4 <_printf_i+0x190>
 80044bc:	8019      	strh	r1, [r3, #0]
 80044be:	2300      	movs	r3, #0
 80044c0:	9d03      	ldr	r5, [sp, #12]
 80044c2:	6123      	str	r3, [r4, #16]
 80044c4:	e7bf      	b.n	8004446 <_printf_i+0x122>
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	1d11      	adds	r1, r2, #4
 80044ca:	6019      	str	r1, [r3, #0]
 80044cc:	6815      	ldr	r5, [r2, #0]
 80044ce:	2100      	movs	r1, #0
 80044d0:	0028      	movs	r0, r5
 80044d2:	6862      	ldr	r2, [r4, #4]
 80044d4:	f000 f986 	bl	80047e4 <memchr>
 80044d8:	2800      	cmp	r0, #0
 80044da:	d001      	beq.n	80044e0 <_printf_i+0x1bc>
 80044dc:	1b40      	subs	r0, r0, r5
 80044de:	6060      	str	r0, [r4, #4]
 80044e0:	6863      	ldr	r3, [r4, #4]
 80044e2:	6123      	str	r3, [r4, #16]
 80044e4:	2300      	movs	r3, #0
 80044e6:	9a03      	ldr	r2, [sp, #12]
 80044e8:	7013      	strb	r3, [r2, #0]
 80044ea:	e7ac      	b.n	8004446 <_printf_i+0x122>
 80044ec:	002a      	movs	r2, r5
 80044ee:	6923      	ldr	r3, [r4, #16]
 80044f0:	9906      	ldr	r1, [sp, #24]
 80044f2:	9805      	ldr	r0, [sp, #20]
 80044f4:	9d07      	ldr	r5, [sp, #28]
 80044f6:	47a8      	blx	r5
 80044f8:	3001      	adds	r0, #1
 80044fa:	d0ae      	beq.n	800445a <_printf_i+0x136>
 80044fc:	6823      	ldr	r3, [r4, #0]
 80044fe:	079b      	lsls	r3, r3, #30
 8004500:	d415      	bmi.n	800452e <_printf_i+0x20a>
 8004502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004504:	68e0      	ldr	r0, [r4, #12]
 8004506:	4298      	cmp	r0, r3
 8004508:	daa9      	bge.n	800445e <_printf_i+0x13a>
 800450a:	0018      	movs	r0, r3
 800450c:	e7a7      	b.n	800445e <_printf_i+0x13a>
 800450e:	0022      	movs	r2, r4
 8004510:	2301      	movs	r3, #1
 8004512:	9906      	ldr	r1, [sp, #24]
 8004514:	9805      	ldr	r0, [sp, #20]
 8004516:	9e07      	ldr	r6, [sp, #28]
 8004518:	3219      	adds	r2, #25
 800451a:	47b0      	blx	r6
 800451c:	3001      	adds	r0, #1
 800451e:	d09c      	beq.n	800445a <_printf_i+0x136>
 8004520:	3501      	adds	r5, #1
 8004522:	68e3      	ldr	r3, [r4, #12]
 8004524:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004526:	1a9b      	subs	r3, r3, r2
 8004528:	42ab      	cmp	r3, r5
 800452a:	dcf0      	bgt.n	800450e <_printf_i+0x1ea>
 800452c:	e7e9      	b.n	8004502 <_printf_i+0x1de>
 800452e:	2500      	movs	r5, #0
 8004530:	e7f7      	b.n	8004522 <_printf_i+0x1fe>
 8004532:	46c0      	nop			@ (mov r8, r8)
 8004534:	08004f29 	.word	0x08004f29
 8004538:	08004f3a 	.word	0x08004f3a

0800453c <__sflush_r>:
 800453c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800453e:	220c      	movs	r2, #12
 8004540:	5e8b      	ldrsh	r3, [r1, r2]
 8004542:	0005      	movs	r5, r0
 8004544:	000c      	movs	r4, r1
 8004546:	071a      	lsls	r2, r3, #28
 8004548:	d456      	bmi.n	80045f8 <__sflush_r+0xbc>
 800454a:	684a      	ldr	r2, [r1, #4]
 800454c:	2a00      	cmp	r2, #0
 800454e:	dc02      	bgt.n	8004556 <__sflush_r+0x1a>
 8004550:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004552:	2a00      	cmp	r2, #0
 8004554:	dd4e      	ble.n	80045f4 <__sflush_r+0xb8>
 8004556:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004558:	2f00      	cmp	r7, #0
 800455a:	d04b      	beq.n	80045f4 <__sflush_r+0xb8>
 800455c:	2200      	movs	r2, #0
 800455e:	2080      	movs	r0, #128	@ 0x80
 8004560:	682e      	ldr	r6, [r5, #0]
 8004562:	602a      	str	r2, [r5, #0]
 8004564:	001a      	movs	r2, r3
 8004566:	0140      	lsls	r0, r0, #5
 8004568:	6a21      	ldr	r1, [r4, #32]
 800456a:	4002      	ands	r2, r0
 800456c:	4203      	tst	r3, r0
 800456e:	d033      	beq.n	80045d8 <__sflush_r+0x9c>
 8004570:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004572:	89a3      	ldrh	r3, [r4, #12]
 8004574:	075b      	lsls	r3, r3, #29
 8004576:	d506      	bpl.n	8004586 <__sflush_r+0x4a>
 8004578:	6863      	ldr	r3, [r4, #4]
 800457a:	1ad2      	subs	r2, r2, r3
 800457c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <__sflush_r+0x4a>
 8004582:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004584:	1ad2      	subs	r2, r2, r3
 8004586:	2300      	movs	r3, #0
 8004588:	0028      	movs	r0, r5
 800458a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800458c:	6a21      	ldr	r1, [r4, #32]
 800458e:	47b8      	blx	r7
 8004590:	89a2      	ldrh	r2, [r4, #12]
 8004592:	1c43      	adds	r3, r0, #1
 8004594:	d106      	bne.n	80045a4 <__sflush_r+0x68>
 8004596:	6829      	ldr	r1, [r5, #0]
 8004598:	291d      	cmp	r1, #29
 800459a:	d846      	bhi.n	800462a <__sflush_r+0xee>
 800459c:	4b29      	ldr	r3, [pc, #164]	@ (8004644 <__sflush_r+0x108>)
 800459e:	40cb      	lsrs	r3, r1
 80045a0:	07db      	lsls	r3, r3, #31
 80045a2:	d542      	bpl.n	800462a <__sflush_r+0xee>
 80045a4:	2300      	movs	r3, #0
 80045a6:	6063      	str	r3, [r4, #4]
 80045a8:	6923      	ldr	r3, [r4, #16]
 80045aa:	6023      	str	r3, [r4, #0]
 80045ac:	04d2      	lsls	r2, r2, #19
 80045ae:	d505      	bpl.n	80045bc <__sflush_r+0x80>
 80045b0:	1c43      	adds	r3, r0, #1
 80045b2:	d102      	bne.n	80045ba <__sflush_r+0x7e>
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d100      	bne.n	80045bc <__sflush_r+0x80>
 80045ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80045bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045be:	602e      	str	r6, [r5, #0]
 80045c0:	2900      	cmp	r1, #0
 80045c2:	d017      	beq.n	80045f4 <__sflush_r+0xb8>
 80045c4:	0023      	movs	r3, r4
 80045c6:	3344      	adds	r3, #68	@ 0x44
 80045c8:	4299      	cmp	r1, r3
 80045ca:	d002      	beq.n	80045d2 <__sflush_r+0x96>
 80045cc:	0028      	movs	r0, r5
 80045ce:	f7ff fbf9 	bl	8003dc4 <_free_r>
 80045d2:	2300      	movs	r3, #0
 80045d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80045d6:	e00d      	b.n	80045f4 <__sflush_r+0xb8>
 80045d8:	2301      	movs	r3, #1
 80045da:	0028      	movs	r0, r5
 80045dc:	47b8      	blx	r7
 80045de:	0002      	movs	r2, r0
 80045e0:	1c43      	adds	r3, r0, #1
 80045e2:	d1c6      	bne.n	8004572 <__sflush_r+0x36>
 80045e4:	682b      	ldr	r3, [r5, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0c3      	beq.n	8004572 <__sflush_r+0x36>
 80045ea:	2b1d      	cmp	r3, #29
 80045ec:	d001      	beq.n	80045f2 <__sflush_r+0xb6>
 80045ee:	2b16      	cmp	r3, #22
 80045f0:	d11a      	bne.n	8004628 <__sflush_r+0xec>
 80045f2:	602e      	str	r6, [r5, #0]
 80045f4:	2000      	movs	r0, #0
 80045f6:	e01e      	b.n	8004636 <__sflush_r+0xfa>
 80045f8:	690e      	ldr	r6, [r1, #16]
 80045fa:	2e00      	cmp	r6, #0
 80045fc:	d0fa      	beq.n	80045f4 <__sflush_r+0xb8>
 80045fe:	680f      	ldr	r7, [r1, #0]
 8004600:	600e      	str	r6, [r1, #0]
 8004602:	1bba      	subs	r2, r7, r6
 8004604:	9201      	str	r2, [sp, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	079b      	lsls	r3, r3, #30
 800460a:	d100      	bne.n	800460e <__sflush_r+0xd2>
 800460c:	694a      	ldr	r2, [r1, #20]
 800460e:	60a2      	str	r2, [r4, #8]
 8004610:	9b01      	ldr	r3, [sp, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	ddee      	ble.n	80045f4 <__sflush_r+0xb8>
 8004616:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004618:	0032      	movs	r2, r6
 800461a:	001f      	movs	r7, r3
 800461c:	0028      	movs	r0, r5
 800461e:	9b01      	ldr	r3, [sp, #4]
 8004620:	6a21      	ldr	r1, [r4, #32]
 8004622:	47b8      	blx	r7
 8004624:	2800      	cmp	r0, #0
 8004626:	dc07      	bgt.n	8004638 <__sflush_r+0xfc>
 8004628:	89a2      	ldrh	r2, [r4, #12]
 800462a:	2340      	movs	r3, #64	@ 0x40
 800462c:	2001      	movs	r0, #1
 800462e:	4313      	orrs	r3, r2
 8004630:	b21b      	sxth	r3, r3
 8004632:	81a3      	strh	r3, [r4, #12]
 8004634:	4240      	negs	r0, r0
 8004636:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004638:	9b01      	ldr	r3, [sp, #4]
 800463a:	1836      	adds	r6, r6, r0
 800463c:	1a1b      	subs	r3, r3, r0
 800463e:	9301      	str	r3, [sp, #4]
 8004640:	e7e6      	b.n	8004610 <__sflush_r+0xd4>
 8004642:	46c0      	nop			@ (mov r8, r8)
 8004644:	20400001 	.word	0x20400001

08004648 <_fflush_r>:
 8004648:	690b      	ldr	r3, [r1, #16]
 800464a:	b570      	push	{r4, r5, r6, lr}
 800464c:	0005      	movs	r5, r0
 800464e:	000c      	movs	r4, r1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d102      	bne.n	800465a <_fflush_r+0x12>
 8004654:	2500      	movs	r5, #0
 8004656:	0028      	movs	r0, r5
 8004658:	bd70      	pop	{r4, r5, r6, pc}
 800465a:	2800      	cmp	r0, #0
 800465c:	d004      	beq.n	8004668 <_fflush_r+0x20>
 800465e:	6a03      	ldr	r3, [r0, #32]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <_fflush_r+0x20>
 8004664:	f7ff f99a 	bl	800399c <__sinit>
 8004668:	220c      	movs	r2, #12
 800466a:	5ea3      	ldrsh	r3, [r4, r2]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f1      	beq.n	8004654 <_fflush_r+0xc>
 8004670:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004672:	07d2      	lsls	r2, r2, #31
 8004674:	d404      	bmi.n	8004680 <_fflush_r+0x38>
 8004676:	059b      	lsls	r3, r3, #22
 8004678:	d402      	bmi.n	8004680 <_fflush_r+0x38>
 800467a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800467c:	f7ff fb9f 	bl	8003dbe <__retarget_lock_acquire_recursive>
 8004680:	0028      	movs	r0, r5
 8004682:	0021      	movs	r1, r4
 8004684:	f7ff ff5a 	bl	800453c <__sflush_r>
 8004688:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800468a:	0005      	movs	r5, r0
 800468c:	07db      	lsls	r3, r3, #31
 800468e:	d4e2      	bmi.n	8004656 <_fflush_r+0xe>
 8004690:	89a3      	ldrh	r3, [r4, #12]
 8004692:	059b      	lsls	r3, r3, #22
 8004694:	d4df      	bmi.n	8004656 <_fflush_r+0xe>
 8004696:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004698:	f7ff fb92 	bl	8003dc0 <__retarget_lock_release_recursive>
 800469c:	e7db      	b.n	8004656 <_fflush_r+0xe>
	...

080046a0 <__swhatbuf_r>:
 80046a0:	b570      	push	{r4, r5, r6, lr}
 80046a2:	000e      	movs	r6, r1
 80046a4:	001d      	movs	r5, r3
 80046a6:	230e      	movs	r3, #14
 80046a8:	5ec9      	ldrsh	r1, [r1, r3]
 80046aa:	0014      	movs	r4, r2
 80046ac:	b096      	sub	sp, #88	@ 0x58
 80046ae:	2900      	cmp	r1, #0
 80046b0:	da0c      	bge.n	80046cc <__swhatbuf_r+0x2c>
 80046b2:	89b2      	ldrh	r2, [r6, #12]
 80046b4:	2380      	movs	r3, #128	@ 0x80
 80046b6:	0011      	movs	r1, r2
 80046b8:	4019      	ands	r1, r3
 80046ba:	421a      	tst	r2, r3
 80046bc:	d114      	bne.n	80046e8 <__swhatbuf_r+0x48>
 80046be:	2380      	movs	r3, #128	@ 0x80
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	2000      	movs	r0, #0
 80046c4:	6029      	str	r1, [r5, #0]
 80046c6:	6023      	str	r3, [r4, #0]
 80046c8:	b016      	add	sp, #88	@ 0x58
 80046ca:	bd70      	pop	{r4, r5, r6, pc}
 80046cc:	466a      	mov	r2, sp
 80046ce:	f000 f853 	bl	8004778 <_fstat_r>
 80046d2:	2800      	cmp	r0, #0
 80046d4:	dbed      	blt.n	80046b2 <__swhatbuf_r+0x12>
 80046d6:	23f0      	movs	r3, #240	@ 0xf0
 80046d8:	9901      	ldr	r1, [sp, #4]
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	4019      	ands	r1, r3
 80046de:	4b04      	ldr	r3, [pc, #16]	@ (80046f0 <__swhatbuf_r+0x50>)
 80046e0:	18c9      	adds	r1, r1, r3
 80046e2:	424b      	negs	r3, r1
 80046e4:	4159      	adcs	r1, r3
 80046e6:	e7ea      	b.n	80046be <__swhatbuf_r+0x1e>
 80046e8:	2100      	movs	r1, #0
 80046ea:	2340      	movs	r3, #64	@ 0x40
 80046ec:	e7e9      	b.n	80046c2 <__swhatbuf_r+0x22>
 80046ee:	46c0      	nop			@ (mov r8, r8)
 80046f0:	ffffe000 	.word	0xffffe000

080046f4 <__smakebuf_r>:
 80046f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046f6:	2602      	movs	r6, #2
 80046f8:	898b      	ldrh	r3, [r1, #12]
 80046fa:	0005      	movs	r5, r0
 80046fc:	000c      	movs	r4, r1
 80046fe:	b085      	sub	sp, #20
 8004700:	4233      	tst	r3, r6
 8004702:	d007      	beq.n	8004714 <__smakebuf_r+0x20>
 8004704:	0023      	movs	r3, r4
 8004706:	3347      	adds	r3, #71	@ 0x47
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	6123      	str	r3, [r4, #16]
 800470c:	2301      	movs	r3, #1
 800470e:	6163      	str	r3, [r4, #20]
 8004710:	b005      	add	sp, #20
 8004712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004714:	ab03      	add	r3, sp, #12
 8004716:	aa02      	add	r2, sp, #8
 8004718:	f7ff ffc2 	bl	80046a0 <__swhatbuf_r>
 800471c:	9f02      	ldr	r7, [sp, #8]
 800471e:	9001      	str	r0, [sp, #4]
 8004720:	0039      	movs	r1, r7
 8004722:	0028      	movs	r0, r5
 8004724:	f7ff fbba 	bl	8003e9c <_malloc_r>
 8004728:	2800      	cmp	r0, #0
 800472a:	d108      	bne.n	800473e <__smakebuf_r+0x4a>
 800472c:	220c      	movs	r2, #12
 800472e:	5ea3      	ldrsh	r3, [r4, r2]
 8004730:	059a      	lsls	r2, r3, #22
 8004732:	d4ed      	bmi.n	8004710 <__smakebuf_r+0x1c>
 8004734:	2203      	movs	r2, #3
 8004736:	4393      	bics	r3, r2
 8004738:	431e      	orrs	r6, r3
 800473a:	81a6      	strh	r6, [r4, #12]
 800473c:	e7e2      	b.n	8004704 <__smakebuf_r+0x10>
 800473e:	2380      	movs	r3, #128	@ 0x80
 8004740:	89a2      	ldrh	r2, [r4, #12]
 8004742:	6020      	str	r0, [r4, #0]
 8004744:	4313      	orrs	r3, r2
 8004746:	81a3      	strh	r3, [r4, #12]
 8004748:	9b03      	ldr	r3, [sp, #12]
 800474a:	6120      	str	r0, [r4, #16]
 800474c:	6167      	str	r7, [r4, #20]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00c      	beq.n	800476c <__smakebuf_r+0x78>
 8004752:	0028      	movs	r0, r5
 8004754:	230e      	movs	r3, #14
 8004756:	5ee1      	ldrsh	r1, [r4, r3]
 8004758:	f000 f820 	bl	800479c <_isatty_r>
 800475c:	2800      	cmp	r0, #0
 800475e:	d005      	beq.n	800476c <__smakebuf_r+0x78>
 8004760:	2303      	movs	r3, #3
 8004762:	89a2      	ldrh	r2, [r4, #12]
 8004764:	439a      	bics	r2, r3
 8004766:	3b02      	subs	r3, #2
 8004768:	4313      	orrs	r3, r2
 800476a:	81a3      	strh	r3, [r4, #12]
 800476c:	89a3      	ldrh	r3, [r4, #12]
 800476e:	9a01      	ldr	r2, [sp, #4]
 8004770:	4313      	orrs	r3, r2
 8004772:	81a3      	strh	r3, [r4, #12]
 8004774:	e7cc      	b.n	8004710 <__smakebuf_r+0x1c>
	...

08004778 <_fstat_r>:
 8004778:	2300      	movs	r3, #0
 800477a:	b570      	push	{r4, r5, r6, lr}
 800477c:	4d06      	ldr	r5, [pc, #24]	@ (8004798 <_fstat_r+0x20>)
 800477e:	0004      	movs	r4, r0
 8004780:	0008      	movs	r0, r1
 8004782:	0011      	movs	r1, r2
 8004784:	602b      	str	r3, [r5, #0]
 8004786:	f7fc fadb 	bl	8000d40 <_fstat>
 800478a:	1c43      	adds	r3, r0, #1
 800478c:	d103      	bne.n	8004796 <_fstat_r+0x1e>
 800478e:	682b      	ldr	r3, [r5, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d000      	beq.n	8004796 <_fstat_r+0x1e>
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	bd70      	pop	{r4, r5, r6, pc}
 8004798:	20000314 	.word	0x20000314

0800479c <_isatty_r>:
 800479c:	2300      	movs	r3, #0
 800479e:	b570      	push	{r4, r5, r6, lr}
 80047a0:	4d06      	ldr	r5, [pc, #24]	@ (80047bc <_isatty_r+0x20>)
 80047a2:	0004      	movs	r4, r0
 80047a4:	0008      	movs	r0, r1
 80047a6:	602b      	str	r3, [r5, #0]
 80047a8:	f7fc fad8 	bl	8000d5c <_isatty>
 80047ac:	1c43      	adds	r3, r0, #1
 80047ae:	d103      	bne.n	80047b8 <_isatty_r+0x1c>
 80047b0:	682b      	ldr	r3, [r5, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d000      	beq.n	80047b8 <_isatty_r+0x1c>
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	bd70      	pop	{r4, r5, r6, pc}
 80047ba:	46c0      	nop			@ (mov r8, r8)
 80047bc:	20000314 	.word	0x20000314

080047c0 <_sbrk_r>:
 80047c0:	2300      	movs	r3, #0
 80047c2:	b570      	push	{r4, r5, r6, lr}
 80047c4:	4d06      	ldr	r5, [pc, #24]	@ (80047e0 <_sbrk_r+0x20>)
 80047c6:	0004      	movs	r4, r0
 80047c8:	0008      	movs	r0, r1
 80047ca:	602b      	str	r3, [r5, #0]
 80047cc:	f7fc fada 	bl	8000d84 <_sbrk>
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	d103      	bne.n	80047dc <_sbrk_r+0x1c>
 80047d4:	682b      	ldr	r3, [r5, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d000      	beq.n	80047dc <_sbrk_r+0x1c>
 80047da:	6023      	str	r3, [r4, #0]
 80047dc:	bd70      	pop	{r4, r5, r6, pc}
 80047de:	46c0      	nop			@ (mov r8, r8)
 80047e0:	20000314 	.word	0x20000314

080047e4 <memchr>:
 80047e4:	b2c9      	uxtb	r1, r1
 80047e6:	1882      	adds	r2, r0, r2
 80047e8:	4290      	cmp	r0, r2
 80047ea:	d101      	bne.n	80047f0 <memchr+0xc>
 80047ec:	2000      	movs	r0, #0
 80047ee:	4770      	bx	lr
 80047f0:	7803      	ldrb	r3, [r0, #0]
 80047f2:	428b      	cmp	r3, r1
 80047f4:	d0fb      	beq.n	80047ee <memchr+0xa>
 80047f6:	3001      	adds	r0, #1
 80047f8:	e7f6      	b.n	80047e8 <memchr+0x4>
	...

080047fc <_init>:
 80047fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fe:	46c0      	nop			@ (mov r8, r8)
 8004800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004802:	bc08      	pop	{r3}
 8004804:	469e      	mov	lr, r3
 8004806:	4770      	bx	lr

08004808 <_fini>:
 8004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480a:	46c0      	nop			@ (mov r8, r8)
 800480c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480e:	bc08      	pop	{r3}
 8004810:	469e      	mov	lr, r3
 8004812:	4770      	bx	lr
